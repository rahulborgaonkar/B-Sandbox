<apex:page standardController="VisualAntidote__Previous_Form__c" extensions="VisualAntidote.FormEditorController,VisualAntidote.FormPaymentComponentController" id="pg" title="Fast Forms" sidebar="false" tabStyle="FastForms__tab">  

 <head>
 <!-- Pure Chat Snippet no change -->
<script type='text/javascript'>
/*(function () { var done = false; var script = document.createElement('script'); script.async = true; script.type = 'text/javascript'; script.src = 'https://app.purechat.com/VisitorWidget/WidgetScript'; document.getElementsByTagName('HEAD').item(0).appendChild(script); script.onreadystatechange = script.onload = function (e) { if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) { var w = new PCWidget({ c: '25d09910-b904-4399-b5f3-988100ad71bf', f: true }); done = true; } }; })();
*/
</script>
<!-- End Pure Chat Snippet -->
<script>
/*Intercom Snippet*/
window.intercomSettings = {
    app_id: "uh2s363g",
    user_id: "{!$Organization.Id}",
    name: "{!$User.FirstName} {!$User.LastName}", // Full name
    email: "{!$User.Email}", // Email address       
    "widget": {
        "activator": "#Intercom"     
      }
  };
</script>
<script>(function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/uh2s363g';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()
/*End Intercom Snippet*/
</script>
<script>
/*FullStory Snippet*/
window['_fs_debug'] = false;
window['_fs_host'] = 'www.fullstory.com';
window['_fs_org'] = '1ZpR';
(function(m,n,e,t,l,o,g,y){
  g=m[e]=function(a,b){g.q?g.q.push([a,b]):g._api(a,b);};g.q=[];
  o=n.createElement(t);o.async=1;o.src='https://'+_fs_host+'/s/fs.js';
  y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
  g.identify=function(i,v){g(l,{uid:i});if(v)g(l,v)};g.setUserVars=function(v){FS(l,v)};
  g.clearUserCookie=function(d,i){d=n.domain;while(1){n.cookie='fs_uid=;domain='+d+
  ';path=/;expires='+new Date(0);i=d.indexOf('.');if(i<0)break;d=d.slice(i+1)}}
})(window,document,'FS','script','user');

FS.identify('{!$Organization.Id}', {
  displayName: '{!$User.FirstName} {!$User.LastName}',
  email: '{!$User.Email}'
});

/*End FullStory Snippet*/

</script>

         <meta http-equiv="X-UA-Compatible" content="IE=edge;" />     
         <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"/>
            <link rel="stylesheet" href="{!URLFOR($Resource.ffcommon,'ffcommon.css')}" />  
            <link rel="stylesheet" href="{!URLFOR($Resource.formcss)}" /> 
        <link rel="stylesheet" href="{!URLFOR($Resource.jScroll,'css/jquery.jscrollpane.css')}" />     
         <link rel="stylesheet" href="{!URLFOR($Resource.sortable,'sortable/jquery-ui.css')}" />    
         <link rel="stylesheet" href="{!URLFOR($Resource.jquery_dialog,'jquery_dialog/jquery-ui.css')}"/>
         
         <link rel="stylesheet" href="{!URLFOR($Resource.jScroll,'css/customSelectBox.css')}" />
         
         <script src="{!URLFOR($Resource.lzstringJs,'lz-string-master/libs/lz-string.min.js')}"></script>
         <script src="{!URLFOR($Resource.lzstringJs,'lz-string-master/libs/base64-string.js')}"></script>     
 
         
            
         <apex:includeScript value="//code.jquery.com/jquery-1.10.2.min.js" /> 
         <apex:includeScript value="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" />
 
    
        <script src="{!URLFOR($Resource.jScroll,'js/jquery.mousewheel.js')}"></script>       
         <script src="{!URLFOR($Resource.sortable,'sortable/jquery-ui.js')}"></script> 
    
            
         <script src="{!URLFOR($Resource.sticky,'jquery.stickit.js')}"></script>
         <script src="{!URLFOR($Resource.jquery_dialog,'jquery_dialog/jquery-ui.js')}"></script>     
         <script src="{!URLFOR($Resource.Clipboard,'ZeroClipboard.js')}"></script>

             <link rel="stylesheet" href="{!URLFOR($Resource.foundation,'css/foundation.css')}" />     
        <script src="{!URLFOR($Resource.foundation,'js/foundation.min.js')}"></script>
        <script src="{!URLFOR($Resource.foundation,'js/foundation/foundation.joyride.js')}"></script>
         
        
            <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.js"></script>
     
     <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-sliderAccess.js"></script>
        
     
            <link href="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.css" rel="stylesheet">  </link>
        
         <script src="{!URLFOR($Resource.ruleEditorComponentJs)}"></script>
     <script src="{!URLFOR($Resource.commonJSHelper)}"></script>
 <script src="{!URLFOR($Resource.formEditorJS)}"></script>

         <link rel="stylesheet" href="{!URLFOR($Resource.select2,'select2.css')}" />
        <script src="{!URLFOR($Resource.select2,'select2.js')}"></script>
  
        <script src="{!URLFOR($Resource.Select2MultiCheckboxExt)}"></script>
        <script src="{!URLFOR($Resource.jScroll,'js/jScrollPane.js')}"></script>

        <script src="{!URLFOR($Resource.SelectToRadioList)}"></script>
         <script src="{!URLFOR($Resource.FFRating)}"></script>
         <script src="{!URLFOR($Resource.CSStoJSON)}"></script>
            <link rel="stylesheet" href="{!URLFOR($Resource.ffcolpicker,'css/colpick.css')}"/>
         <script src="{!URLFOR($Resource.ffcolpicker,'js/colpick.js')}"></script>
         <link rel="stylesheet" href="{!URLFOR($Resource.ffrangeslider,'rangeslider.css')}"/>
         <script src="{!URLFOR($Resource.ffrangeslider,'rangeslider.js')}"></script>
    <script src="{!URLFOR($Resource.styleEditorComponentJs)}"></script>
    
    <script src="{!URLFOR($Resource.formPaymentComponentJS)}"></script>

 

    <script src="{!URLFOR($Resource.fftextcomplete,'fftextcomplete/textcomplete.min.js')}"></script>
    <link rel="stylesheet" href="{!URLFOR($Resource.fftextcomplete,'fftextcomplete/textcomplete.css')}"/>
    
    <script src="{!URLFOR($Resource.freshereditor,'freshereditor/shortcut.js')}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.freshereditor,'freshereditor/farbtastic/farbtastic.js')}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.freshereditor,'freshereditor/bootstrap/bootstrap-dropdown.js')}" type="text/javascript"></script>
     <script src="{!URLFOR($Resource.freshereditor,'freshereditor/freshereditor.min.js')}" type="text/javascript"></script>
    
    
    <link href="{!URLFOR($Resource.freshereditor,'freshereditor/farbtastic/farbtastic.css')}" rel="stylesheet" type="text/css" />
    <link href="{!URLFOR($Resource.freshereditor,'freshereditor/freshereditor.css')}" rel="stylesheet" type="text/css" />
   

<script type='text/javascript'>
        var maxRelatedObject=9;
        var ffcommonResuorceUrl  = "{!URLFOR($Resource.ffcommon)}";
        var colorTagArray=['Z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y'];
        var loadingWebWorker;
var SFOrgPrefix='{!prefix}';

                window.setInterval(autosaveTriggered, 3000);    
var sfdcHostName =window.location.host.split('.')[1]; 
var organisationId='{!$Organization.Id}';
var lookupWarningFlagDisable='{!isLookupWarningDisabled}';
 var apiSessionId='{!$Api.Session_ID}';
var ruleObjectsData=[];
var changeRelObjIndx='';
                var formRelatedObjectXML='';
                var mapLookup=new Object();
                var newWin=null;
                var togSet=false;
                var RunOnces=0;
                var isError=true;
                var idCounter=0;
                var RunTag=true;
                var sectionCounter =  0;
                var ruleCounter = 0;
                 var footerBtnHTMLPopulated = false;
                var isChangeFieldCallFromReteriveHtml = false;
                var isRequiredRemoved = false;
                //var imgUrl = "{!URLFOR($Resource.iconImages,'Edit.png')}";
                var imgUrl = "{!URLFOR($Resource.alpha,'blank.png')}";
                //var deleteImgUrl = "{!URLFOR($Resource.iconImages,'Close.png')}";
                var deleteImgUrl = "{!URLFOR($Resource.alpha,'blank.png')}";
                var editActiveImgUrl  = "{!URLFOR($Resource.iconImages,'EditActive.png')}";
                //var editImgUrl  = "{!URLFOR($Resource.iconImages,'Edit.png')}";
                var editImgUrl  = "{!URLFOR($Resource.alpha,'blank.png')}";
                var isChangesMadeInForm = false;
                var isFirstTimeFormEdit = "false";
                var limitValue='';
                
                
                $(function() { 
                     $(document).foundation();

                     $( document ).foundation({ joyride : {         
                            tip_animation : 'fade',
                            tip_animation_fade_speed: 500,          
                            modal:false,
                            expose: false,
                            next_button: true,
                            prev_button: false,
                            cookie_monster: true,
                            cookie_name: 'fastforms-joyride',
                            cookie_domain: false,
                            cookie_expires: 365,
                            post_ride_callback: function() {
                                $(document).foundation('joyride', 'destroy');
                            }                    
                            }
                     });
                     console.log(' First Call');
                     $(document).foundation('joyride', 'start');
                        
                        scrollAvailableDiv();           
                        isFirstTimeFormEdit = "{!isFirstTimeFormEdit}";
                        //initialize clipborad
                        var clip = new ZeroClipboard( 
                                $('.code'), {
                                        moviePath: "{!URLFOR($Resource.Clipboard,'ZeroClipboard.swf')}"
                                });
                        clip.addEventListener('complete',function(client,text) {
                                $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconOK'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Your embed code was copied to the clipboard! </div><br /><div class='secondary'>Simply paste the code into your website using <b>Command+V</b> on Mac or <b>Ctrl+V</b> on Windows.</div></div>");
                             
                                // Define the Dialog and its properties.
                                $("#dialog-confirm").dialog({
                                        resizable: false,
                                        modal: true,
                                        title: "Close",
                                        height: "auto",
                                        width: 413,
                                        buttons:{
                                                                "Close":{
                                                                click: function () {
                                                                        $(this).dialog('close');
                                                                     
                                                                        
                                                                },
                                                                text: 'Close',
                                                                'class': 'vabutton2'
                                                                } 
                                                        }
 
                                });
                        });          
                             
                        $(".selValue").val('{!form.FastFormID__c}');            
                        //$(".selValue").change();
                     // callRetrieveHtmlService();
                        retrieveHtmlService();
                        makeJqueryTooltip();
                        
                        $("#deleteTemplateLink").hide();
                        // Bind required checkbox onchange event to show and hide error message textbox and clear that textbox value
                        $( "#requiredChk" ).change(function() {
                                if($(this).prop('checked')== true){
                                        $( "#dialog" ).dialog({ height: 380});
                                        $("#errMsgForRequiredField").show();
                                        $("#lblErrMsgForRequiredField").show();
                                }else{
                                        $( "#dialog" ).dialog({ height: 350});
                                        $("#errMsgForRequiredField").hide();
                                        $("#lblErrMsgForRequiredField").hide();
                                        $("#errMsgForRequiredField").val('');
                                }
                        });
                        
                        //Hide/Show Form Information Section
                        $( "#showFormLink" ).hide();
                        $( "#showRuleLink" ).hide();
                        
                        $( "#hideFormLink" ).bind( "click", function() {
                                $("#formInformationTbl").hide();
                                $(this).hide();
                                $("#showFormLink").show();
                        });
                        
                        $( "#showFormLink" ).bind( "click", function() {
                                $("#formInformationTbl").show();
                                $(this).hide();
                                $("#hideFormLink").show();
                            
                        });
                        
                        //Scroll to Top
                        // Show or hide the sticky footer button 
                        $(window).scroll(function() {
                                if ($(this).scrollTop() > 220) {
                                        $('.go-top').fadeIn(500);
                                } else {
                                        $('.go-top').fadeOut(500);
                                }
                        });
                        
                        // Animate the scroll to top
                        $('.go-top').click(function(event) {
                                event.preventDefault();               
                                $('html, body').animate({scrollTop: 0}, 500);
                        })
                        
                        
                        $(document).click(function(e) {
                                if($('#customfltype').next().html() == "Please provide comma-separated extensions (e.g. .doc, .txt)" || e.target.id == "customfltype" || e.target.className == 'css-label' || e.target.className == 'fancyheader' || e.target.className == 'ExCol' || e.target.className == 'css-checkbox flChk' || e.target.className == 'fancydropdownbottom' || e.target.className == 'fancydropdown'){  

                                }else{
                                        $('.fancyheader').removeClass('addFancy');
                                        $('.fancyheader').next().hide();
                                        $('.fancyheader').next().next().hide();
                                }
                                
                                
                        });
                        
                        //Bind change event of submitBehaviorOptions Select list
                        bindMsgAndLinkFoucusEvent();
                        $( "#createNewRule" ).bind( "click", function() {
                                $("#hiddenSelectedRuleId").val('');
                                var allFieldsLabel = [];
                                var allFieldsName = [];
                                var counter = 0;
                                if($(".formUlLabel").has('li').length){
                                        $(".formUlLabel").find('li').each(function(){
                                                $(this).find('div:first').each(function(){
                                                        allFieldsLabel[counter] = $(this).attr('lblname');
                                                        counter++;
                                                });
                                        });
                                }
                                counter =0; 
                                if($(".formUlField").has('li').length){
                                        $(".formUlField").find('li').each(function(){
                                                $(this).find('div:first').each(function(){
                                                        allFieldsName[counter] = $(this).attr('id').replace('divField','');
                                                        counter++;
                                                });
                                        });
                                }
                                
                                var i =0;
                                $("#selectOptionsIfFields option").remove(); // removes all options from the select element w
                                $("#selectOptionsThenFields option").remove();
                                
                                for(i=0;i<allFieldsLabel.length && i<allFieldsName.length;i++){
                                         
                                        $("#selectOptionsIfFields").append('<option value="'+allFieldsName[i]+'" >'+ allFieldsLabel[i]+'</option>');
                                        $("#selectOptionsThenFields").append('<option value="'+allFieldsName[i]+'" >'+ allFieldsLabel[i]+'</option>');
                                }
                                $( '#rulesDialog' ).dialog( 'open' );
                                 
                        });
                        
                        
                        
                        // Sucess Dialog 
                        $( "#dialogSucess" ).dialog({
                                height: "auto",
                                width: 413,
                                modal: true,
                                autoOpen: false
                        });
                         
                        $( "#dialog" ).dialog({
                                height: "auto",
                                width: 413,
                                modal: true,
                                autoOpen: false
                        });
                            
                        //Button Dialog
                        $( "#buttonDialog" ).dialog({
                                height: "auto",
                                width: 413,
                                modal: true,
                                autoOpen: false
                        });
                            
                        //Preview Dialog
                        $('#preview').dialog({
                                autoOpen: false,

                                width: 520,
                                modal: true,
                                title:"Form Preview",
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                },
                                close: function (event, ui) {
                                        closePrivewDialog();
                                }
                        }); 
                            console.log('Second call');
                        //$('.formName').parent().parent().hide();
                        //$('.objectType').parent().parent().hide();
                        //$('#saveFormBtn').parent().parent().hide();
                        //$('[id$="pb2"]').hide();
                        makeParentFormSortable();
                        makeFormSortable();
                                                        
                        isChangesMadeInForm = false; 
                                    
                });
                function resetSavedButton(){
                        isChangesMadeInForm  = true;
                        if($("#btnSaved").hasClass('editorButton') == false){
                                $("#btnSaved").removeAttr('disabled');
                                $("#btnSaved").text('Publish Draft');
                                $("#btnSaved").removeClass('btnSaved').addClass('editorButton');
                                $("#btnSaved").removeClass('btnGreenClick');
                        } 
                         
                }

                
                function isNumber(n){
                        return (parseFloat(n) == n);
                }
                //Dropdown
                function fancydropdowntoggle(dv){
                        $('#limitValue').focus();           
                        var myRegExp = /\.[0-9a-z]+$/i;
                        if($('#customfltype').val() == ""){
                                $(dv).next().toggle();
                                $(dv).next().next().toggle();
                        }else{                    
                                if(myRegExp.test($('#customfltype').val())){
                                        $(dv).next().toggle();
                                        $(dv).next().next().toggle(); 
                                         //isChangesMadeInForm = true;    
                                }else{
                                        $('.ExCol').attr('src',"{!URLFOR($Resource.iconImages,'SelectArrowDown.png')}");
                                        $("#customfltype").next().remove();
                                        $("#selectedfiletypes").val('');
                                        $("#customfltype").after('<span style="color:red;">Please provide comma-separated extensions (e.g. .doc, .txt)</span>');
                                        $("#customfltype").css('border','1px solid red'); 
                                        $("#customfltype").focus();              
                                } 
                        } 
                        
                        if($('.fancydropdown').css('display') != 'none'){
                                $('.fancyheader').addClass('addFancy');
                                $('.fancydropdown').addClass('addFancyTop');
                                $('.fancydropdownbottom').addClass('addFancyBottom');
                                $('.ExCol').attr('src',"{!URLFOR($Resource.iconImages,'SelectArrowUp.png')}");                      
                        }else{
                                $('.fancyheader').removeClass('addFancy');
                                $('#trForFileField td').removeAttr('style');
                                $('.fancyheader').attr('title',$("#selectedfiletypes").val());
                                $('.ExCol').attr('src',"{!URLFOR($Resource.iconImages,'SelectArrowDown.png')}");
                        } 
                                                
                        
                        //Dropdown
                        $(".flChk").click(function(){
                                var ck = '';
                                var totCheck = 0;
                                var getCheck = 0;
                                $(".flChk").each(function(){
                                        totCheck +=1;                  
                                        if($(this).is(":checked")){
                                                ck +=$(this).val()+",";
                                        }else{
                                                getCheck +=1;
                                        }
                                });
                                if($('#customfltype').val() == ""){
                                        $("#selectedfiletypes").val(ck.slice(0, -1));
                                        $('.fancyheader span').text(ck.slice(0, -1))
                                }else{ 
                                        ck += $("#customfltype").val();
                                        $("#selectedfiletypes").val(ck);
                                        $('.fancyheader span').text(ck)
                                }
                                if(totCheck  == getCheck){
                                        $('.fancyheader span').text("All");
                                        $("#customfltype").val('');                    
                                } 
                                addLabel();
                                resetSavedButton();
                                
                        });
                        $("#customfltype").bind("change",function(){
                                
                                $("#selectedfiletypes").val($(this).val());
                                $("#customfltype").css('border','none');
                                $("#customfltype").next().remove();                
                                var ck = '';
                                var isGet= false;
                                $(".flChk").each(function(){
                                        if($(this).is(":checked")){
                                                ck +=$(this).val()+",";
                                                isGet=true;
                                        }   
                                });
                                if($('.fancyheader span').text() == ""){
                                        $('.fancyheader span').text("All");
                                }
                                var myRegExp = /\.[0-9a-z]+$/i;
                                if($('#customfltype').val() == ""){                 
                                        $("#selectedfiletypes").val(ck.slice(0, -1));
                                }else{
                                        if(myRegExp.test($('#customfltype').val())){
                                                ck += $("#customfltype").val()+',';                  
                                                $("#selectedfiletypes").val(ck.slice(0, -1));
                                                $('.fancyheader span').text($("#selectedfiletypes").val()); 
                                                isError=true;      
                                                addLabel();
                                                resetSavedButton();
                                        }else{
                                                $("#selectedfiletypes").val('');
                                                $("#customfltype").after('<span style="color:red;">Please provide comma-separated extensions (e.g. .doc, .txt)</span>');
                                                $("#customfltype").css('border','1px solid red'); 
                                                $("#customfltype").focus();
                                                isError=false;               
                                        } 
                                }             
                        });
                        
                }  

                function resetFloat()
                {
                        resetScroll();

                }
 
                function scrollAvailableDiv()
                {
                    var margintop=140;
                    if(msieversion()>0 && !$("#mainDiv").hasClass('msIE'))
                            {
                                $("#mainDiv").addClass('msIE');
                            }
                     $(window).scroll(function() {

                        var legendOffset = $('.form-editor-title-box').offset().top+$('.form-editor-title-box').height();///$('#headerPanel').offset().top+$('#headerPanel').height()+100;
                     var headerLegendOffset=$('#sfff-form-editor').offset().top;
                            var scroll = $(this).scrollTop();
                       var formCanvasBottom=  $('#sfff-form-editor .main-content-holder').offset().top+$('.main-content-holder').height();
                       var availableFieldBottom=   $('#availableFieldBox').offset().top+$('#availableFieldBox').height()-1;
                    console.log(' Debug scroll-'+scroll+' legendOffset-'+legendOffset+' formCanvasBottom-'+formCanvasBottom+'  availableFieldBottom-'+availableFieldBottom);
                           if (scroll <= legendOffset || legendOffset==0 ) {
                      console.log(' Removing sticky sidebar');
                              if($('#sfff-form-editor .main-content-holder').hasClass('floating-sidebar'))
                              {
                                        $('#availableFieldBox').css({
                                            'position': 'relative',
                                            'top': 'auto',
                                        'margin-top':0
                                        });
                                        $('.form-floating-actions').hide();
                                                $('#sfff-form-editor .main-content-holder').removeClass('floating-sidebar');
                               }        

                            }
                            
                            else {
                             if (scroll >headerLegendOffset)
                            {
                                
                                
                                 
                                    $('#availableFieldBox').css({
                                        'position': 'fixed',
                                        'top': 0,
                                        'margin-top':1
                                    });
                            }
                            else{
                                $('#availableFieldBox').css({
                                            'position': 'relative',
                                            'top': 'auto',
                                        'margin-top':0
                                        });
                            }
                             
                               if(!$('#sfff-form-editor .main-content-holder').hasClass('floating-sidebar') )
                              {
                               
                                   console.log(' adding sticky sidebar');
                               $('#sfff-form-editor .main-content-holder').addClass('floating-sidebar');
                                $('.form-floating-actions').show();
                                }
                                //$('#availableFieldBox').css({'margin-top':margintop});
                            }
                        });
                }   
                 function resetScroll()
                {
                    var isFixed = false;
                    
                    var $w = $(window);
                    var sMargin=false;

                    var legendOffset = $('#headerPanel').offset().top+$('#headerPanel').height()+100;
                                
                    var scroll = $w.scrollTop();
                    if (scroll <= legendOffset || legendOffset==0 ) {
                    // console.log(' Removing sticky sidebar');
                              if($('.main-content-holder').hasClass('floating-sidebar'))
                              {
                                        $('#availableFieldBox').css({
                                            'position': 'relative',
                                            'top': 'auto',
                                        'margin-top':0
                                        });
                                        $('.form-floating-actions').hide();
                                                $('.main-content-holder').removeClass('floating-sidebar');
                               }        

                            }
                            
                            else {
                               // console.log(' adding sticky sidebar');
                               if(!$('.main-content-holder').hasClass('floating-sidebar'))
                              {
                               $('.main-content-holder').addClass('floating-sidebar');
                                $('.form-floating-actions').show();
                                 
                                    $('#availableFieldBox').css({
                                        'position': 'fixed',
                                        'top': 0,
                                        'margin-top':45
                                    });
                                }
                            }
                }
                
                
            
                function bindMsgAndLinkFoucusEvent(){
                        //this for disable testbox for message in button area
                    
                }
            
                //JQuery  Tootlip 
                function makeJqueryTooltip(){         
                        $( ".tooltipFieldType" ).tooltip({
                                show: {
                                        effect: "slideDown",
                                        delay: 250
                                }
                        });
                 
                }
                function makeParentFormSortable(){
                        $( "#parentUlForm" ).sortable({
                                dropOnEmpty: true,
                                revert : 300,
                                items: '> li:not(.addNewSection,.Ulbtn)',
                                cancel:"select,option,textarea,input,.isFieldEdit,.editDelDiv,.editImg, .deleteField",
                                update: function(event, ui) {
                                        resetSavedButton();
                                        //Run this code whenever an item is dragged and dropped into this list                     
                                        if(ui.item.hasClass("fieldLi") ){

                                                $( this ).sortable("cancel");
                                                ui.sender.sortable("cancel");
                                        }else{
                                                if(ui.item.has('input[type="button"]').length){
                                                        ui.item.children().addClass( "sectionHeader");
                                                }else{
                                                        ui.item.children().addClass( "sectionHeader");
                                                        $( "#parentUlForm li" ).removeClass('ui-state-default');
                                                }
                                        }
                                     
                                },
                                activate: function( event, ui ) { 
                                        ui.item.addClass('grabCursor');
                                },
                                deactivate: function( event, ui ) {
                                        ui.item.removeClass('grabCursor');
                                }
                                
                        });
                        
                        
                }
                 /*MakeFOrmSortable starts */
                 function makeFormSortable() {
    console.log('in Make form sortable ');
    $(".formUlLabel").sortable({
        items: "> li:not(.sectionDisabled)",
        // connectWith: "#sortableForRelFields1,#sortableForRelFields2,#sortableForRelFields4,#sortableForRelFields3,.formUlLabel",
        connectWith: ".list-toggle-div .dropfields,.formUlLabel",
        dropOnEmpty: true,
        zIndex: 9999,
        cancel: 'select,option,textarea,input,.isFieldEdit,.editDelDiv,.sectionDisabled',
        revert: 300,

        receive: function (ev, ui) {   
            goToNextTourStop();
            console.log('Recieving li item on sortable recieve event');   
            var validField=true;  
            if (ui.item.hasClass("Ulbtn") || ui.item.hasClass("lbl") || ui.item.hasClass("sectionHeader")) {
                alert('Oops! Fields can only be added to sections. Please drop your field into an section or create a new section.');
                ui.sender.sortable("cancel");
                validField=false;
            }
            <apex:outputText rendered="{!if(isFreemium ,true,false)}">
            if (ui.sender.parents('.list-toggle-div-wrap').length>0 && ui.sender.attr('id')!='sortableForRelFields1' && ui.sender.attr('id')!='generalSortableForFields') {
                console.log(' Sender List id- '+ui.sender.attr('id'));
                upgradeNowMessage('Multi-object forms are only available for paid subscriptions..','',''); 
                ui.sender.sortable("cancel");
                validField=false;
            }
            else if(ui.sender.parents('.list-toggle-div-wrap').length>0 && ui.sender.attr('id')=='sortableForRelFields1')
            {
                var objname=ui.sender.parents('.list-toggle-div-wrap').find('span.objName').text();
                var vatt=ui.item.find('>div:first-child > label').attr('vatt');
                if( $.inArray(objname, validObjects())<0){
                    upgradeNowMessage("Only Case, Account, Contact and Lead fields are available in Fast Forms free edition.","", "");
                     ui.sender.sortable("cancel");
                    validField=false;
                }
                else if(!isNullOrEmpty(vatt) && vatt=='REFERENCE')
                {
                    upgradeNowMessage("Reference fields are only available for paid subscriptions.","", "");
                     ui.sender.sortable("cancel");
                    validField=false;
                }
             
                                                 
                   }
                    </apex:outputText>
          
            //Run this code whenever an item is dragged and dropped into this list 
           if(validField)
            {
              var isGen = false;
                if (ui.item.children().length > 0) {
                             

                var itemid=ui.item.attr('id');
                //var str ='';  
                var ispaymentfield=false;
                var isESignaturefield=false;
                if(itemid!==undefined && itemid.indexOf('PAYPALPAYMENT')>0)
                {
                    ispaymentfield=true;
                }
                else if(itemid!==undefined && itemid.indexOf('ESIGNATURE')>0)
                {
                  isESignaturefield=true;
                }
                if(ispaymentfield)
                {
                    ui.item.find('.paypal-item-header').hide();
                         
                    $(ui.item.find('.paypal-item-row')).each(function(i, ppitemrow) {
                                 
                        if(!$(ppitemrow).hasClass('pp-default-hide'))
                        {
                            $(ppitemrow).find('.PPGeneralFieldDiv').show();
                            $(ppitemrow).show();
                        }
                        // $(ppitemrow).find('.PPGeneralFieldDiv').css('width','40%');
                                             
                    });
                    ui.item.find('.alert-payment-setup').show();
                         
                }
                else if(isESignaturefield)
                {
                  ui.item.find('.ffd-esignature').html($('#DocSignHTMLTemp').html());
                   isGen = true;
                }
                else
                {
                    ui.item.find('div').show();
                    ui.item.find('div:first').css('width','40%');
                    // str = ui.item.find('div').attr('id').replace('divLabel', '');
                }

                ui.item.removeClass('tooltip');
                $(".formUlLabel").children().removeClass('ui-state-default');
                ui.item.find('.deleteField').show();
                var dropLiId = ui.item.attr('id');
                ui.item.removeClass('ui-state-default');
                                
                // str = str.substring(0, str.indexOf("."));
                ui.item.removeAttr('style');
                if(ui.sender.hasClass('formUlLabel') && ui.item.find('.fieldDiv').find('>select,>:input').length>0)
                {
                    if(ui.item.find('.fieldDiv').find('>select').length>0)
                    {
                        var controlType=ui.item.find('.fieldDiv').find('>select').attr('data-flexcontrol');
                        if(controlType!==undefined && controlType!='')
                        {
                            if(controlType.indexOf('picklist-radiobutton')>=0)
                            {
                                var  alignment=controlType.replace('picklist-radiobutton','');
                                reinitializeSelectToRadioElement(controlType,ui.item.find('.fieldDiv'),false,false,'ff-ext-radio',alignment);
                            }
                            else if(controlType.indexOf('multipicklist-checkbox')>=0)
                            {
                                var  alignment=controlType.replace('multipicklist-checkbox','');
                                reinitializeSelectToRadioElement(controlType,ui.item.find('.fieldDiv'),false,false,'ff-ext-radio',alignment);
                            }
                            else if(controlType='picklist-combobox')
                            {
                                destroySelect2(ui.item.find('.fieldDiv'));
                                ui.item.find('.fieldDiv').find('>select').select2();
                            }
                            else
                            {

                            }
                        }
                    }
                    else if(ui.item.find('.fieldDiv').find('>:input[type="textbox"]').length>0)
                    {

                        var controlType=ui.item.find('.fieldDiv').find('>:input[type="textbox"]:first').attr('data-flexcontrol');
                        var attrDataFlexControl = ui.item.find('.fieldDiv').find('>:input[type="textbox"]:first').attr('data-flexcontrol');
                        if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
                            switch (attrDataFlexControl) 
                            {     
                                case "integer-starrating":
                                    reinitializeRatingElement(ui.item.find('.fieldDiv'));
                                    break;
                                case "integer-npsrating":
                                    reinitializeRatingElement(ui.item.find('.fieldDiv'));
                                    break;
                                default:
                                    setRatingInput(ui.item.find('.fieldDiv'),'','','','',attrDataFlexControl);
                                    break;
                            }
                        }
                    }
                } 
                ui.item.unbind();
                var addObjName = '';
                //alert(ui.sender.attr("id"));
               var  sortableFieldClassName='';
                if (ui.sender.attr("id") == 'sortableForRelFields1') {
                    sortableFieldClassName='sortableForRelFields1';
                    //addObjName = $('#sortableForRelFields1 li').attr('obj');
                    addObjName = $("#priName").text();
                    ui.item.find('label').after('<span class="listName" style="display:none">'+sortableFieldClassName+'</span>');
                    ui.item.find('label').first().after('<br/><span class="addObjName"><i>From : ' + addObjName + '</i></span>');
                }
                else if(ui.sender.attr("id") == 'generalSortableForFields')
                {
                    sortableFieldClassName='generalSortableForFields';
                }
                else if (!isNullOrEmpty(ui.sender.attr("id")) && ui.sender.attr("id").indexOf('sortableForRelFields' )>=0 && ui.sender.hasClass('dropfields')) {
                    var ListMainVarRel=ui.sender.parents('.list-toggle-div-wrap');
                    addObjName = $(ListMainVarRel).find('.objName').text().replace('Fields', 'Object');
                      sortableFieldClassName=$(ListMainVarRel).find('ul.dropfields').attr('id');              
                    var colorBar =safeStringValue($(ListMainVarRel).attr('data-childclass'),'');
                    
                    var lblName = ui.item.find('label').attr('id').replace('lbl', '');
                    if (colorBar != undefined && colorBar != '') {
                        
                        ui.item.addClass(colorBar);
                                                    
                                                        
                            ui.item.find('label').attr('id', ui.item.find('label').attr('id') + colorBar);
                            if (ui.item.find('input[type="textbox"]').attr('id') != undefined)
                                ui.item.find('input[type="textbox"]').attr('id', ui.item.find('input[type="textbox"]').attr('id') + colorBar);
                            if (ui.item.find('input[type="checkbox"]').attr('id') != undefined)
                                ui.item.find('input[type="checkbox"]').attr('id', ui.item.find('input[type="checkbox"]').attr('id') + colorBar);
                            if (ui.item.find('input[type="select"]').attr('id') != undefined)
                                ui.item.find('input[type="select"]').attr('id', ui.item.find('input[type="select"]').attr('id') + colorBar);
                            if (ui.item.find('textarea').attr('id') != undefined)
                                ui.item.find('textarea').attr('id', ui.item.find('textarea').attr('id') + colorBar);
                            if (ui.item.find('select').attr('id') != undefined)
                                ui.item.find('select').attr('id', ui.item.find('select').attr('id') + colorBar);
                             
                        
                    } else {
                        RemoveAllClassColorCodes(ui.item);
                        var midName = '';
                        var str = ui.item.find('div').attr('id').replace('divLabel', '');
                        $("#sortableForRelFields1").find('li').each(function () {
                            if (isNullOrEmpty($(ListMainVarRel).attr('data-ischild')))  {

                                if (($(this).attr("title") == "REFERENCE" || $(this).attr("title").match(/\(Lookup\)$/g) != null)     && $(this).find('div').attr('lblname') == $(ListMainVarRel).find('.objName').text().substring(0, $(ListMainVarRel).find('.objName').text().indexOf('(') - 1)) {
                                    midName = $(this).find('label').attr('id').replace('lbl', '');
                                }
                            }
                        });

                        var priObj = str.substring(0, str.indexOf('.') + 1);
                        var fldObj = str.substring(str.lastIndexOf('.'));
                        var inputIdStr = priObj + midName + fldObj;
                        //for change ID of TextBox;
                        if (ui.item.find('input[type="textbox"]').attr('id') != undefined) {
                            ui.item.find('input[type="textbox"]').attr('id', inputIdStr);
                            ui.item.find('input[type="textbox"]').attr('name', inputIdStr);
                        }
                        if (ui.item.find('input[type="select"]').attr('id') != undefined) {
                            ui.item.find('input[type="select"]').attr('id', inputIdStr);
                            ui.item.find('input[type="select"]').attr('name', inputIdStr);
                        }
                        if (ui.item.find('textarea').attr('id') != undefined) {
                            ui.item.find('textarea').attr('id', inputIdStr);
                            ui.item.find('textarea').attr('name', inputIdStr);
                        }
                        if (ui.item.find('select').attr('id') != undefined) {
                            ui.item.find('select').attr('id', inputIdStr);
                            ui.item.find('select').attr('name', inputIdStr);
                        }
                        //ui.item.attr('ondblclick', "openEditDialog('" + ui.item.attr('id') + "',true);");
                    }
                    ui.item.find('label').after('<span class="listName" style="display:none">'+sortableFieldClassName+' ' + colorBar + '</span>');
                    ui.item.find('label').first().after('<br/><span class="addObjName"><i>From : ' + addObjName + '</i></span>');
                    ui.item.attr('id', ui.item.attr('id') + colorBar);
                    //ui.item.attr('ondblclick', "openEditDialog('" + ui.item.attr('id') + "',true);");
                    ui.item.find('.editImg').attr('onclick', "openEditDialog('" + ui.item.attr('id') + "',true);");
                    ui.item.find('.deleteField').attr('id', ui.item.attr('id'));

                    //Changes                           

                    ui.item.find('#isDefaultRequired' + lblName).attr('id', $('#isDefaultRequired' + lblName).attr('id') + colorBar);
                    ui.item.find('#isUserSelectedRequired' + lblName).attr('id', $('#isUserSelectedRequired' + lblName).attr('id') + colorBar);
                    ui.item.find('#errMsgForRequired' + lblName).attr('id', $('#errMsgForRequired' + lblName).attr('id') + colorBar);
                    ui.item.find('#defaultValue' + lblName).attr('id', $('#defaultValue' + lblName).attr('id') + colorBar);
                    ui.item.find('#hideField' + lblName).attr('id', $('#hideField' + lblName).attr('id') + colorBar);
                    ui.item.find('#isReadOnly' + lblName).attr('id', $('#isReadOnly' + lblName).attr('id') + colorBar);
                    ui.item.find('#upsertField' + lblName).attr('id', $('#upsertField' + lblName).attr('id') + colorBar);

                }

                 
                
                             
              //  ui.item.addClass(ui.sender.attr("id"));
              ui.item.addClass(sortableFieldClassName);
                //Set Auto required message
                var tempFieldDiv=        ui.item.find( "div.fieldDiv" ).children().not('.custom-flex-control-container').not('div.select2-container');
                //Set data-isrequired for Input 
                tempFieldDiv= $(tempFieldDiv).parent();
                                
                $(tempFieldDiv).find('input').attr('data-requiredmessage', 'required');
                $(tempFieldDiv).find('select').attr('data-requiredmessage', 'required');
                $(tempFieldDiv).find('textarea').attr('data-requiredmessage', 'required');

                //Add required to hidden field
                var reqId = ui.item.attr('id');
                //$("#"+dropLiId+" label").attr('id').replace('lbl','');
                ui.item.find('#errMsgForRequired' + reqId).attr('Value', 'required');
                ui.item.unbind('dblclick');
                             
                //commented on June 16 2015 to add functionality of double click only for labels
                //ui.item.attr('ondblclick', "openEditDialog('" + ui.item.attr('id') + "',true);");
                ui.item.attr('ondblclick' , "editFFLabel(this);");

                
                var isPaymentField = false;
                if (dropLiId == "lblliGENERALTEXT") {
                    var i = Math.floor((Math.random() * 1000) + 1);
                    dropLiId = dropLiId + i;
                    ui.item.attr('id', dropLiId);
                    ui.item.find('label').attr('id', 'lblGENERALTEXT' + i);
                    isGen = true;
                }

                if (dropLiId == "lblliIMAGE") {
                    var i = Math.floor((Math.random() * 1000) + 1);
                    dropLiId = dropLiId + i;
                    ui.item.attr('id', dropLiId);
                    ui.item.find('label').attr('id', 'lblIMAGE' + i);
                    ui.item.find('label').hide();
                    isGen = true;
                    ui.item.find('div:first').css('width', '100%');
                    ui.item.addClass('fieldLiImage');
                } 
                if (dropLiId == "lblliPAYPALPAYMENT") {
                                         
                    <apex:outputText rendered="{!if(isFreemium || packageTier != 'Enterprise',true,false)}">
                        upgradeNowMessage('Payment fields are only available in the Enterprise edition of Fast Forms.','','');                           
                    deletePaymentField(dropLiId);
                    </apex:outputText>
                                       
                                        
                    <apex:outputText rendered="{!packageTier == 'Enterprise'}">                                     
                        var i = Math.floor((Math.random() * 1000) + 1);
                    dropLiId = dropLiId + i;
                    ui.item.attr('id', dropLiId);
                    var originaldivId=ui.item.find('.field-div-payment').attr('id');
                    ui.item.find('.field-div-payment').attr('id',originaldivId+i);

                    $(ui.item.find('.paypal-item-row')).each(function(index, ppitemrow) {
                                                    
                        if($(ppitemrow).hasClass('pp-expiry'))
                        {
                                                        
                            var ppexpirylblid=$(ppitemrow).find('.PPGeneralLabelDiv label').attr('id');
                            ppexpirylblid.replace(i,'');
                            $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id',ppexpirylblid+i);
                            $($(ppitemrow).find('select')).each(function(index, ppitemrowselect) {
                                var orginalselElemId=$(ppitemrowselect).attr('data-pp-name');
                                $(ppitemrowselect).attr('id',orginalselElemId+i);
                                $(ppitemrowselect).attr('name',orginalselElemId+i);
                            });
                        }
                        else
                        {
                            var orginalElemId=$(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('data-pp-name');
                            orginalElemId=orginalElemId;
                            $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('id',orginalElemId+i);
                            $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('name',orginalElemId+i);
                            $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id','lbl'+orginalElemId+i);
                        }

                    });
                    isPaymentField=true;
                    isGen = true;
                    </apex:outputText>
                }                

                if (dropLiId == "lblliCAPTCHA") {
                    var i = Math.floor((Math.random() * 1000) + 1);
                    dropLiId = dropLiId + i;
                    ui.item.attr('id', dropLiId);
                    ui.item.find('label').attr('id', 'lblCAPTCHA' + i);
                    ui.item.find('#Captcha').attr('id', 'Captcha' + i);
                    isGen = true;
                }

                if (dropLiId == "lblliUPLOAD") {

                    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                    upgradeNowMessage('File uploads are only available in Professional or Enterprise editions of Fast Forms.','','');                           
                    deleteField(dropLiId);
                    </apex:outputText>
                                        
                                        
                    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                    var i = Math.floor((Math.random() * 1000) + 1);
                    dropLiId = dropLiId + i;
                    ui.item.attr('id', dropLiId);
                                    

                    ui.item.find('label').attr('id', 'lblFileUpload' + i + '_Select');
                    ui.item.find('label').attr('for', 'FileUpload' + i);
                                     
                    ui.item.find('div[id^="divLabel"] label').attr('id', 'lblFileUpload' + i + '_Select');
                                         


                    ui.item.find('#FileUpload01').attr('name', 'FileUpload' + i);
                    ui.item.find('#FileUpload01').attr('id', 'FileUpload' + i);

                    /* new code ends */
                    //update Div
                    ui.item.find('#FileUploadAreaXX').attr('id', 'FileUploadArea' + i);
                    ui.item.find('#FileUploadDropAreaXX').attr('id', 'FileUploadDropArea' + i);
                    ui.item.find('#btnFileUploadAddXX').attr('id', 'btnFileUploadAdd' + i);
                    isGen = true;
                    </apex:outputText>
                }

                if (/RecordTypeId/i.test(dropLiId)) {
                    ui.item.find('label').addClass('grayLabel');
                }
                //ui.item.attr('ondblclick' , "openEditDialog('"+ ui.item.attr('id')+"',true);");
                //bindLabelDoubleClick(ui.item);
                var editDelDivHtml = '<div class="editDelDiv">';

                if (ui.item.find('.deleteField').length == 0 && ui.item.find('.editImg').length == 0) {

                    if (isGen ) {
                        if(isPaymentField)
                        {
                            editDelDivHtml += '<img class="editImg" src="' + imgUrl + '" onclick="openEditPaymentDialog(\'' + dropLiId + '\',this,true);" />';
                            editDelDivHtml += '<img id="' + dropLiId + '" src="' + deleteImgUrl + '" class="deleteField" onclick="deletePaymentField(this.id);"/>';
                        }
                        else if(isESignaturefield)
                        {
                          editDelDivHtml += '<img class="editImg" src="' + imgUrl + '" onclick="openEditSignatureDialog(\'' + dropLiId + '\',this,true);" />';
                            editDelDivHtml += '<img id="' + dropLiId + '" src="' + deleteImgUrl + '" class="deleteField" onclick="deleteSignatureField(this);"/>';
                        }
                        else
                        {
                            editDelDivHtml += '<img class="editImg" src="' + imgUrl + '" onclick="openEditDialog(\'' + dropLiId + '\',true);" />';
                            editDelDivHtml += '<img id="' + dropLiId + '" src="' + deleteImgUrl + '" class="deleteField" onclick="deleteField(this.id);"/>';
                        }
                    } else {
                        editDelDivHtml += '<img class="editImg" src="' + imgUrl + '" onclick="openEditDialog(\'' + ui.item.attr('id') + '\',true);" />';
                        editDelDivHtml += '<img id="' + ui.item.attr('id') + '" src="' + deleteImgUrl + '" class="deleteField" onclick="deleteField(this.id);"/>';
                    }
                }
                editDelDivHtml += '</div >';
                if(isPaymentField)
                {
                    ui.item.find('.field-div-payment').append(editDelDivHtml);
                }
                else if(isESignaturefield)
                        {
                          var i = Math.floor((Math.random() * 1000) + 1);
                            dropLiId = dropLiId + i;
                            ui.item.attr('id', dropLiId);
                            var eSignatureId=dropLiId.replace('lblli','');
                            ui.item.append(editDelDivHtml);
                            ui.item.find('.labelDiv').hide();
                            ui.item.find('.eSignatureFieldDiv').attr('id', 'field'+eSignatureId);
                            ui.item.find('.eSignatureFieldDiv').show();
                            ui.item.find('.eSignatureFieldDiv .ffd-esignature').show();
                            ui.item.find('.eSignatureFieldDiv .main-docsign-wrapper').attr('id', eSignatureId);
                            resetESignatureElement(ui.item);
                        }
                else
                {
                    ui.item.append(editDelDivHtml);
                }

                                
                addRequiredMarkOnLabel();
                if (isFirstTimeFormEdit == "true") {
                    $(".dragDropInfoDiv").hide();
                    $(".arrowUpper").hide();
                    $(".addNewSection").css('margin-top', '0%');
                }

                if (ui.item.parent().attr('id') == 'labelformUlForAddNewSection') {
                    addNewSectionDetail();
                    //var newAddedSectionId = sectionCounter - 1;
                    var bottomMostSection = $("#parentUlForm [id^='labelformUl']:not(#labelformUlForAddNewSection)").last();
                    $(bottomMostSection).append($("#labelformUlForAddNewSection").html());
                    $("#labelformUlForAddNewSection").html('');
                }


            }
            resetSavedButton(); 
            initScrollbar();
            $(this).parent().find('.ui-sortable-placeholder').removeClass('addNewSectionIcon');
            $(this).parent().find('.ui-sortable-placeholder').css("visibility", "hidden");
            $(this).parent().find('.ui-sortable-placeholder').remove('plusIcon');
            setHover();
            mixpanel.track('Field added by drag',{ "Field ID": dropLiId});
            var metadata = {
              field_name: dropLiId
            };
            Intercom('trackEvent', 'added-field', metadata);
                }        

        },
        activate: function (event, ui) {
            console.log(' makeFormSortable- '+ui.item.attr('class'));
            ui.item.css('height', 'auto');
                        
            ui.item.addClass('grabCursor');
            //ui.item.removeAttr('style');
            ui.item.show();
        },
        deactivate: function (event, ui) {
            resetSavedButton();
            $('#addSectionPlus').hide();
              
            ui.item.removeClass('grabCursor');
        },
        over: function (event, ui) {
            if ($(this).parent().hasClass('addNewSection')) {
                setTimeout(function () { $('#addSectionPlus').show() }, 100);
                if ($(this).parent().find('.ui-sortable-placeholder').length > 0) {
                    $(this).parent().find('.ui-sortable-placeholder').removeClass('addNewSectionIcon');
                    $(this).parent().find('.ui-sortable-placeholder').css("visibility", "hidden");
                    $(this).parent().find('.ui-sortable-placeholder').remove('plusIcon');
                } else {
                    $(this).parent().find('.placeholder').removeClass('addNewSectionIcon');
                    $(this).parent().find('.placeholder').css("visibility", "hidden");
                    $(this).parent().find('.placeholder').remove('plusIcon');
                }
            } else {
                $('#addSectionPlus').hide();
                if ($(this).parent().find('.ui-sortable-placeholder').length > 0) {
                    $(this).parent().find('.ui-sortable-placeholder').addClass('addNewSectionIcon');
                    $(this).parent().find('.ui-sortable-placeholder').css("visibility", "visible");
                    $(this).parent().find('.ui-sortable-placeholder').html('<div class="plusIcon">+</div>');
                } else {
                    $(this).parent().find('.placeholder').addClass('addNewSectionIcon');
                    $(this).parent().find('.placeholder').css("visibility", "visible");
                    $(this).parent().find('.placeholder').html('<div class="plusIcon">+</div>');
                }
            }

        }

    });
}
   function resetESignatureElement(elemSource)
   {
    var options = {
name:'.ffsignature',
  penColour : '#052942',
  drawOnly : false,
  typed:'.typedSignName',
  output:'.outputSignedName',
  drawIt:'.ffdrawIt a',
  sig:'docsignWrapper',
  clear:'.ffclearButton a',
  canvas:'.signPadName',
  onBeforeValidate:'validateDocSign',
  errorMessage:'please provide a signature',
  errorMessageDraw:'please sign in this block',
  errorClass:'ff-error',
  validateFields:false
};
var optionsDate = {
name:'.ffdate',
  penColour : '#052942',
  drawOnly : false,
  typed:'.typedSignDate',
  output:'.outputSignedDate',
  drawIt:'.ffdrawIt a',
  sig:'docsignWrapper',
  clear:'.ffclearButton a',
  canvas:'.signPadDate',
  onBeforeValidate:'validateDocSign',
  errorMessage:'please provide a date',
  errorMessageDraw:'please provide a date',
  errorClass:'ff-error',
  validateFields:false
};
      var signInstance=$(elemSource).find('.ff-signwrapper.ff-typed .doc-sign-name').signaturePad(options);
   
  var signInstanceDate=$(elemSource).find('.ff-signwrapper.ff-typed .doc-sign-date').signaturePad(optionsDate);
  options['drawOnly']=true;
   var signInstance=$(elemSource).find('.ff-signwrapper.ff-drawn .doc-sign-name').signaturePad(options);
   
   optionsDate['drawOnly']=true;
  var signInstanceDate=$(elemSource).find('.ff-signwrapper.ff-drawn .doc-sign-date').signaturePad(optionsDate);
   }
   function clearDrawnElements(elemSource)
   {
    
      $(elemSource).parents('.main-docsign-wrapper').find('.ff-signwrapper.ff-drawn .doc-sign-name').signaturePad().clearCanvas();
    $(elemSource).parents('.main-docsign-wrapper').find('.ff-signwrapper.ff-drawn .doc-sign-date').signaturePad().clearCanvas();
   }
  function switchSignTab(elemSource)
  {
    $(elemSource).parents('.main-docsign-wrapper').find('.ff-sign-ul li a').removeClass('current');
    $(elemSource).addClass('current');
  $(elemSource).parents('.main-docsign-wrapper').find('.ff-signwrapper').addClass('display-none');
    if($(elemSource).attr('data-signed')=='drawn')
    {
    $(elemSource).parents('.main-docsign-wrapper').find('.ff-signwrapper.ff-drawn').removeClass('display-none');
    $(elemSource).parents('.main-docsign-wrapper').find('.ff-sign-div .ffclearButton').show();
    }
    else
    {
     $(elemSource).parents('.main-docsign-wrapper').find('.ff-signwrapper.ff-typed').removeClass('display-none');
     $(elemSource).parents('.main-docsign-wrapper').find('.ff-sign-div .ffclearButton').hide();
    }
  }
/*makeformsortable ends */
function bindLabelDoubleClick(parentElementSource)
{
    var labelElement=(parentElementSource).find('label.ff-label:first');
 
        $(labelElement).bind("dblclick", (function () {
            var $input = $('<input />', { 'class': 'ff-label ff-label-input' });
        $input.val($(this).text());
 console.log(' dbclick hit ');
        $(labelElement).html('');
        $(labelElement).append($input);
        
        }));
        $(labelElement).find('input').on("blur", (function () {
                $(labelElement).text($(this).val());
                 
                console.log(' Blur hit ');
        }));

}
function editFFLabel(elemSource){
    try{
    mixpanel.track('Field label changed using double-click',{ "Field ID": $(elemSource).attr('id')});
    var metadata = {
      field_name: ''
    };
    Intercom('trackEvent', 'changed-label', metadata);
  }
  catch(err)
  {
    console.log('Warning:'+err.message);
  }
    var elem=$(elemSource).find('label.ff-label:first');
    if($(elem).find('input.ff-label-input').length<1)
    {

             var $input = $('<input />', { 'class': 'ff-label ff-label-input', 'onblur':'backToFFLabel(this,false);','data-parentclass':'ff-label' });
             var labelVal = $(elem).html();
             if ($(elem).text() == String.fromCharCode(160))
                labelVal = '';
        $input.val(labelVal);
 console.log(' dbclick hit '+$(elem).text());
    $(elem).attr('data-text',$(elem).text());
        $(elem).html('');
    
        $(elem).append($input);
        $(elem).find('input.ff-label-input').focus();
    }
}
 function editFFLabelORIGINAL(elemid){
    
    mixpanel.track('Field label changed using double-click',{ "Field ID": elemid});
    var metadata = {
      field_name: ''
    };
    Intercom('trackEvent', 'changed-label', metadata);
    var elem=$("#" + elemid).find('label.ff-label:first');
    if($(elem).find('input.ff-label-input').length<1)
    {

             var $input = $('<input />', { 'class': 'ff-label ff-label-input', 'onblur':'backToFFLabel(this,false);','data-parentclass':'ff-label' });
             var labelVal = $(elem).html();
             if ($(elem).text() == String.fromCharCode(160))
                labelVal = '';
        $input.val(labelVal);
 console.log(' dbclick hit '+$(elem).text());
    $(elem).attr('data-text',$(elem).text());
        $(elem).html('');
    
        $(elem).append($input);
        $(elem).find('input.ff-label-input').focus();
    }
}
function editFFSection(elemSource){
    var elemLabel=$(elemSource);//.find('label.ff-section-header');
    var elemid=$(elemLabel).attr('id');
    mixpanel.track('Section label changed using double-click',{ "Section ID": elemid});

    var elem=$(elemLabel);
    if($(elem).find('input.ff-label-input').length<1)
    {

             var $input = $('<input />', { 'class': 'ff-section-header ff-label-input', 'onblur':'backToFFLabel(this,false);','data-parentclass':'ff-section-header' });
        $input.val( $(elem).html());
 console.log(' dbclick hit '+$(elem).text());
    $(elem).attr('data-text',$(elem).text());
        $(elem).html('');
    
        $(elem).append($input);
        $(elem).find('input.ff-label-input').focus();
    }
}
        function editPaymentFFLabel(elem){
            mixpanel.track('Field label changed',{ "Field ID": $(elem).attr('id')});
            
     if($(elem).find('input.ff-label-input').length<1)
    {
             var $input = $('<input />', { 'class': 'ff-label ff-label-input', 'onblur':'backToFFLabel(this,true);','data-parentclass':'ff-label' });
        $input.val( $(elem).html());
 console.log(' dbclick hit ');
    $(elem).attr('data-text',$(elem).text());
        $(elem).html('');
    
        $(elem).append($input);
        $(elem).find('input.ff-label-input').focus();
    }
        }

     function backToFFLabel(elem,isPaymentFieldLabel){
     var labelElement;
     var parentClass=$(elem).attr('data-parentclass');
      if(!isNullOrEmpty($(elem).attr('data-parentclass'))) 
      {
        labelElement=$(elem).parents('label.'+parentClass+'');
      }
     var newvalue=$(labelElement).find('input.ff-label-input').val();
     $(labelElement).find('input.ff-label-input').remove();
     newvalue=validatedHTML(newvalue);
     $(labelElement).html(newvalue);
     if(isPaymentFieldLabel)
     {
        console.log(' Payment label update');
         updatePaymentFieldLabels(labelElement);
     }
        else
        {
     isChangesMadeInForm = true;
                        autosaveTriggered();
                    }
     }

             function setHover(){    
         //  getRemoteRuleFieldsInfoJs();        
        $('#parentUlForm li ul li').hover(
                     function(){ 
                             $(this).find('.addObjName').show();
                             $(this).find('.addObjName img').remove();
                         
                                            
                     },
                     function(){ $(this).find('.addObjName').hide();
                            /* $(this).find('.sfff-field-info ').addClass('display-none');*/
                     }
                                     
        );
                        
             
        $('.hoverRelSelectedImg').bind('mouseover', function() {
                $(this).attr("src","{!URLFOR($Resource.VisualAntidote__iconImages,'ButtonSprites.png')}");
        });
        $('.hoverRelSelectedImg').bind('mouseout', function() {
                $(this).attr("src","{!URLFOR($Resource.VisualAntidote__iconImages,'ButtonSpritesActive.png')}");
        });  
                                        
        
                         
}
         
function removePrimaryLookupField() {
    var primaryObjName = $("#priName").attr('data-object');
         $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                    var ListRelVarElem=$(sortableUL).parents('.list-toggle-div-wrap');
                             if (!isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
                        $(sortableUL).find("li").each(function () {
                                if (($(this).attr('title') == "REFERENCE" || $(this).attr('title').match(/\(Lookup\)$/g) != null) && $(this).find('label').attr('vaobj') != undefined && $(this).find('label').attr('vaobj') == primaryObjName) {
                                        $(this).hide();
                                }
                        });
                        }
                         
                         });
}
          
                function saveFormComplete(){
                        ruleCounter = 0; 
                        $('[id$="formName"]').attr("disabled", true);
                        $('[id$="FromTypeOptions"]').attr("disabled", true);
                        $('.formName').parent().parent().show();
                        $('.objectType').parent().parent().show();
                        $('#saveFormBtn').parent().parent().hide();
                        $("#parentUlForm").html('');
                        calcualteFormInformation();             
                }
                 
                function sendComplete(){ 
                        $(".expandBtnDiv").hide()  
                        $( '#success').show();
                        $( '#Processing' ).hide();
                        if($('[id$="is500InternalError"]').val() == "true") {
                                $('#ui-id-1').text('Error');
                                $('#dialogSucess #success').hide();
                                $('#dialogSucess #failure').show();
                                 
                        }else{
                                $('#ui-id-1').text('Success');
                                $('#dialogSucess #success').show();
                                $('#dialogSucess #failure').hide();
                                closeSavingDialog();
                                                  
                                $(".btnPublishedSaved").text('Publish Draft');
                        }                                              
                }
                 
                function callRetrieveHtmlService(){
                 
                    console.log(' callRetrieveHtmlService call');
                        var val= $('[id$="selectedPreFormID"]').val();
                        $('#saveFormBtn').parent().parent().hide();
                        $('#previewiframe').hide();
                        if(val == 'none'){
                            console.log('preform id null');
                                $("#editor1").val('');
                                $('.formName').parent().parent().hide();
                                $('.objectType').parent().parent().hide();
                                $('[id$="pb2"]').hide();
                                $("#deleteTemplateLink").hide();
                        }else if(val == 'New Form'){
                            console.log('preform id new form');
                                $('.formName').parent().parent().show();
                                $('#saveFormBtn').parent().parent().show();
                                $('[id$="formName"]').attr("disabled", false);
                                $('[id$="FromTypeOptions"]').attr("disabled", false);
                                $('[id$="formName"]').val('');
                                $('[id$="FromTypeOptions"]').val('none');
                                $('.objectType').parent().parent().hide();
                                $('[id$="pb2"]').hide();
                                $("#deleteTemplateLink").hide();
                        }else{
                            console.log('preform id else');
                                retrieveHtmlService();
                        }
                }

                 function retrieveHtmlServiceComplete(){  
                  <apex:outputText rendered="{!if(isFreemium ,true,false)}">
                   resetEditorFreemiumNotificationJS(true);
                   </apex:outputText>
        ruleCounter = 0;
        //$('.formName').parent().parent().hide();
        //$('.objectType').parent().parent().show(); 
        var formHtml = decompressText($('[id$="hiddenCkEditorValue"]').val());


        $('#previewDiv').html(formHtml);
        var htmlValForLabel = '';
        var htmlValForField = '';
        $("#parentUlForm").html('');
        var sectionIndex= 0;
        var prevLiHTML= '';
        var prevUlHTML= '';
        var beforeLiHTML=''
        var afterLiHTML=''
        var liIndex = 0;
        var index = 0;
        var headingHtml = '';
        var liWithUlHtml = '';
        var cssForAlign = '';
        var sectionClass = '';
        var lastUlEndTag = '</ul> </td></tr></table> </li>';
        var isFirstUlElement=true;
        var isUlElement=true;
        var sectionCount=0;
        var tdElementCount=$("#previewDiv").find('.td').length;
        var sectionElementCount=$("#previewDiv").find('.innerSecHeader').length;
        $("#previewDiv").find('.tr .td').find("div:first").show();
        var ulInnerSectionHeader = '';    
        console.log(' tdElementCount '+tdElementCount);
        $("#previewDiv").find('.td').each(function( tdIndex) {  
                console.log(' tdIndex  '+tdIndex);            
                if($(this).hasClass("sectionHeader")  ){
                        var headingHtml = '';
                        if($(this).has('input[type="button"]').length){
                                idCounter++;
                                $(this).children().parent().find('input[type="button"]').attr('id',idCounter+'sortableForButton');
                                $(this).children().parent().find('input[type="button"]').addClass('sectionHeader');
                                /*code added to fix footer area customization issue on Dec 19 2014 */
                                var footernote='';
                                if($(this).children().parent().has('label'))
                                {
                                        if($(this).children().parent().find('div .footnoteDiv'))
                                        {
                                             
                                                footernote=$(this).children().parent().find('.footnoteDiv label').html();
                                        }
                                }
                                                
                                populateFooterFromFormHTML($(this).children().parent().find('input[type="button"]'),footernote);
                                /**/
                                headingHtml = '<li  class="Ulbtn sectionHeader"  id="'+idCounter+'sortableForLabelli" style="text-align:'+$(this).css('text-align')+'"  >'+$(this).children().parent().html()+'<div class="btnEditDiv"><img class="editImg" src="{!URLFOR($Resource.VisualAntidote__alpha,'blank.png')}" onclick="openBtnEditDialog(\''+idCounter+'sortableForLabelli\');" /></div></li>';
                        } 
                }else if($(this).hasClass('innerSecHeader')){
                        
                        var liHTMLElement=''
                        if(!isUlElement)
                        {
                                liHTMLElement=htmlValForLabel;
                                htmlValForLabel='';
                        }
                        isUlElement=true;
                        var localseccounter='';
                        try{
                                localseccounter=   $(this).find('label').attr('id').replace('sectionLabel','');
                        }
                        catch(err)
                        {
                                localseccounter=sectionIndex;
                        }
                        
                        sectionIndex++;
                        
                        sectionClass='formUlLabel';
                         
                        idCounter++;
                        //}
                        if($(this).hasClass('hideFullSection'))
                        {
                                sectionClass="formUlLabel hideFullSection";
                        }
                        else
                        {
                                sectionClass='formUlLabel';
                        }
                        labelLiId = localseccounter+'sortableForLabelli';
                        //Is Inner Section Header in Ul
                        if(isFirstUlElement)
                        {
                                var ulInnerSectionHeader = '<li class="lbl sectionDisabled" style="text-align:'+ cssForAlign+';"  id="'+labelLiId+'" >'+$(this).children().parent().html();
                                ulInnerSectionHeader += '<div class="editDelDiv"><img src="'+deleteImgUrl+'" id="deleteFormUl'+localseccounter+'" class="deleteField" onclick="deleteSection(this);"/>';
                                ulInnerSectionHeader += '<img class="editImg" src="{!URLFOR($Resource.VisualAntidote__alpha,'blank.png')}" onclick="openEditDialog(\''+labelLiId+'\',false);"></div></li>';
                                liWithUlHtml += '<li><table class="mainTable" width="100%"><tr><td width="100%"><ul class="'+sectionClass+'" id="labelformUl'+ localseccounter+'" >'+ulInnerSectionHeader ;
                                 
                     
                        }
                        else{
                                liWithUlHtml+=liHTMLElement;
                                liWithUlHtml+=  lastUlEndTag;
                                var ulInnerSectionHeader = '<li class="lbl sectionDisabled" style="text-align:'+ cssForAlign+';"  id="'+labelLiId+'" >'+$(this).children().parent().html();
                                ulInnerSectionHeader += '<div class="editDelDiv"><img src="'+deleteImgUrl+'" id="deleteFormUl'+localseccounter+'" class="deleteField" onclick="deleteSection(this);"/>';
                                ulInnerSectionHeader += '<img class="editImg" src="{!URLFOR($Resource.VisualAntidote__alpha,'blank.png')}" onclick="openEditDialog(\''+labelLiId+'\',false);"></div></li>';
                                liWithUlHtml += '<li><table class="mainTable" width="100%"><tr><td width="100%"><ul class="'+sectionClass+'" id="labelformUl'+ localseccounter+'" >'+ulInnerSectionHeader ;
                                 
                        }
                        isFirstUlElement=false;
                         
                        sectionCount++;
                }
                else
                {
                    /*if li*/
                        var tableRowId = $(this).parent().attr('id');
                        var fieldLiId = '';
                        var labelLiId = '';
                        if($(this).children().parent().html() != undefined)
                        {
                                isUlElement=false;
                                labelLiId = tableRowId.replace('divRowlbl','lblli');
                                cssForAlign = '';
                                if($(this).children().parent().has("h1,h2,h3").length){
                                        if($(this).children().parent().find("h1,h2,h3").attr('align') != undefined)
                                                cssForAlign = $("#labelDiv").find("h1,h2,h3").attr('align');
                                        else if($("#labelDiv").find("h1,h2,h3").css('text-align') != "undefined")
                                                cssForAlign = $("#labelDiv").find("h1,h2,h3").css('text-align');
                                }                           
                                if($(this).hasClass('innerSecHeader')){                               
                                }
                                else
                                {
                                        //is field li in Ul 
                                        var freemiumClass="";
                                        
                                        var  tempLiHtml ='';
                                                         
                                        if($(this).hasClass('PAYPALPAYMENT'))
                                        {
                                                    var tempPaymentIndex=labelLiId;
                                        tempPaymentIndex=tempPaymentIndex.replace('lblliPAYPALPAYMENT','');
                                        $('#lblPaymentTEMP').html($('#generalFieldBox').find('#lblliPAYPALPAYMENT').html());
                                        
                                         
                                        var originaldivId=$('#lblPaymentTEMP').find('.field-div-payment').attr('id');
                                        var newPaymentDivid=originaldivId+tempPaymentIndex;
                                                            $('#lblPaymentTEMP').find('.field-div-payment').attr('id',newPaymentDivid);
                                                            $($('#lblPaymentTEMP').find('.paypal-item-row')).each(function(indx, ppitemrow) {
                                                                    
                                                                     if(!$(ppitemrow).hasClass('pp-default-hide'))
                                                                     {
                                                                         $(ppitemrow).show();
                                                                     }
                                                                                    
                                                                     if($(ppitemrow).hasClass('pp-expiry'))
                                                                     {
                                                                        
                                                                        var ppexpirylblid=$(ppitemrow).find('.PPGeneralLabelDiv label').attr('id');
                                                                        ppexpirylblid.replace(i,'');
                                                                            $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id',ppexpirylblid+tempPaymentIndex);
                                                                            $($(ppitemrow).find('select')).each(function(index, ppitemrowselect) {
                                                                            var orginalselElemId=$(ppitemrowselect).attr('data-pp-name');
                                                                         $(ppitemrowselect).attr('id',orginalselElemId+tempPaymentIndex);
                                                                         $(ppitemrowselect).attr('name',orginalselElemId+tempPaymentIndex);
                                                                         });
                                                                     }
                                                                     else
                                                                     {
                                                                        var orginalElemId=$(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('data-pp-name');
                                                                     orginalElemId=orginalElemId;
                                                                     $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('id',orginalElemId+tempPaymentIndex);
                                                                      $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('name',orginalElemId+tempPaymentIndex);
                                                                        $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id','lbl'+orginalElemId+tempPaymentIndex);
                                                                      }
                                                            });
                                                    var paymentFieldRecId=$(this).find('.sfff-payment-field').attr('data-paymentfield-record-id');
                                                    if(paymentFieldRecId!==undefined && paymentFieldRecId!=='' )
                                                    {
                                                    resetPaymentField($('#lblPaymentTEMP'),true,true); 
                                                    $('#lblPaymentTEMP').find('.field-div-payment').attr('data-paymentfield-record-id',paymentFieldRecId);
                                                     
                                                    }
                                                    else
                                                    {
                                                        resetPaymentField($('#lblPaymentTEMP'),false,true); 
                                                    }
                                                    console.log('Payment field rec id '+paymentFieldRecId);
                                                     var lockHtml='';
                                                     var eventHtml='';
                                            <apex:outputText rendered="{!if(isFreemium ,true,false)}">
                                            lockHtml=getFreemiumHTML('Payment fields are','freemium-edit-block','lines-3');
                                            freemiumClass=' fm-enabled';
                                            </apex:outputText>
                                            <apex:outputText rendered="{!if(isFreemium ,false,true)}">
                                            eventHtml='onclick="openEditPaymentDialog(\''+labelLiId+'\',this,true);"';
                                            </apex:outputText>
                                                    var editPaymentHtml='<div class="editDelDiv'+freemiumClass+'">'+lockHtml+'<img id="'+labelLiId+'" class="deleteField" onclick="deletePaymentField(this.id);" src="'+deleteImgUrl+'"/><img class="editImg" src="{!URLFOR($Resource.VisualAntidote__alpha,'blank.png')}"  '+eventHtml+' /></div></li>';
                                                    $('#lblPaymentTEMP').find('.field-div-payment').append(editPaymentHtml);
                                                    tempLiHtml = '<li class="fieldLi generalSortableForFields"  id="'+labelLiId+'"   title="'+$(this).attr('title') +'">'+$('#lblPaymentTEMP').html();
                                                    //tempLiHtml  += 
                                                    if(paymentFieldRecId!==undefined && paymentFieldRecId!=='' )
                                                    {

                                                        initializePaymentFieldsInfo(paymentFieldRecId,newPaymentDivid);
                                                    }
                                        }
                                        else
                                        {
                                            var isReferenceField=false;
                                 var classAddSort = $(this).children().parent().find('.addObjName').first().text().replace('From : ','');
                                                classAddSort = classAddSort.replace(' Object','');
                                            if ($(this).find('#divLabelIMAGE').length > 0 && $(this).find('img').length > 0){
                                                    tempLiHtml = '<li class="fieldLi fieldLiImageActive" id="'+labelLiId+'"   title="'+$(this).attr('title') +'">'+$(this).children().parent().html();
                                            } else if ($(this).find('#divLabelIMAGE').length > 0 && $(this).find('img').length == 0){
                                                    tempLiHtml = '<li class="fieldLi fieldLiImage" id="'+labelLiId+'"   title="'+$(this).attr('title') +'">'+$(this).children().parent().html();
                                            } else {
                                                if($(this).children().parent().find('.fieldDiv span.lookupInput').length>0)
                                                {
                                                    isReferenceField=true;
                                                    var onclickEvent=$(this).children().parent().find('.fieldDiv span.lookupInput a').attr('onclick');
                                                    if(!isNullOrEmpty(onclickEvent))
                                                    {
                                                        onclickEvent=onclickEvent.replace("openLookupPopup('","openLookupRefPopup(this,'");
                                                            $(this).children().parent().find('.fieldDiv span.lookupInput a').attr('onclick',onclickEvent);
                                                    }
                                                }
                                                var cssStyle='';
                                                if(!isNullOrEmpty(cssForAlign))
                                                {
                                                    cssStyle='style="text-align:'+ cssForAlign+'"';
                                                }

                                                    tempLiHtml = '<li class="fieldLi '+ $(this).children().parent().find('.listName').first().text() +'" '+cssStyle+'  id="'+labelLiId+'"   title="'+$(this).attr('title') +'">'+$(this).children().parent().html();
                                                 
                                                
                                            }
                                            var lockHtml='';
                                            var eventHtml='';
                                            var idItems=lengthSplitId($(this).find('>div:first-child').attr('id'));
                                     

                                            <apex:outputText rendered="{!if(isFreemium ,true,false)}">
                                    
                                                 if(idItems==1)
                                                 {
                                                    //general field 
                                                    if(labelLiId.indexOf('lblliUPLOAD')==0)
                                                    {

                                                        lockHtml=getFreemiumHTML('File Upload fields are','freemium-edit-block','lines-3');//'<span class="freemium-edit-block freemium- 
                                                        freemiumClass=' fm-enabled';
                                                    }
                                                    else{
                                                         eventHtml='onclick="openEditDialog(\''+labelLiId+'\',true);"';
                                                    }
                                                 }
                                                 else if(idItems==3)
                                                 {
                                                    lockHtml=getFreemiumHTML('Related object fields are','freemium-edit-block','');
                                                    freemiumClass=' fm-enabled';
                                                 }
                                                 else if(idItems==2)
                                                 {
                                                    var primaryobjectname=$(this).find('>div:first-child').attr('id');
                                                    primaryobjectname=primaryobjectname.split('.')[0].replace('divLabel','');
                                                    if($.inArray(primaryobjectname, validObjects())>=0)
                                                    {
                                                    eventHtml='onclick="openEditDialog(\''+labelLiId+'\',true);"';
                                                    }
                                                    else
                                                    {
                                                        lockHtml=getFreemiumHTML('Only Case, Account, Contact and Lead fields are','freemium-edit-block','');
                                                        freemiumClass=' fm-enabled';
                                                    }
                                                    if(isReferenceField)
                                                    {
                                                        lockHtml=getFreemiumHTML('Reference fields are','freemium-edit-block','lines-3');
                                                        freemiumClass=' fm-enabled';
                                                        eventHtml='';
                                                    }
                                                 }
                                                 else{

                                                   eventHtml='onclick="openEditDialog(\''+labelLiId+'\',true);"';
                                                 }
                                            </apex:outputText>
                    
                                            <apex:outputText rendered="{!if(isFreemium ,false,true)}">
                                             eventHtml='onclick="openEditDialog(\''+labelLiId+'\',true);"';
                                            </apex:outputText>
                                            tempLiHtml  += '<div class="editDelDiv'+freemiumClass+'">'+lockHtml+'<img id="'+labelLiId+'" class="deleteField" onclick="deleteField(this.id);" src="'+deleteImgUrl+'"/><img class="editImg" src="{!URLFOR($Resource.VisualAntidote__alpha,'blank.png')}"  '+eventHtml+' /></div></li>';
                                        }
                                    if(sectionCount<sectionElementCount)
                                        {
                                             
                                                /* before last section element add LIHTML  to temp variable which will be accessed by section block when it gets there */
                                                htmlValForLabel+=tempLiHtml;
                                        }
                                        else
                                        {
                                            /* after last section element add LIHTML directly to outputhtml */
                                                console.log(' sectionElementCount==sectionCount-  '+htmlValForLabel);

                                                liWithUlHtml+=  tempLiHtml;
                                        }
                                }
                    }
                        
                    index++;
                                                
                }
        });
                            
        liWithUlHtml+=  lastUlEndTag;
        
        $("#parentUlForm").append(liWithUlHtml );                    
             
             console.log(' Li items appended ');       
        $("#parentUlForm").append(headingHtml);
        console.log(' footer item appended ');       
        makeFormSortable();
        console.log(' make form sortable ');     
        isChangeFieldCallFromReteriveHtml = true;
        //changeFields();
        
        deleteDuplicateLi(); resetSortable(); 
console.log(' changeFields  called'); 
                    resetSelect2ForFormElements();  
                    resetFlexInputForFormElements(); 
         
        $('#saveFormBtn').parent().parent().hide();
        $('[id$="pb2"]').show();
        calcualteFormInformation();
        $("#deleteTemplateLink").show();
        sectionCounter = sectionCount;
                            
}
             
function resetFlexInputForFormElements()
{
    
 $('.fieldDiv>input[type="textbox"]').each(function (i, inputElement) {
                
                var attrDataFlexControl = $(inputElement).attr('data-flexcontrol');
                if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
                        switch (attrDataFlexControl) 
                        {     
                                case "integer-starrating":
                             var noofitems=$(inputElement).attr('data-flex-max');
                             var minlabel=$(inputElement).attr('data-flex-minlabel');
                             var maxlabel=$(inputElement).attr('data-flex-maxlabel');

                                setRatingInput($(inputElement),noofitems,minlabel,'',maxlabel,attrDataFlexControl);
                             // $('.rating-range-block').removeClass('display-none');
                                 //   $('.rating-range-block .star-rating-range').removeClass('display-none'); 
                                        break;
                                case "integer-npsrating":
                                var minlabel=$(inputElement).attr('data-flex-minlabel');
                             var maxlabel=$(inputElement).attr('data-flex-maxlabel');
                                        var middlelabel=$(inputElement).attr('data-flex-middlelabel');
                                        setRatingInput($(inputElement),'',minlabel,middlelabel,maxlabel,attrDataFlexControl);
                                        //$('.rating-range-block').removeClass('display-none');
                                     // $('.rating-range-block .nps-rating-range').removeClass('display-none'); 
                                        break;
                                default:
                                setRatingInput($(inputElement),'','','','',attrDataFlexControl);
                                break;
                        }
                }
        });

}
function resetSelect2ForFormElements()
{
    
 $('.fieldDiv select').each(function (i, selectelement) {
                
                var attrDataFlexControl = $(selectelement).attr('data-flexcontrol');
                if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
                        switch (attrDataFlexControl) 
                        {     
                                case "picklist-default":
                                case "multipicklist-default":
                                        break;
                                case "picklist-combobox":
                                case "multipicklist-multi-tags":
                                        $(selectelement).select2();
                                        console.log('combo select or simple multi select2');
                                        <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                                        </apex:outputText> 
                                        
                                        break;
                                case "multipicklist-multi-tags-check":
                                        $(selectelement).select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
                                        console.log(' multi select2 with checkbox');
                                        <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                                        </apex:outputText> 
                                        break;
                                case "picklist-radiobutton-vertical":
                                $(selectelement).SelectToRadio({controlType:'ff-ext-radio',alignment:'vertical'});
                                <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                                        </apex:outputText> 
                                        break;
                                case  "picklist-radiobutton-horizontal":
                                reinitializeSelectToRadioElement('',$(selectelement).parent(),false,false,'ff-ext-radio','horizontal');
                                <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                                        </apex:outputText> 
                                    //$(selectelement).SelectToRadio({controlType:'ff-ext-radio',alignment:'horizontal'});
                                        break;
                                case  "multipicklist-checkbox-horizontal":
                                    $(selectelement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'horizontal'});
                                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                                        </apex:outputText> 
                                        break;
                                case  "multipicklist-checkbox-vertical":
                                    $(selectelement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'vertical'});
                                   <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                                        </apex:outputText> 
                                        break;
                                default:break;
                        }
                }
        });

}
         
        
                function populateFooterFromFormHTML(sendBtnElem,footnote){
                try{
                 $("#btnTxt").val($(sendBtnElem).val()) ;
                 $("#txtbxSubmitButtonLabel").val($(sendBtnElem).val()) ;
                        $("#BtnMessage").val($(sendBtnElem).attr('btnmessage'));
                        $("#txtareaThankyoumsg").val($(sendBtnElem).attr('btnmessage'));
                         $("#btnFootnote").val(''+footnote);
                        $("#btnUrl").val($(sendBtnElem).attr('btnurl')) ;
                        $("#txtbxRedirectUrl").val($(sendBtnElem).attr('btnurl')) ;
                        
                        if ($("#txtbxRedirectUrl").val() != "")
                        {
                                $('a[href$="#formconfirmationRadio1"]').parent().removeClass('active');
                                $('a[href$="#formconfirmationRadio2"]').parent().addClass('active')
                                $('#formconfirmationRadio1').removeClass('active in');
                                $('#formconfirmationRadio2').addClass('active in');            
                        }   
                        
                        footerBtnHTMLPopulated=true;
                        }
                        catch(err)
                        {
                        console.log(' Error in populating footerHtml '+err);
                        }
                }
                function addRequiredMarkOnLabel(){
                console.log(' add required label');
                        $(".formUlLabel").find('li.fieldLi').each(function(){
                                if($(this).hasClass('lbl') == false){
                                        var lblLiId =  $(this).attr('id');
                                        var fieldLiId = lblLiId.replace('lbl','');
                                        var isRequired =false;
                                        if($("#"+lblLiId).find('label:first').attr('id')!==undefined)
                                        {
                                        var nameOfLabel = $("#"+lblLiId).find('label:first').attr('id').replace('lbl','');
                                        isRequired = $("#"+lblLiId).find('#isUserSelectedRequired'+nameOfLabel).val() == "true";
                                        }
                                        var isPaymentField=false;
                                        if(lblLiId.indexOf('PAYPALPAYMENT')>0)
                                        {
                                        isPaymentField=true;
                                        }
                                        //Required Label Add onload                       
                                             if(isPaymentField)
                                                {
                                                    // commented on June 16 2015 to add functionality of double click only for labels
                                                        //$(this).attr('ondblclick' , "openEditPaymentDialog('"+ $(this).attr('id')+"',this,true);"); 

                                                }
                                                else
                                                {
                                                    // commented on June 16 2015 to add functionality of double click only for labels
                                                    //$(this).attr('ondblclick' , "openEditDialog('"+ $(this).attr('id')+"',true);");
                                                   // $(this).attr('ondblclick' , "editFFLabel('"+ $(this).attr('id')+"');");
                                                    $(this).attr('ondblclick' , "editFFLabel(this);");
                                                    
                                                    $(this).find('div:first').find('.requiredSpan').remove();
                                                    
                                                }
                                            

                                        if(isRequired == "true" || isRequired == true) {
                                                $(this).find('div:first').find('label').after('<span class="requiredSpan ff-required-mark"  >*</span>');
                                        }
                                        if($(this).find("#isDefaultRequiredCAPTCHA").length > 0){
                                                $(this).find('div:first').find('label').after('<span class="requiredSpan ff-required-mark"  >*</span>');
                                        }
                                        //Required Span
                                        if($(this).find('[name="FileUploadArea"]').attr('data-isrequired')){
                                                $(this).find('div:first').find('label').after('<span class="requiredSpan ff-required-mark"  >*</span>');
                                        }                      
                                        if($(this).find('[name="FileUploadArea"]').attr('data-isrequired') == false || $(this).find('[name="FileUploadArea"]').attr('data-isrequired') == "false"){
                                                $(this).find('div:first').find('label').next().remove();
                                        } 
                                            if(isPaymentField)
                                            {
                                                var ispaymentreq=false;
                                                if($(this).find('.field-div-payment').attr('data-paymentrequired'))
                                                {
                                                        ispaymentreq=true;
                                                }
                                                $($(this).find('.paypal-item-row')).each(function(i, ppitemrow) {
                                                        var isdatarequired=$(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv select').attr('data-isrequired');
                                                        if(isdatarequired!==undefined && ispaymentreq &&  (isdatarequired == "true" || isdatarequired == true ))
                                                        {
                                                            if($(ppitemrow).find('span.requiredSpan').length<1)
                                                            {
                                                                $(ppitemrow).find('label.ff-label').after('<span class="requiredSpan ff-required-mark"  >*</span>');
                                                             }
                                                        }
                                                        
                                                });  
                                         }             
                                }
                        });              
                }
                function createHtml(){
                       
                         $('.list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                            $(sortableUL).find('li').each(function(){
                                $(this).find('div').each(function(index){
                                        if(index==1){
                                                $(this).html($(this).text());
                                        }
                                });
                        });
                         });              
                }
                function deleteDuplicateLi(){
                        if(isChangeFieldCallFromReteriveHtml  == false){
                                $("#parentUlForm").html('');
                        }
                        isChangeFieldCallFromReteriveHtml = false;              
                        // Added X for non required field/// April 15-flexcontrol
                        $(".formUlLabel").find('li.fieldLi').each(function(){
                                if($(this).hasClass('sectionDisabled') == false){
                                        if($(this).find('input[id^="isDefaultRequired"]').val() == "true") {
                                                if(/lblliCAPTCHA/i.test($(this).attr('id')) || /lblliUPLOAD/i.test($(this).attr('id'))){
                                                }else{
                                                        $(this).find('.deleteField').remove();
                                                }
                                        }                       
                                        $("#sortableForRelFields1").find("#"+$(this).attr('id')).remove(); 
                                        $("#sortableForRelFields2").find("#"+$(this).attr('id')).remove(); 
                                        $("#sortableForRelFields3").find("#"+$(this).attr('id')).remove();
                                        $("#sortableForRelFields4").find("#"+$(this).attr('id')).remove(); 
                                             
                                             if(!(/lblliPAYPALPAYMENT/i.test($(this).attr('id'))))
                                             {
                                                    var lblLiId =  $(this).attr('id');                       
                                                    var fieldLiId = lblLiId.replace('lbl','');
                                             
                                                    var nameOfLabel = $("#"+lblLiId).find('label').attr('id').replace('lbl','');
                                                    var isRequired = $("#"+lblLiId).find('#isDefaultRequired'+nameOfLabel).val() == "true";
                                                }
                                }
                        });
                        //added all required field of current selected object in form section
                        if($("#parentUlForm").has('.formUlLabel').length==0){
                                addNewSectionDetail();
                        }              
                        createHtml();  
                        //Line of code cut       
                        addRequiredMarkOnLabel();               
                        removeReference();
                }
                /* method to remove required reference  fields from Editor area */
                function isFieldReference(elem) {

        var returnflag =false;
              try{
                $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                    var ListRelVarElem=$(sortableUL).parents('.list-toggle-div-wrap');
                             if (isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
                        
                        if (($(elem).attr("title") == "REFERENCE" || $(elem).attr("title").match(/\(Lookup\)$/g) != null) &&  $(elem).find('label').attr('vaobj') != undefined ) {
                            var elementName=$(elem).attr("title");
                            var lookupobjid=$(ListRelVarElem).find('.objName').attr('id');
                            if(!isNullOrEmpty(elementName) && !isNullOrEmpty(lookupobjid) && $(ListRelVarElem).find('.objName').text()==elementName.replace('(Lookup)','('+lookupobjid+')'))
                            {
                                console.log(' Field is a reference and available as object  '+$(ListRelVarElem).find('.objName').text());
                                returnflag = true;
                            }
                        }
                        }
                        else{
                        if (($(elem).attr("title") == "REFERENCE" || $(elem).attr("title").match(/\(Lookup\)$/g) != null) &&   $(elem).find('label').attr('vaobj') != undefined && $(elem).find('label').attr('vaobj') == $(ListRelVarElem).find('.objName').text()) {
                                returnflag = true;
                        }
                    }
                         });
}
catch(err)
{
    console.log(' Exception handled in isFieldReference: '+err.message);
}
                return returnflag;
        }
       
        function removeReference() {
        $("#sortableForRelFields1").find('li').each(function () {
                $(this).show();
        });
        $("#sortableForRelFields1").find('li').each(function () {
            var firstUlLiItem=$(this);
               
                 $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                    var ListRelVarElem=$(sortableUL).parents('.list-toggle-div-wrap');
                             if (isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
                        var objectfullname=$(ListRelVarElem).find('.objName').attr('id');
                        if(!isNullOrEmpty(objectfullname))
                        {
                            objectfullname=objectfullname.replace("##lookup","");
                            objectfullname=objectfullname.replace("##detail","");
                        }
                        if (($(firstUlLiItem).attr("title") == "REFERENCE" || $(firstUlLiItem).attr("title").match(/\(Lookup\)$/g) != null) &&  $(firstUlLiItem).find('label').attr('vaobj') != undefined ) {

                             var elementName=$(firstUlLiItem).attr("title");
                             var lookupobjid=$(ListRelVarElem).find('.objName').attr('id');
                            if(!isNullOrEmpty(elementName) && $(ListRelVarElem).find('.objName').text()==elementName.replace('(Lookup)','('+lookupobjid+')'))
                            {
                               $(firstUlLiItem).hide();
                           }
                        }
                        }
                        else{
                        if (($(firstUlLiItem).attr("title") == "REFERENCE" || $(firstUlLiItem).attr("title").match(/\(Lookup\)$/g) != null) &&   $(firstUlLiItem).find('label').attr('vaobj') != undefined && $(firstUlLiItem).find('label').attr('vaobj') == $(ListRelVarElem).find('.objName').text()) {
                              $(firstUlLiItem).hide();
                        }
                    }
                         });
        });
        }
                 


         
        
                var isCount=0;
                function resetSortable(){
                     console.log('reset sortable');
                        var blockSort = false;
                        $(".list-toggle-div .dropfields").sortable({ 
                                connectWith: ".formUlField,.formUlLabel",
                                dropOnEmpty: true,
                                revert: 300,
                                appendTo: document.body,
                                helper: "clone",     
                                receive: function(event, ui) {  
                                        var liId= ui.item.attr('id');
                                        if($('#' + liId + ' input[id^="isDefaultRequired"]').val() == "true" || $('#' + liId + ' input[id^="isDefaultRequired"]').val() == true){
                                     /// deletefield method added to fix the issue drag and drop issue from main form to fields list [it was adding the dragged item to first list fields]- balinder
                                      
                                        $(this).sortable('cancel');
                                                $(ui.sender).sortable('cancel');                        
                                                showError("<div class='primary'>The field you are attempting to remove is a required field.</div> <br/> <br /><div class='secondary'>Required fields cannot be removed from your form.</div>");
                                                                                                                                         
                                        } else {
                                                  deleteField(liId);
                                        }
                                     /* resetSavedButton();*/
                                        initScrollbar();                    
                                        
                                },
                             
                                activate: function( event, ui ) {
                                        ui.item.css('height','auto');
                                        ui.item.addClass('grabCursor');
                                },
                                deactivate: function( event, ui ) {
                                        ui.item.removeClass('grabCursor');
                                }
                        });

                        /* General Fields Sortable */
                        var dropCount=0;
                        $('#generalSortableForFields.dropfields').sortable({
                                connectWith : ".formUlLabel",
                                helper: 'clone',
                                placeholder: 'placeholder',
                                appendTo: document.body,
                                stop: function(event, ui) { 
                                        var $uiItem = $(ui.item);
                                        if ($uiItem.parent().is('#generalSortableForFields.dropfields')) $uiItem.remove();
                                        $('#generalFieldBox li').unbind('dblclick');
                                        $('#generalFieldBox li').dblclick(function() { 

                                                resetSavedButton();
                                                initScrollbar();                                               
                                                var litem = $(this).clone();                                                    
                                                litem=itemAdd(litem);                
                                                    
                                                var dropLiId = litem.attr('id'); 
                                        
                                        /*following line will append html item to the last section on form canvas */
                                        litem.appendTo($("#parentUlForm li:nth-last-child(2) .mainTable tr td ul.formUlLabel"));  
                                                
                                                if(dropLiId == "lblliCAPTCHA"){
                                                        var i = Math.floor((Math.random() * 1000) + 1);
                                                        dropLiId = dropLiId + i ;
                                                        litem.attr('id',dropLiId);
                                                        litem.find('label').attr('id','lblCAPTCHA'+i);
                                                        litem.find('#Captcha').attr('id','Captcha'+i); 
                                                        litem.find('.deleteField').attr('id','lblliCAPTCHA'+i); 
                                                        litem.find('#divFieldCAPTCHA').removeAttr('style'); 
                                                                                                                                     
                                                }
                                                if(dropLiId == "lblliGENERALTEXT"){
                                                        var i = Math.floor((Math.random() * 1000) + 1);
                                                        dropLiId = dropLiId + i ;
                                                        litem.attr('id',dropLiId);
                                                        litem.find('label').attr('id','lblGENERALTEXT'+i);
                                                        litem.find('.deleteField').attr('id','lblliGENERALTEXT'+i);
                                                                                                                                                
                                                }
                                                if(dropLiId == "lblliIMAGE"){
                                                        var i = Math.floor((Math.random() * 1000) + 1);
                                                        dropLiId = dropLiId + i ;
                                                        litem.attr('id',dropLiId);
                                                        litem.find('label').attr('id','lblIMAGE'+i);
                                                        litem.find('.deleteField').attr('id','lblliIMAGE'+i);
                                                        litem.find('label').hide();
                                                        litem.addClass('fieldLiImage');                                            
                                                } 
                                                var isPaymentField=false; 
                                                if (dropLiId == "lblliPAYPALPAYMENT") {
                                         <apex:outputText rendered="{!if(isFreemium || packageTier != 'Enterprise',true,false)}">
                        upgradeNowMessage('Payment fields are only available in the Enterprise edition of Fast Forms.','','');                           
                    deletePaymentField(dropLiId);
                    </apex:outputText>
                     <apex:outputText rendered="{!packageTier == 'Enterprise'}"> 
                        
                   
                                                isPaymentField=true;
                                        var i = Math.floor((Math.random() * 1000) + 1);
                                        dropLiId = dropLiId + i;
                                        litem.attr('id', dropLiId);
                                        var originaldivId=litem.find('.field-div-payment').attr('id');
                                        litem.find('.field-div-payment').attr('id',originaldivId+i);
                                        $(litem.find('.paypal-item-row')).each(function(index, ppitemrow) {
                                                 if($(ppitemrow).hasClass('pp-expiry'))
                                                 {
                                                    
                                                    var ppexpirylblid=$(ppitemrow).find('.PPGeneralLabelDiv label').attr('id');
                                                    ppexpirylblid.replace(i,'');
                                                    $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id',ppexpirylblid+i);
                                                    $($(ppitemrow).find('select')).each(function(index, ppitemrowselect) {
                                                    var orginalselElemId=$(ppitemrowselect).attr('data-pp-name');
                                                 $(ppitemrowselect).attr('id',orginalselElemId+i);
                                                 $(ppitemrowselect).attr('name',orginalselElemId+i);
                                                 });
                                                 }
                                                 else
                                                 {
                                                    var orginalElemId=$(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('data-pp-name');
                                                 orginalElemId=orginalElemId;
                                                 $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('id',orginalElemId+i);
                                                 $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('name',orginalElemId+i);
                                                    $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id','lbl'+orginalElemId+i);
                                                 }
                                                 
                                        });
                                        litem.find('.deleteField').attr('id','lblliPAYPALPAYMENT'+i);
                                          </apex:outputText>
                                }              


                                                if(dropLiId == "lblliUPLOAD"){                                 
                                                        var i = Math.floor((Math.random() * 1000) + 1);
                                                        dropLiId = dropLiId + i ;
                                                        litem.attr('id',dropLiId);
                                                    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                    upgradeNowMessage('File uploads are only available in Professional or Enterprise editions of Fast Forms.','','');                           
                    deleteField(dropLiId);
                    </apex:outputText>
                                        
                                        
                    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                                                                        
                                                        
                                                         litem.find('label').attr('id','FileUpload'+i+'_Select');
                                                         litem.find('label').attr('for','FileUpload'+i);

                                                         //added one line  - while editing File upload label it updates the fileupload text itself as well
                                                            litem.find('div[id^="divLabel"] label').attr('id', 'lblFileUpload' + i + '_Select');
                                                                        
                                                        litem.find('#FileUpload01').attr('name','FileUpload'+i);
                                                        litem.find('#FileUpload01').attr('id','FileUpload'+i);
                                                        //update Div
                                                        litem.find('#FileUploadAreaXX').attr('id','FileUploadArea'+i);
                                                        litem.find('#FileUploadDropAreaXX').attr('id','FileUploadDropArea'+i);
                                                        litem.find('#btnFileUploadAddXX').attr('id','btnFileUploadAdd'+i);
                                                        litem.find('.deleteField').attr('id','lblliUPLOAD'+i);
                                                         </apex:outputText>                                                      
                                                        
                                                }
                                                litem.addClass('generalSortableForFields');
                                                //litem.css('height','auto');
                                                litem.removeAttr('style');
                                                if(isPaymentField)
                                                {
// commented on June 16 2015 to add functionality of double click only for labels
//litem.attr('ondblclick' , "openEditPaymentDialog('"+ litem.attr('id')+"',true);");  

                                                litem.find('.editImg').attr('onclick' , "openEditPaymentDialog('"+ litem.attr('id')+"',this,true);");
                                                }
                                                else
                                                {
                                                     
                                               // litem.attr('ondblclick' , "editFFLabel('"+ litem.attr('id')+"');");
                                               litem.attr('ondblclick' , "editFFLabel(this);");
                                               litem.find('.editImg').attr('onclick' , "openEditDialog('"+ litem.attr('id')+"',true);");
                                             
                                               }
                                                addRequiredMarkOnLabel();
                                                //Active Save Button
                                                $("#btnSaved").removeAttr('disabled');
                                             /* $("#btnSaved").text('Save & Publish');*/
                                                $("#btnSaved").removeClass('btnSaved').addClass('editorButton');                            
                                                $(".dragDropInfoDiv").hide();
                                                $(".arrowUpper").hide();
                                                $(".addNewSection").css('margin-top','0%');
                                                setHover();  
                                                mixpanel.track('Field added by double-click',{ "Field ID": dropLiId});                                              
                                                var metadata = {
                                                  field_name: dropLiId
                                                };
                                                Intercom('trackEvent', 'added-field', metadata);                                                
                                                
                                                
                                                       
                                                
                                        });
                                        $("#generalSortableForFields > li").each(function(){
                                                if($(this).html()==$(this).next().html())
                                                      {  $(this).remove();
                                                      }
                                                      else{
                                                        $(this).show();
                                                      }
                                        });
                                        

                                        
                                        
                                }             
                        });

                        $('#generalSortableForFields.dropfields').bind('sortstart', function(event, ui) {
                                var $uiItem = $(ui.item); 
                                $uiItem.clone().hide().insertBefore($uiItem);                              
                        });
                        $(".formUlField,.formUlLabel,#parentUlForm").bind('sortreceive', function () {            
                                blockSort = false;                    
                        }); 
                        var blockSortRequired = false;
                        $( "#sortableForRelFields1" ).bind('sortstop', function (e) {
                                if (blockSort) {
                                        var selfId = $(this).attr('Id'); 
                                        if(selfId == 'sortableForRelFields1'){
                                                e.preventDefault();                            
                                        }                        
                                }
                                blockSort = true;
                        });            
                        //Keep the editor hidden until the user selects an object in the 'Select Object' list
                        if( $('[id$="mergeTypeSelect"]' ).val() != '')
                                $('[id$="pb2"]' ).show();
                        else
                                $('[id$="pb2"]').hide();
                        
                        
                        if($("#parentUlForm").find('.Ulbtn').length==0){
                                openNewButtonDialog();
                                saveButton();
                        }
                        makeAllLiHeightEqual();            
                        /*addNewSectionLi();*/
                        makeFormSortable();
                     
                         if(RunOnces == 0){
                             
                                 if( isSecNameElemExistsByIndex(0))
                         {
                                 console.log('First Related object added Secondary objects count-'+$(".ObjectName span.secName").length);
                                   setTitleSortable();
                                 
                            }
                            else
                            {
                            console.log('No Related object added');
                            setTitleSortable();
                            }
                              
                        }
                         
                        console.log(' Initial time-'+currentTimeWithMiliseconds());

                        initScrollbar();
                        console.log(' End  time-'+currentTimeWithMiliseconds());
                        console.log(' RunOnces-'+RunOnces);
                    //fieldsToggleBind  ();
                        RunOnces++;
                      
                        $('.addNewSection').bind('click', function() {
                                addNewSectionDetail();
                        });
                        var isAlreadyAdd=false;
                        $('#generalFieldBox li').unbind('dblclick');
                        $('#generalFieldBox li').dblclick(function() {              
                                resetSavedButton();
                                initScrollbar();           
                                var litem = $(this).clone();
                                litem=itemAdd(litem); 
                                isAlreadyAdd=true;           
                                /*following line will append html item to the last section on form canvas */
                                        litem.appendTo($("#parentUlForm li:nth-last-child(2) .mainTable tr td ul.formUlLabel"));  
                                //litem.appendTo($("#parentUlForm li:nth-last-child(3) .mainTable tr td ul.formUlLabel"));    
                                var dropLiId = litem.attr('id');
                                if(dropLiId == "lblliCAPTCHA"){
                                        var i = Math.floor((Math.random() * 1000) + 1);
                                        dropLiId = dropLiId + i ;
                                        litem.attr('id',dropLiId);
                                        litem.find('label').attr('id','lblCAPTCHA'+i);
                                        litem.find('#Captcha').attr('id','Captcha'+i); 
                                        litem.find('.deleteField').attr('id','lblliCAPTCHA'+i); 
                                        litem.find('#divFieldCAPTCHA').removeAttr('style');
                                        litem.find('[name="Captcha"]').removeAttr('style');
                                                                                                     
                                }
                                if(dropLiId == "lblliGENERALTEXT"){
                                        var i = Math.floor((Math.random() * 1000) + 1);
                                        dropLiId = dropLiId + i ;
                                        litem.attr('id',dropLiId);
                                        litem.find('label').attr('id','lblGENERALTEXT'+i);
                                        litem.find('.deleteField').attr('id','lblliGENERALTEXT'+i);
                                                                                                                
                                }
                                if(dropLiId == "lblliIMAGE"){
                                        var i = Math.floor((Math.random() * 1000) + 1);
                                        dropLiId = dropLiId + i ;
                                        litem.attr('id',dropLiId);
                                        litem.find('label').attr('id','lblIMAGE'+i);
                                        litem.find('.deleteField').attr('id','lblliIMAGE'+i);
                                                                                                                
                                } 
                                var isPaymentField=false;
                                if (dropLiId == "lblliPAYPALPAYMENT") {
                                         
                                        isPaymentField=true;
                                         <apex:outputText rendered="{!if(isFreemium || packageTier != 'Enterprise',true,false)}">
                        upgradeNowMessage('Payment fields are only available in the Enterprise edition of Fast Forms.','','');                           
                    deletePaymentField(dropLiId);
                    </apex:outputText>
                     <apex:outputText rendered="{!packageTier == 'Enterprise'}"> 
                                        var i = Math.floor((Math.random() * 1000) + 1);
                                        dropLiId = dropLiId + i;
                                        litem.attr('id', dropLiId);
                                        var originaldivId=litem.find('.field-div-payment').attr('id');
                                        litem.find('.field-div-payment').attr('id',originaldivId+i);
                                        $(litem.find('.paypal-item-row')).each(function(index, ppitemrow) {
                                                 
                                                if($(ppitemrow).hasClass('pp-expiry'))
                                                 {
                                                    
                                                    var ppexpirylblid=$(ppitemrow).find('.PPGeneralLabelDiv label').attr('id');
                                                    ppexpirylblid.replace(i,'');
                                                        $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id',ppexpirylblid+i);
                                                        $($(ppitemrow).find('select')).each(function(index, ppitemrowselect) {
                                                        var orginalselElemId=$(ppitemrowselect).attr('data-pp-name');
                                                     $(ppitemrowselect).attr('id',orginalselElemId+i);
                                                     $(ppitemrowselect).attr('name',orginalselElemId+i);
                                                     });
                                                 }
                                                 else
                                                 {
                                                    var orginalElemId=$(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('data-pp-name');
                                                 orginalElemId=orginalElemId;
                                                 $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('id',orginalElemId+i);
                                                 $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('name',orginalElemId+i);
                                                    $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id','lbl'+orginalElemId+i);
                                                 }
                                        });
                                        litem.find('.deleteField').attr('id','lblliPAYPALPAYMENT'+i);
                                          </apex:outputText>
                                }                
                                if(dropLiId == "lblliUPLOAD"){                
                                        var i = Math.floor((Math.random() * 1000) + 1);
                                        dropLiId = dropLiId + i ;
                                        litem.attr('id',dropLiId);
                                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                        upgradeNowMessage('File Upload fields are only available in Professional and Enterprise editions of Fast Forms.','','');                           
                    deleteField(dropLiId);
                    </apex:outputText>
                     <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}"> 
                                        
                                        litem.find('label').attr('id','lblUPLOAD'+i);
                                        litem.find('label').attr('for','FileUpload'+i);
                                        
                                        //change Add Select 
                                        /* addd lbl prefix for id - april 13 2015*/
                                        litem.find('div:first label').attr('id','lblFileUpload'+i+'_Select');
                                        litem.find('label').attr('for','FileUpload'+i);
                                        litem.find('.fieldDiv').find('label').attr('id','FileUpload'+i+'_Select');

                                        litem.find('#FileUpload01').attr('name','FileUpload'+i);
                                        litem.find('#FileUpload01').attr('id','FileUpload'+i);
                                        //update Div
                                        litem.find('#FileUploadAreaXX').attr('id','FileUploadArea'+i);
                                        litem.find('#FileUploadDropAreaXX').attr('id','FileUploadDropArea'+i);
                                        litem.find('#btnFileUploadAddXX').attr('id','btnFileUploadAdd'+i);
                                        litem.find('.deleteField').attr('id','lblliUPLOAD'+i);
                                        litem.find('.fieldDiv').removeAttr('style');   
                                        </apex:outputText>                                           
                                }
                                //litem.css('height','auto');
                                 
                                litem.addClass('grabCursor');
                                if(isPaymentField)
                                                {
                
                                                litem.find('.editImg').attr('onclick' , "openEditPaymentDialog('"+ litem.attr('id')+"',this,true);");
                                                }
                                                else{                
                                    
                                // litem.attr('ondblclick' , "editFFLabel('"+ litem.attr('id')+"');");                
                                 litem.attr('ondblclick' , "editFFLabel(this);");                
                                litem.find('.editImg').attr('onclick' , "openEditDialog('"+ litem.attr('id')+"',true);");
                                }
                                addRequiredMarkOnLabel();
                                //Active Save Button
                                $("#btnSaved").removeAttr('disabled');
                             /* $("#btnSaved").text('Save & Publish');*/
                                $("#btnSaved").removeClass('btnSaved').addClass('editorButton');                
                                $(".dragDropInfoDiv").hide();
                                $(".arrowUpper").hide();
                                $(".addNewSection").css('margin-top','0%');
                                setHover();
                        });            
                        activeClick();
                        var sectionLabel=  $('.sectionDisabled').find('label.ff-section-header');
                        if(sectionLabel!==undefined)
                        {
                            $(sectionLabel).unbind('dblclick');
                            $(sectionLabel).dblclick(function() {
                                    //var litem = $(this).clone();
                                    //openEditDialog($(this).attr('id'),false);
                                    
                                    editFFSection(this);
                                     
                            });
                        }
                      
                }
                function toggleGenToAvail(){
                        if(($('#ListRelToggle1').css('display') == 'none' || $('#ListRelToggle1').css('display') == undefined) && ($('#ListRelToggle2').css('display') == 'none' || $('#ListRelToggle2').css('display') == undefined)&& ($('#ListRelToggle3').css('display') == 'none' || $('#ListRelToggle3').css('display') == undefined) && ($('#ListRelToggle4').css('display') == 'none' || $('#ListRelToggle4').css('display') == undefined)){
                                $("#gnFldImg").attr("src", "{!URLFOR($Resource.VisualAntidote__iconImages,'expand.png')}");   
                                console.log(' toggleGenToAvail ');            
                                toggleGenFieldsSection();              
                        }
                }
                          
                 
                function toggleAvailableFieldsMenu(elem)
                {
                    var fieldListElem= $(elem).parent().find('.list-toggle-div');
                     
                                       
                        
                                isSection=false; 
                                removePrimaryLookupField();                  
                                                    
                        if($(elem).hasClass('activeTab')){
                                $(elem).removeClass('activeTab');
                                 
                                $(fieldListElem).hide();//.slideUp(300);
                                $('.list-toggle-div-wrap').show();
                                $('.genlist-toggle-div-wrap').show();
                                //setTimeout(function(){toggleGenToAvail()},100);
                        }else{
                                $('.availableHeaderDiv').removeClass('activeTab'); 
                                
                                 
                                                                                                         
                                $('.list-toggle-div').slideUp(100); 
                                        
                                $(elem).addClass('activeTab');
                                 $('.list-toggle-div-wrap').hide();
                                 $('.genlist-toggle-div-wrap').hide(); 
                                $(elem).parent().show();     
                            if(msieversion()>0)
                            {
                                $(fieldListElem).slideDown();
                            }
                            else
                            {
                                
                                $(fieldListElem).slideDown(100, function() {$(fieldListElem).jScrollPane({mouseWheelSpeed: 100 });});
                            }
                                 
                        }
                         
                }
                 
                function hideAllAvailableFieldLists()
                {
                    $('.availableHeaderDiv').removeClass('activeTab'); 
                    $('.list-toggle-div').slideUp(100); 
                    $('.list-toggle-div-wrap').hide();
                }


                 
function currentTimeWithMiliseconds()
{
    var currentdate = new Date();
    return currentdate.getSeconds()+'-'+currentdate.getMilliseconds();
}
 
                 
                function sort(sortList) {
                   
                        console.log(' Initial time sort-'+currentTimeWithMiliseconds());
                    $('#'+sortList).html($('#'+sortList).find('li').sort(function (a, b) {        
                                return $(a).find('div:first-child > label').text().toUpperCase().localeCompare($(b).find('div:first-child > label').text().toUpperCase());
                        })     
                    );
                    console.log(' End time sort-'+currentTimeWithMiliseconds());
                }
                function sortOriginal(sortList) {
                   
                        console.log(' Initial time sort-'+currentTimeWithMiliseconds());
                    $('#'+sortList).html($('#'+sortList).find('li').sort(function (a, b) {        
                                return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());
                        })     
                    );
                    console.log(' End time sort-'+currentTimeWithMiliseconds());
                }
                function initScrollbar(){
                             
                }         
             
                /* updated on dec 10 2014 - by balinder (functionality added - isreadonly */

                    function activeClick() {
                        var sortableFieldClassName ='';
    $('#sortableForRelFields1 li').unbind();

    $('.available-fields-block-wrapper ul.dropfields li').unbind();
    $('#sortableForRelFields1>li').dblclick(function () {
        var validField=true;
        var fmenabled=false;
        var isReferenceField=false;
        var vatt=$(this).find('>div:first-child > label').attr('vatt');
        if(!isNullOrEmpty(vatt) && vatt=='REFERENCE' )
                {
                    isReferenceField=true;
                }
        
        sortableFieldClassName ='sortableForRelFields1';
         <apex:outputText rendered="{!if(isFreemium ,true,false)}">
             
                
              var isdefaultrequired=false;
              if($(this).find('>div:first-child input[id^="isDefaultRequired"]').val() == "true")
              {
                isdefaultrequired=true;
              }

                 if(isReferenceField)
                {
                    if(!isdefaultrequired)
                    {
                    upgradeNowMessage("Reference fields are only available for paid subscriptions.","", "");
                    
                    validField=false;
                    }
                    else
                    {
                        fmenabled=true;
                    }
                }
                    </apex:outputText>
                    if(validField)
                    {
        resetSavedButton();
        hideSection();
        var litem = $(this).clone();
        litem = itemAdd(litem);
        if (/RecordTypeId/i.test(litem.attr('id'))) {
            litem.find('label').addClass('grayLabel');
        }
        //var addObjName = $('#sortableForRelFields1 li').attr('obj');
        var addObjName = $("#priName").text();
        //Extra div for List Name
        litem.find('label').after('<span class="listName" style="display:none">'+sortableFieldClassName+'</span>');
        litem.find('label').first().after('<br/><span class="addObjName"><i>From : ' + addObjName + '</i></span>');
        litem.addClass('sortableForRelFields1');

        if ($(litem).find('input[id^="isDefaultRequired"]').val() == "true") {
            $(litem).find('.deleteField').remove();
        }
        if(fmenabled && isReferenceField)
        {
            litem.find('.editDelDiv .editImg').removeAttr('onclick');
            var lockHtml=getFreemiumHTML('Reference fields are','freemium-edit-block','lines-3');
            if(!litem.find('.editDelDiv').hasClass('fm-enabled'))
            {
                litem.find('.editDelDiv').addClass('fm-enabled');
            }
            litem.find('.editDelDiv').prepend(lockHtml);
        }
        //// commented on June 16 2015 to add functionality of double click only for labels
        //litem.attr('ondblclick', "openEditDialog('" + litem.attr('id') + "',true);");
        //litem.attr('ondblclick', "editFFLabel('" + litem.attr('id') + "');");
        litem.attr('ondblclick', "editFFLabel(this);");
        /*following line will append html item to the last section on form canvas */
        litem.appendTo($("#parentUlForm li:nth-last-child(2) .mainTable tr td ul.formUlLabel"));
        //litem.appendTo($("#parentUlForm li:nth-last-child(3) .mainTable tr td ul.formUlLabel"));
        $(this).remove();
       var dropLiId= litem.attr('id');
        setHover();
         mixpanel.track('Field added by double-click', { "Field ID": litem.attr('id') });
        var metadata = {
          field_name: dropLiId
        };
        Intercom('trackEvent', 'added-field', metadata);  
        }      

    });
    
    $('.available-fields-block-wrapper ul.dropfields li').dblclick(function () {
        resetSavedButton();
        hideSection();
        var litem = $(this).clone();
        var ListMainVarRel = $(this).parents('.list-toggle-div-wrap');
        litem = itemAdd(litem);
        if (/RecordTypeId/i.test(litem.attr('id'))) {
            litem.find('label').addClass('grayLabel');
        }
        var addObjName = $(ListMainVarRel).find('.objName').text().replace('Fields', 'Object');
         sortableFieldClassName = $(ListMainVarRel).find('ul.dropfields').attr('id');
        var colorBar =safeStringValue( $(ListMainVarRel).attr('data-childclass'),'');
        litem.removeAttr('style');
        var lblName = $(litem).find('label').attr('id').replace('lbl', '');
   
        if (colorBar != undefined && colorBar != '') {

            litem.addClass(colorBar);
             
            litem.attr('id', litem.attr('id') + colorBar)
                //// commented on June 16 2015 to add functionality of double click only for labels
                //litem.attr('ondblclick', "openEditDialog('" + (litem.attr('id') + 'A') + "',true);");
           // litem.attr('ondblclick', "editFFLabel('" + litem.attr('id') + colorBar+"');");
            litem.attr('ondblclick', "editFFLabel(this);");
                litem.find('label').attr('id', litem.find('label').attr('id') + colorBar);
                //litem.find('input').attr('id',litem.find('input').attr('id')+'A');
                if (litem.find('input[type="textbox"]').attr('id') != undefined)
                    litem.find('input[type="textbox"]').attr('id', litem.find('input[type="textbox"]').attr('id') + colorBar);
                if (litem.find('input[type="checkbox"]').attr('id') != undefined)
                    litem.find('input[type="checkbox"]').attr('id', litem.find('input[type="checkbox"]').attr('id') + colorBar);
                if (litem.find('input[type="select"]').attr('id') != undefined)
                    litem.find('input[type="select"]').attr('id', litem.find('input[type="select"]').attr('id') + colorBar);
                if (litem.find('textarea').attr('id') != undefined)
                    litem.find('textarea').attr('id', litem.find('textarea').attr('id') + colorBar);
                if (litem.find('select').attr('id') != undefined)
                    litem.find('select').attr('id', litem.find('select').attr('id') + colorBar);

                litem.find('.editImg').attr('onclick', "openEditDialog('" + litem.attr('id') + "',true);");
                litem.find('.deleteField').attr('id', litem.attr('id'));
                
            
        } else {
           
            RemoveAllClassColorCodes(litem);
            var midName = '';
            var str = litem.find('div').attr('id').replace('divLabel', '');
            $("#sortableForRelFields1").find('li').each(function () {
                   if (isNullOrEmpty($(ListMainVarRel).attr('data-ischild')))    {
                    if (($(this).attr("title") == "REFERENCE" || $(this).attr("title").match(/\(Lookup\)$/g) != null) && $(this).find('div').attr('lblname') == $(ListMainVarRel).find('.objName').text().substring(0, $(ListMainVarRel).find('.objName').text().indexOf('(') - 1)) {
                        midName = $(this).find('label').attr('id').replace('lbl', '');
                    }
                }
            });

            var priObj = str.substring(0, str.indexOf('.') + 1);
            var fldObj = str.substring(str.lastIndexOf('.'));
            var inputIdStr = priObj + midName + fldObj;
            //for change ID of TextBox;
            if (litem.find('input[type="textbox"]').attr('id') != undefined) {
                litem.find('input[type="textbox"]').attr('id', inputIdStr);
                litem.find('input[type="textbox"]').attr('name', inputIdStr);
            }
            else if (litem.find('input[type="select"]').attr('id') != undefined) {
                litem.find('input[type="select"]').attr('id', inputIdStr);
                litem.find('input[type="select"]').attr('name', inputIdStr);
            }
            else if (litem.find('textarea').attr('id') != undefined) {
                litem.find('textarea').attr('id', inputIdStr);
                litem.find('textarea').attr('name', inputIdStr);
            }
            else if (litem.find('select').attr('id') != undefined) {
                litem.find('select').attr('id', inputIdStr);
                litem.find('select').attr('name', inputIdStr);
            }
            else{
                console.log(' EXCEPTION: There is no element in FieldLi');
            }
            //// commented on June 16 2015 to add functionality of double click only for labels
            //litem.attr('ondblclick', "openEditDialog('" + litem.attr('id') + "',true);");
            //litem.attr('ondblclick', "editFFLabel('" + litem.attr('id') + "');");
            litem.attr('ondblclick', "editFFLabel(this);");
        }
        litem.find('label').after('<span class="listName" style="display:none">' + sortableFieldClassName + ' ' + colorBar + '</span>');
        litem.find('label').first().after('<br/><span class="addObjName"><i>From : ' + addObjName + '</i></span>');
        litem.addClass(sortableFieldClassName);
        litem.find('#isDefaultRequired' + lblName).attr('id', $('#isDefaultRequired' + lblName).attr('id') + colorBar);
        litem.find('#isUserSelectedRequired' + lblName).attr('id', $('#isUserSelectedRequired' + lblName).attr('id') + colorBar);
        litem.find('#errMsgForRequired' + lblName).attr('id', $('#errMsgForRequired' + lblName).attr('id') + colorBar);
        litem.find('#defaultValue' + lblName).attr('id', $('#defaultValue' + lblName).attr('id') + colorBar);
        litem.find('#hideField' + lblName).attr('id', $('#hideField' + lblName).attr('id') + colorBar);
        litem.find('#isReadOnly' + lblName).attr('id', $('#isReadOnly' + lblName).attr('id') + colorBar);
        litem.find('#upsertField' + lblName).attr('id', $('#upsertField' + lblName).attr('id') + colorBar);

        if ($(litem).find('input[id^="isDefaultRequired"]').val() == "true") {
            $(litem).find('.deleteField').remove();
        }
        //// commented on June 16 2015 to add functionality of double click only for labels
        //litem.attr('ondblclick', "openEditDialog('" + litem.attr('id') + "',true);");
        //litem.attr('ondblclick', "editFFLabel('" + litem.attr('id') + "');");
        litem.attr('ondblclick', "editFFLabel(this);");
        /*following line will append html item to the last section on form canvas */
        litem.appendTo($("#parentUlForm li:nth-last-child(2) .mainTable tr td ul.formUlLabel"));
        //litem.appendTo($("#parentUlForm li:nth-last-child(3) .mainTable tr td ul.formUlLabel"));
        $(this).remove();
        setHover();
        var dropLiId= litem.attr('id');
        mixpanel.track('Field added by double-click', { "Field ID": litem.attr('id') });
        var metadata = {
          field_name: dropLiId
        };
        Intercom('trackEvent', 'added-field', metadata);        

    });
    setLiHover();
    setHover();
}
            
 function setLiHover() {
 
 }
 function getColorCode(liElement) {
        var childElemClass = '';
        if ($(liElement).hasClass('A')) {
                childElemClass = 'A';
        }
        else if ($(liElement).hasClass('B')) {
                childElemClass = 'B';
        }
        else if ($(liElement).hasClass('C')) {
                childElemClass = 'C';
        }
        else if ($(liElement).hasClass('D')) {
                childElemClass = 'D';
        }
        else if ($(liElement).hasClass('E')) {
                childElemClass = 'E';
        }
        else if ($(liElement).hasClass('F')) {
                childElemClass = 'F';
        }
        else if ($(liElement).hasClass('G')) {
                childElemClass = 'G';
        }
        else if ($(liElement).hasClass('H')) {
                childElemClass = 'H';
        }
        else if ($(liElement).hasClass('I')) {
                childElemClass = 'I';
        }
         
        return childElemClass;
}
function getFormattedElemId(liElement) {
        var childElemClass = getColorCode(liElement);     
        var elementName = '';

        var originalFieldDiv=$(liElement).find('.fieldDiv').html();

       
if($(originalFieldDiv).length>0)
{

        if ($(originalFieldDiv).first().hasClass('lookupInput'))
                elementName = $(originalFieldDiv).find('input').last().attr('name');
        else
                elementName=$(originalFieldDiv).not('label').not('span').last().attr('name');
}
        var finalElemId = elementName;
        if (childElemClass != '') {
                console.log(' finalElemId 1 ' + finalElemId);
                finalElemId = elementName.substring(0, elementName.lastIndexOf('.') );
                 
                finalElemId = finalElemId + '.' + childElemClass + '.' + elementName.substring(elementName.lastIndexOf('.') + 1);

                
        }

        return finalElemId;
}
function getElementObjectType(liElement) {
        var objectType = '';
         
        if ($(liElement).hasClass('sortableForRelFields1')) {
                objectType = 'PRIMARY';
        }
        else {
                 
                        objectType = 'LOOKUP';
                 
                $.each(colorTagArray,function (indx, tagValue) {
                        if ($(liElement).hasClass(tagValue+'')) {
                        objectType = 'DETAIL';
                        }
                    });
        }

        return objectType;
}
 function getObjectNameText(fieldLiElem)
 {
    var objectNameText='General';
    if(!$(fieldLiElem).hasClass('generalSortableForFields'))
    {
    $('.list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                              var sortableclassName=$(sortableUL).attr('id');
                              if(!isNullOrEmpty(sortableclassName) && $(fieldLiElem).hasClass(sortableclassName))
                              {
                               objectNameText= $(sortableUL).parents('.list-toggle-div-wrap').find('.objName').text();
                              }

                         });
   }
    return objectNameText;
 }
 /*call to save function */
function save(isPreview, isAutosave) {

        $('.button').removeClass('active');
        calcualteFormInformation();
        
        if (!isPreview && !isAutosave) {
                //$("#btnSaved").attr('disabled', "disabled");
                $(".btnPublishedSaved").text('Publishing...');
                $(".btnPublishedSaved").removeClass('va-disabled');
                /* $("#dialogSucess").dialog("open");*/
                $('#ui-id-1').text('Processing...');
                $("#success").hide();
                $("#Processing").show();
        } else if (isPreview) {
                $('#tabList tr td').find('.button').each(function () {
                        if ($(this).text() == 'Preview') {
                                $(this).addClass('active');
                        }
                });
        }
        var resultHtml = '<div>';
        var finalResultHtml = '<div class="ff-form-main" >';
        var fieldsXml = '';
        fieldsXml += '<page>';
        var fieldsObjectXml = '';
        var grouprowIndex = 0;
        var paypalPaymentFieldIndex = 0;
        $("#parentUlForm>li").each(function (liindex) {
                if ($(this).find("ul").length > 0) {
                        /* IF li has ul element - means has section and field ends*/
                        var counter = 0;
                        var allLabels = [];
                        var allFields = [];
                        var sectionDetailList = [];
                        var allLabelsId = [];
                        var allFieldsId = [];
                        var allFieldsVatt = [];
                        var allFieldsTootTip = [];
                        var allFieldsIsHide = [];
                        var nameOfLabel;
                        var maxLength;
                        var checkboxDefaulVal;
                        var fieldVatt = '';
                        var opt = '';
                        var nameOfLabeltmp = '';
                        var fieldLabelVatt = '';
                        var sectionId = '';
                        var sectionClass = '';
                        if ($(this).has(".formUlLabel").length) {
                                $(this).find('.formUlLabel').each(function () {


                                        if ($(this).find('>li').length > 0) {
                                                /*added on 25 feb 2015 by bal for conditional logic objects information */
                                                var sectionlabel = '';
                                                try {
                                                        sectionlabel = escape($(this).find('li.lbl').first().find('label').first().text());
 
                                                }
                                                catch (err) {

                                                }

                                                sectionId = $(this).attr('id').replace('labelformUl', 'ffSection');
                                                fieldsXml += "<section id='" + sectionId + "' name='" + sectionlabel + "' >";
                                        }
                                        $(this).find('>li').each(function () {
                                                if ($(this).hasClass('lbl') == false) {
                                                                var objectname='';
                                                                     
                                                              objectname=  getObjectNameText($(this));
                                                        
                                                        //For label
                                                        var liitemId=$(this).attr('id');        
                                                        if(objectname=='General' && liitemId!==undefined && liitemId.indexOf('lblliPAYPALPAYMENT')==0)
                                                        {
                                                            $("#tempLabelFieldDiv").html($(this).find('div.field-div-payment').clone().wrap('<p>').parent().html());
                                                        }  
                                                        else
                                                        {
                                                            $("#tempLabelFieldDiv").html($(this).find('div:first').clone().wrap('<p>').parent().html());
                                                        }                          
                                                        
                                                        if($("#tempLabelFieldDiv").find('div.field-div-payment').length<1)
                                                         {
                                                            /*Code for Non payment fields- June 19 2015*/
                                                        /*april 8 - flexcontrol modification */
                                                        $("#tempLabelFieldDiv").find('div.select2-container').remove();
                                                        $("#tempLabelFieldDiv").find('div.custom-flex-control-container').remove();
                                                        $("#tempLabelFieldDiv").find('select:first').removeClass('select2-offscreen');
                                                        $("#tempLabelFieldDiv").find('select:first').removeClass('custom-select-offscreen');
                                                        $("#tempLabelFieldDiv").find('input[type="textbox"]:first').removeClass('custom-flexcontrol-offscreen');

                                                        
                                                            
                                                        var fieldTitle = $("#tempLabelFieldDiv").find('label').text().trim();/*added on 25 feb 2015 by bal for conditional logic objects information */
                                                        nameOfLabel = $("#tempLabelFieldDiv").find('label').attr('id');
                                                        nameOfLabeltmp = nameOfLabel;

                                                         /*Saving required and required messaged*/

                                                        fieldsXml += '<field>';
                                                        //  console.log(' <br/>-----' + $("#tempLabelFieldDiv").html());
                                                        
                                                     
                                                 
                                                    if($( this ).find( "div.fieldDiv" ).children().first().hasClass('lookupInput'))
                                                        {
                                                        realId=$( this ).find( "div.fieldDiv" ).children().first().find('input[type="textbox"]').attr('id');
                                                        }
                                                        else{
                                                                 realId=  $( this ).find( "div.fieldDiv" ).children(':input,select,textarea').not('div.select2-container').not('div.custom-flex-control-container').first().attr('id');
                                                        }
                                                         
                                                         try{
                                                        maxLength = $(document.getElementById(realId)).attr('data-maxlength');
                                                        }
                                                        catch(err)
                                                        {
                                                                console.log(' Max length js exception');
                                                        }
                                                        opt = $(document.getElementById(realId)).html();

                                                        //$(document.getElementById(newPreId.replace(newPreIdnew,nameOfLabel.replace('lbl','')))).html();                                    
                                                        //opt=$(document.getElementById($('#'+nameOfLabel).parent().attr('id').replace('divLabel',''))).html();

                                                        nameOfLabel = nameOfLabel.replace('lbl', '');
                                                        fieldLabelVatt = $("#tempLabelFieldDiv").find('label').attr('vatt');

                                                        //hide lable and field li if field is hide == true // added tempDiv identifier  to fix hidden field issue for ambigus fields
                                                        var isHide = $("#tempLabelFieldDiv").find("#hideField" + nameOfLabel).val();
                                                        if(objectname=='General')
                                                        {
                                                            if($("#tempLabelFieldDiv").find('label').hasClass('grayLabel'))
                                                            {
                                                                 isHide="true";
                                                            }
                                                            else
                                                            {
                                                            isHide="false";
                                                            }
                                                        }
                                                         
                                                            if (isHide == "true") {
                                                                    $("#tempLabelFieldDiv").find('div:first').hide();
                                                            } else {
                                                                    $("#tempLabelFieldDiv").find('div:first').show();
                                                            }
                                                         
                                                        $("#tempLabelFieldDiv").find('.deleteField').remove();
                                                        allLabels[counter] = $("#tempLabelFieldDiv").html();
                                                        allLabelsId[counter] = $(this).attr('id').replace('li', '');
 
                                                        var setListName = $("#tempLabelFieldDiv").find('.listName').text();
                                                        setListName= removeColorCodes(setListName);
                                                         

                                                        fieldsXml += '<Object>' + setListName.trim() + '</Object>';
                                                        fieldsXml += '<objectName>' + objectname.trim() + '</objectName>';
                                                         fieldsXml += '<colorCode>' + getColorCode($(this)) + '</colorCode>';
                                                        
                                                        if (setListName.trim() != '') {
                                                                fieldsXml += '<objectType>' + getElementObjectType($(this)) + '</objectType>';
                                                        }
                                                        else {
                                                                fieldsXml += '<objectType>GENERAL</objectType>';
                                                        }
                                                        fieldsXml += '<label>' + escape(fieldTitle) + '</label>';/*added on 25 feb 2015 by bal for conditional logic objects information */
                                                        var tmpAttrID = '';
                                                        if (nameOfLabel.indexOf('FileUpload') >= 0 && nameOfLabel.indexOf('_Select') >= 0) {
                                                                //file upload xml
                                                                tmpAttrID = nameOfLabel.replace('FileUpload', 'FileUploadArea');
                                                                tmpAttrID = tmpAttrID.replace('_Select', '');

                                                                 fieldsXml += '<elemId>' + tmpAttrID+ '</elemId>';
                                                                fieldsXml += '<name>' + escape(nameOfLabel.replace('_Select', '')) + '</name>';
                                                                fieldsXml += '<type>STRING</type>';
                                                                /* code modified - dec 9 2014 by balinder ends*/
                                                                if ($('#' + tmpAttrID).attr('data-allowedfiletypes') == undefined || $('#' + tmpAttrID).attr('data-allowedfiletypes') == '') {
                                                                        fieldsXml += '<allowedFileTypes></allowedFileTypes>';
                                                                }
                                                                else {
                                                                        fieldsXml += '<allowedFileTypes>' + $('#' + tmpAttrID).attr('data-allowedfiletypes') + '</allowedFileTypes>';
                                                                }
                                                                if ($('#' + tmpAttrID).attr('data-uploadtochatter') == undefined || $('#' + tmpAttrID).attr('data-uploadtochatter') == '') {
                                                                        fieldsXml += '<uploadToChatter>false</uploadToChatter>';
                                                                }
                                                                else {
                                                                        fieldsXml += '<uploadToChatter>' + $('#' + tmpAttrID).attr('data-uploadtochatter') + '</uploadToChatter>';
                                                                }
                                                                /* code modified - dec 9 2014 by balinder ends*/

                                                                fieldsXml += '<maxFiles>' + $('#' + tmpAttrID).attr('data-maxfiles') + '</maxFiles>';
                                                        }
                                                        else if (opt != '') {
                                                                //var mainelem = $(this).find('.fieldDiv').find('input[type=textbox],input[type=text],input[type=checkbox],textarea,select').first();
                                                                /* fieldsXml += '<elemId>' + mainelem.attr("id") + '</elemId>';added on 25 feb 2015 by bal for conditional logic objects information */
                                                                
                                                                fieldsXml += '<elemId>' + getFormattedElemId($(this)) + '</elemId>';/*added on Mar 9,2015 by bal for conditional logic objects information */
                                                                
                                                                 
                                                                fieldsXml += '<name>' + escape(nameOfLabel) + '</name>';
                                                                fieldsXml += '<type>' + fieldLabelVatt + '</type>';
                                                                fieldsXml += '<picklistValues>';

                                                                $(opt + " option").each(function () {
                                                                        if ($(this).val() != '')
                                                                                fieldsXml += '<picklistValue><value>' + escape($(this).val()) + '</value></picklistValue>';
                                                                });
                                                                fieldsXml += '</picklistValues>';

                                                        } else {

                                                               if(fieldLabelVatt!='CAPTCHA')
                                                                {
                                                                            if(setListName.trim() == '' && fieldLabelVatt=='STRING')
                                                                        {
                                                                                /*element id for general fields*/
                                                                        fieldsXml += '<elemId>' + escape(nameOfLabel) + '</elemId>'; 
                                                                        }
                                                                        else
                                                                        {
                                                                            fieldsXml += '<elemId>' + getFormattedElemId($(this)) + '</elemId>';/*added on Mar 9,2015 by bal for conditional logic objects information */
                                                                        }
                                                                }
                                                                else
                                                                {
                                                                /*element id for captcha */
                                                                fieldsXml += '<elemId>' + nameOfLabel + '</elemId>';
                                                                }
                                                                fieldsXml += '<name>' + escape(nameOfLabel) + '</name>';
                                                                fieldsXml += '<type>' + fieldLabelVatt + '</type>';
                                                        }

                                                        //if ($("#tempLabelFieldDiv").find('[vatt="REFERENCE"]').attr('id') != undefined || $("#tempLabelFieldDiv").find('.grayLabel').attr('id') != undefined) {
                                                            if ( $("#tempLabelFieldDiv").find('.grayLabel').attr('id') != undefined) {
                                                                fieldsXml += '<hiddenField>true</hiddenField>';
                                                        } else {
                                                                fieldsXml += '<hiddenField>false</hiddenField>';
                                                        }

                                                        if ($("#tempLabelFieldDiv ").find('#isReadOnly' + nameOfLabel).val() == true || $("#tempLabelFieldDiv ").find('#isReadOnly' + nameOfLabel).val() == "true") {
                                                                fieldsXml += '<readOnly>true</readOnly>';
                                                        } else {
                                                                fieldsXml += '<readOnly>false</readOnly>';
                                                        }

                                                        if ($("#tempLabelFieldDiv ").find('#upsertField' + nameOfLabel).val() == true || $("#tempLabelFieldDiv ").find('#upsertField' + nameOfLabel).val() == "true") {
                                                                fieldsXml += '<upsert>true</upsert>';
                                                        } else {
                                                                fieldsXml += '<upsert></upsert>';
                                                        }

                                                        if ($("#tempLabelFieldDiv ").find('#defaultValue' + nameOfLabel).val() == undefined)
                                                            {   fieldsXml += '<defaultValue></defaultValue>';
                                                    }
                                                        else if ($("#tempLabelFieldDiv ").find('[vatt="REFERENCE"]').length > 0) {
                                                                var lookId = $("#tempLabelFieldDiv ").find('[vatt="REFERENCE"]').parent().attr('id');
                                                                lookId = lookId.replace('divLabel', '') + 'hidden';
                                                                
                                                                var refobj='';
                                                                var labelElem=$( this ).find( "div:first-child").find('label').first();
                                                                if(!isNullOrEmpty($(labelElem).attr('vaobj')))
                                                                {
                                                                    refobj=$(labelElem).attr('vaobj');
                                                                    fieldsXml += '<refObjectType>' + refobj + '</refObjectType>';
                                                                }
                                                                
                                                                var lookupType=$( this ).find( "div.fieldDiv .lookupInput").find('input[type="hidden"]').attr('data-lookup-value-type');
                                                                    if(!isNullOrEmpty(lookupType) && lookupType=='list')
                                                                    {
                                                                        var lookupViewId=$( this ).find( "div.fieldDiv .lookupInput").find('input[type="hidden"]').attr('data-lookup-value');
                                                                        var lookupViewObj=$( this ).find( "div.fieldDiv .lookupInput").find('input[type="hidden"]').attr('data-vaobj');
                                                                        fieldsXml += '<listViewId>' + lookupViewId + '</listViewId>';
                                                                        if(!isNullOrEmpty(lookupViewObj))
                                                                        {
                                                                        fieldsXml += '<listViewObject>' + lookupViewObj + '</listViewObject>';
                                                                        }
                                                                    }
                                                                     fieldsXml += '<defaultValue>' + $( this ).find( "div.fieldDiv .lookupInput").find('input[type="hidden"]').val() + '</defaultValue>';
                                                        } else
                                                                fieldsXml += '<defaultValue>' + escape($("#tempLabelFieldDiv ").find('#defaultValue' + nameOfLabel).val()) + '</defaultValue>';



                                                        if (maxLength == undefined)
                                                                fieldsXml += '<maxLength></maxLength>';
                                                        else
                                                                fieldsXml += '<maxLength>' + maxLength + '</maxLength>';

                                                        $("#tempLabelFieldDiv").find('input[type="hidden"]').each(function (index) {
                                                                if (index == 1)
                                                                        fieldsXml += '<required>' + $(this).val() + '</required>';
                                                                if (index == 2) {
                                                                        if ($("#errMsgForRequired" + nameOfLabel).val() == "") {
                                                                                fieldsXml += '<requiredMessage>required</requiredMessage>';
                                                                        } else {
                                                                                if (nameOfLabel.indexOf('_Select') >= 0) {
                                                                                        fieldsXml += '<requiredMessage>' + escape($('#' + tmpAttrID).attr('data-requiredmessage')) + '</requiredMessage>';
                                                                                } else {
                                                                                        fieldsXml += '<requiredMessage>' + escape($(this).val()) + '</requiredMessage>';
                                                                                }
                                                                        }
                                                                }
                                                        });
                                                        fieldsXml += '</field>';
                                                        //For Field
                                                        allFieldsTootTip[counter] = $(this).attr('title');
                                                         var tempFieldDiv=        $( this ).find( "div.fieldDiv" ).children().not('.custom-flex-control-container').not('div.select2-container');
                                                        //Set data-isrequired for Input 
                                                     tempFieldDiv= $(tempFieldDiv).parent();
                                                        $(tempFieldDiv).find('select').attr('data-isrequired', $("#isUserSelectedRequired" + nameOfLabel).val());
                                                        $(tempFieldDiv).find('input').attr('data-isrequired', $("#isUserSelectedRequired" + nameOfLabel).val());
                                                        $(tempFieldDiv).find('textarea').attr('data-isrequired', $("#isUserSelectedRequired" + nameOfLabel).val());

                                                        //Set readonly att for Hidden
                                                        //$(this).find('.fieldDiv').find('[vatt="REFERENCE"]').attr("readonly", true);

                                                        if ($(this).find("#hideField" + nameOfLabel).val() == "true") {
                                                                $(tempFieldDiv).find('input').attr("hidefield", true);
                                                                $(tempFieldDiv).find('textarea').attr("hidefield", true);
                                                                $(tempFieldDiv).find('select').attr("hidefield", true);
                                                        }

                                                        if ($(this).find("#isReadOnly" + nameOfLabel).val() == "true") {
                                                                $(tempFieldDiv).find('input').attr("disabled", true);
                                                                $(tempFieldDiv).find('textarea').attr("disabled", true);
                                                                $(tempFieldDiv).find('select').attr("disabled", true);

                                                        }
                                                        else {
                                                                $(tempFieldDiv).find('input').removeAttr("disabled");
                                                                $(tempFieldDiv).find('textarea').removeAttr("disabled");
                                                                $(tempFieldDiv).find('select').removeAttr("disabled");
                                                        }

                                                        //Set data-requiredmessage Default
                                                        if ($(this).find("#errMsgForRequired" + nameOfLabel).val() == "") {
                                                                $(tempFieldDiv).find('select').attr('data-requiredmessage', 'required');
                                                                $(tempFieldDiv).find('input').attr('data-requiredmessage', 'required');
                                                                $(tempFieldDiv).find('textarea').attr('data-requiredmessage', 'required');
                                                        } else {
                                                                $(tempFieldDiv).find('select').attr('data-requiredmessage', $("#errMsgForRequired" + nameOfLabel).val());
                                                                $(tempFieldDiv).find('input').attr('data-requiredmessage', $("#errMsgForRequired" + nameOfLabel).val());
                                                                $(tempFieldDiv).find('textarea').attr('data-requiredmessage', $("#errMsgForRequired" + nameOfLabel).val());
                                                        }


                                                        if ($(tempFieldDiv).find('#CAPTCHAINPUT').length > 0) {
                                                                $(tempFieldDiv).find('#CAPTCHAINPUT').attr('data-requiredmessage', 'Please enter the text shown in the image above');
                                                        }

                                                        //401 Check Value with Error Message
                                                        if ($(tempFieldDiv).find('#FileUploadArea').length > 0) {
                                                                $(tempFieldDiv).find('.uploadboxarea').attr('data-allowedfiletypes', selFileType);

                                                                $(tempFieldDiv).find('.uploadboxarea').attr('data-maxfiles', limitValue);
                                                        }

                                                        $("#tempLabelFieldDiv").html($(this).find('.fieldDiv').clone().wrap('<p>').parent().html());
                                                        /*april 8 - flexcontrol modification */
                                                         $("#tempLabelFieldDiv").find('div.select2-container').remove();
                                                         $("#tempLabelFieldDiv").find('div.custom-flex-control-container').remove();
                                                         
                                                         $("#tempLabelFieldDiv").find('select').removeClass('select2-offscreen');
                                                            $("#tempLabelFieldDiv").find('select').removeClass('custom-select-offscreen');
                                                            $("#tempLabelFieldDiv").find('input[type="textbox"]:first').removeClass('custom-flexcontrol-offscreen');
                                                        //hide lable and field li if field is hide == true 

                                                        if (isHide == "true") {
                                                                allFieldsIsHide[counter] = true;
                                                        } else {
                                                                allFieldsIsHide[counter] = false;
                                                        }

                                                        // Set data-isrequired and data-requiredmessage property of  field
                                                        try {
                                                                $("#tempLabelFieldDiv").children().attr('data-isrequired', $("#isUserSelectedRequired" + nameOfLabel).val());
                                                                $("#tempLabelFieldDiv").children().attr('data-requiredmessage', $("#errMsgForRequired" + nameOfLabel).val());
                                                                $("#tempLabelFieldDiv").find('.deleteField').remove();
                                                        }
                                                        catch (err) {
                                                                console.log('Save function jQuery code error- ' + err.message);
                                                        }

                                                        allFields[counter] = $("#tempLabelFieldDiv").html();
                                                        allFieldsId[counter] = $(this).attr('id').replace('li', '');
                                                    }
                                                    else
                                                    {

                                                        /*Code for Payment field June 19 2015*/
                                                        var paymentElemId='';
                                                    var lblId=  $(this).attr('id');
                                                    if(lblId!==undefined && lblId!='')
                                                    {
                                                            paymentElemId=lblId.replace('lblli','');
                                                         lblId= lblId.replace('li','');
                                                    }
                                                    var fieldDivPayment=$("#tempLabelFieldDiv").find('div.field-div-payment');
                                                        var paymentFieldId='';
                                        
                                                            if(!isNullOrEmpty($(fieldDivPayment).attr('data-paymentfield-record-id')))
                                                            {
                                                                paymentFieldId= $(fieldDivPayment).attr('data-paymentfield-record-id');
                                                            }
                                                        var ispaymentFieldReq=false;
                                                        if(!isNullOrEmpty($(fieldDivPayment).attr('data-paymentrequired')))
                                                        {
                                                                ispaymentFieldReq=$(fieldDivPayment).attr('data-paymentrequired');
                                                        }
                                                         
                                                        
                                                        paypalPaymentFieldIndex++;
                                                        fieldsXml += '<field>';
                                                        fieldsXml += '<Object></Object>';
                                                        fieldsXml += '<objectName>General</objectName>';
                                                        fieldsXml += '<colorCode></colorCode>';
                                                        fieldsXml += '<objectType>GENERAL</objectType>';
                                                        fieldsXml += '<label>PaypalPayment ('+paypalPaymentFieldIndex+')</label>';
                                                        fieldsXml += '<elemId>'+paymentElemId+'</elemId>';
                                                        fieldsXml += '<paymentFieldId>'+paymentFieldId+'</paymentFieldId>';
                                                        fieldsXml += '<name>'+paymentElemId+'</name>';
                                                        fieldsXml += '<type>PAYPALPAYMENT</type>';
                                                        fieldsXml += '<hiddenField>false</hiddenField>';
                                                        fieldsXml += '<readOnly>false</readOnly>';
                                                        fieldsXml += '<upsert></upsert>';
                                                        fieldsXml += '<defaultValue></defaultValue>';
                                                        fieldsXml += '<maxLength></maxLength>';
                                                        fieldsXml += '<required>'+ispaymentFieldReq+'</required>';
                                                        fieldsXml += '<requiredMessage></requiredMessage>';
                                                        fieldsXml += '</field>';
                                                         allFieldsTootTip[counter] = $(this).attr('title');
                                                        allLabels[counter] = $("#tempLabelFieldDiv").find('.paypal-item-header').html();
                                                        allLabelsId[counter] = lblId;
                                                        allFields[counter] = $("#tempLabelFieldDiv").find('div.field-div-payment').html();
                                                        allFieldsId[counter] = lblId;
                                                             console.log('Paypal payment field ');
                                                        
                                                    }
                                                } else {
                                                        //For section header
                                                        $("#tempLabelFieldDiv").html($(this).html());
                                                        /*april 8 - flexcontrol modification */
                                                         $("#tempLabelFieldDiv").find('div.select2-container').remove();
                                                         $("#tempLabelFieldDiv").find('div.custom-flex-control-container').remove();

                                                         $("#tempLabelFieldDiv").find('select').removeClass('select2-offscreen');
                                                            $("#tempLabelFieldDiv").find('select').removeClass('custom-select-offscreen');
                                                            $("#tempLabelFieldDiv").find('input[type="textbox"]:first').removeClass('custom-flexcontrol-offscreen');

                                                        allLabels[counter] = $("#tempLabelFieldDiv").find('label').clone().wrap('<p>').parent().html();
                                                        var lblid=$(this).attr('id').replace('li', '');
                                                        allLabelsId[counter] = lblid;

                                                        console.log(' THIS id-' + $(this).attr('id'));
                                                        if ($(this).parent('.formUlLabel').hasClass('hideFullSection')) {
                                                                sectionClass = 'hideFullSection';
                                                        }
                                                        else {
                                                                sectionClass = '';
                                                        }
                                                        sectionDetailList.push(createJSONSectionObj(lblid, sectionClass));
                                                        allFields[counter] = ''
                                                        allFieldsId[counter] = $(this).attr('id').replace('li', '');
                                                        allFieldsIsHide[counter] = false;
                                                }
                                                counter++;
                                        });

                                        if ($(this).find('li').length > 0) {

                                                console.log(' Section names- ' + $(this).find('li.lbl').first().find('label').first().text());
                                                fieldsXml += '</section>';
                                        }

                                }); /*formUlLabel close tag*/
                        }/*if Form canvas has formUlLabel class ends */

                        var i = 0;
                        var groupcounter = 0;

                        if (counter > 0) {
                                console.log(' COunter > 0' + counter + ' sectionClass ' + sectionClass);
                                if (sectionClass != '') {
                                        finalResultHtml += '<div style="display:none" class="ff-group-row group-' + grouprowIndex + '" id="' + sectionId + '" >';
                                }
                                else {
                                        finalResultHtml += '<div class="ff-group-row group-' + grouprowIndex + '" id="' + sectionId + '" >';
                                }
                        }

                        /*label fields loop starts*/
                        for (i = 0; i < allLabels.length && i < allFields.length; i++) {
                                resultHtml += '<div id="divRow' + allLabelsId[i] + '" class="tr" >';


                                $("#tempLabelFieldDiv").html(allLabels[i]);
                                //label text not null starts// lblImage check added to fix #190 issue on Sep 17 2015
                                if ($("#tempLabelFieldDiv").find('label').text() != "" || /^lblIMAGE.*$/.test($("#tempLabelFieldDiv").find('div:first').find('label').attr('id'))) {
                                        var sectionstart = '';/// '<div class="ff-group-row group-1"  >';
                                        var sectionends = '';// '</div>';
                    var issection=false;
                                        var isPaymentField=false;
                                        
                                        if(allLabelsId[i].indexOf('lblPAYPALPAYMENT')==0)
                                        {
                                            isPaymentField=true;
                                        }
                                        if (allFields[i] == '') {
                                                groupcounter = groupcounter + 1;
                                                grouprowIndex = grouprowIndex + 1;
                                                if (groupcounter > 1 && i < (allLabels.length - 1) && i < (allFields.length - 1)) {
                                                        finalResultHtml += '</div>';
                                                        finalResultHtml += '<div class="ff-group-row group-' + groupcounter + '" id="' + sectionId + '"    >';
                            issection=true;
                                                }
                                                //  sectionstart = '<div class="ff-group-row group-'+groupcounter+'"   >';


                                        }
                                        else {

                                        }
                    var sectionClass='';
                    if(issection)
                    {
                     sectionClass='ff-section-row';
                    }
                                        var paymentInlineAttr='';
                                         if(!isPaymentField)
                                         {
                                             paymentInlineAttr='';//'ff-pp="PAYPALPAYMENT '+allLabelsId[i]+'"';
                                        

                                        if (allFieldsIsHide[i] == true)
                                            { 
                                         
                                             finalResultHtml += '<div class="ff-item-row" '+sectionClass+' style="display:none;">';
                                         }
                                        else
                                                {
                                                    finalResultHtml += '<div class="ff-item-row" '+sectionClass+' >';
                                                }
                                                 }
                                            
                                        // Is Inner Section header in ul
                                        if (allFields[i] == '') {
                                                var sectionclass = '';
                                                
                                                $.each(sectionDetailList, function (index, jsonitem) {
                                                        if (sectionDetailList[index].id == allLabelsId[i]) {
                                                                sectionclass = '' + sectionDetailList[index].class;
                                                        }
                                                });
                                                resultHtml += '<div id="divCollbl' + allLabelsId[i] + '" class="td innerSecHeader ' + sectionclass + '" title="' + allFieldsTootTip[i] + '">' + allLabels[i] + '';
                                                finalResultHtml += '<div  class="ff-col-1 ff-section-col"  >';
                                                finalResultHtml += allLabels[i] + '</div>';
                                        } 
                                        else 
                                        {//Is field li in ul
                                               
                                          if(isPaymentField)
                                         {
                                                
                                                 $("#tempLabelFieldDiv").html(allFields[i]);
                                                var recid=$(this).find('.field-div-payment').attr('data-paymentfield-record-id');
                                                var ispaymntreq=$(this).find('.field-div-payment').attr('data-paymentrequired');
                                                var istestmode=$(this).find('.field-div-payment').hasClass('test-mode-active');
                                                var lblnm=$(this).find('.field-div-payment').attr('lblname');
                                                var elmid=$(this).find('.field-div-payment').attr('id');
                                                var paymentDiv=$('<div />', { 'id': elmid,'lblname':lblnm, 'class':'sfff-payment-field', 'data-paymentfield-record-id':recid,'data-paymentrequired':ispaymntreq,'data-test-mode':istestmode });
                                                var wrapper = document.createElement("div");
                                                        wrapper.appendChild(paymentDiv[0]);
                                                        var strPaymentDiv = wrapper.innerHTML;
                                             resultHtml += '<div id="divCollbl' + allLabelsId[i] + '" class="td PAYPALPAYMENT" title="' + allFieldsTootTip[i] + '">' + strPaymentDiv + '</div>';

                                                var paymentwrapid=allLabelsId[i];
                                                //paymentwrapid=paymentwrapid.replace('lbl','');
                                                if(istestmode)
                                                {
                                                    finalResultHtml += '<span class="payment-test-mode">Test Mode</span>';
                                                    finalResultHtml += '<div class="ff-payment-wrapper ff-test-mode"  id="'+paymentwrapid+'">';
                                                }
                                                else
                                                {
                                                    finalResultHtml += '<div class="ff-payment-wrapper"  id="'+paymentwrapid+'">';
                                                }

                                                        $($("#tempLabelFieldDiv").find('.paypal-item-row')).each(function(i, ppitemrow) {

                                                            if($(ppitemrow).find('.ff-line-seperator').length>0)
                                                            {
                                                                 if($(ppitemrow).css('display') != 'none')
                                                                 {
                                                                finalResultHtml += '<div class="ff-item-row payment-seperator-item">';
                                                                finalResultHtml +=$(ppitemrow).html();
                                                                finalResultHtml +="</div>";
                                                                 }
                                                            }
                                                            else
                                                            {
                                                                        $(ppitemrow).find('.PPGeneralLabelDiv').find('label.ff-label').removeAttr('data-label-prop');
                                                                        $(ppitemrow).find('.PPGeneralLabelDiv').find('label.ff-label').removeAttr('ondblclick');
                                                                 var labelHtml=$(ppitemrow).find('.PPGeneralLabelDiv').html();
                                                                    var fieldHtml='';
                                                                    if($(ppitemrow).hasClass('pp-expiry'))
                                                                 {
                                                                    $(ppitemrow).find('.PPGeneralFieldDiv select').each(function (index, selectElem) {
                                                                    $(selectElem).find('option').each(function (indx, optionelem) {
                                                                                           if(indx==0)
                                                                                           {
                                                                                            $(optionelem).attr('value', '');
                                                                                           }
                                                                                        });
                                                                    });
                                                                 }
                                                                      fieldHtml=$(ppitemrow).find('.PPGeneralFieldDiv').html();
                                                                 
                                                                     
                                                                 if($(ppitemrow).css('display') == 'none')
                                                                 {
                                                                         finalResultHtml += '<div class="ff-item-row payment-field-item" style="display:none">';
                                                                 }
                                                                 else
                                                                 {
                                                                    finalResultHtml += '<div class="ff-item-row payment-field-item">';
                                                                 }
                                                                     
                                                                     finalResultHtml += '<div class="ff-col-1 ff-label-col"  >'+labelHtml+'</div>';
             
                                                                     finalResultHtml += '<div class="ff-col-2 ff-field-col"  >'+fieldHtml+'</div>';
                                                                     finalResultHtml +="</div>";
                                                        }
                                                        
                                                });  
                                                    finalResultHtml +="</div>";

                                         }

                                         else
                                         {
                                            //Not a payment field starts
                                                resultHtml += '<div id="divCollbl' + allLabelsId[i] + '" class="td" title="' + allFieldsTootTip[i] + '">' + allLabels[i] + '';

                                                if (/^lblGENERALTEXT.*$/.test($("#tempLabelFieldDiv").find('div:first').find('label').attr('id'))) {
                                                        finalResultHtml += '<div class="ff-col-1 ff-general-text"  >';
                                                        if($("#tempLabelFieldDiv").find('div:first').find('label').hasClass('grayLabel'))
                                                        {
                                                            $("#tempLabelFieldDiv").find('div:first').find('label').removeClass('grayLabel');
                                                        }
                                                       var generalFieldId= $("#tempLabelFieldDiv").find('div:first').find('label').attr('id');
                                                       generalFieldId=generalFieldId.replace("lbl","");
                                                       $("#tempLabelFieldDiv").find('div:first').find('label').attr('id',generalFieldId);
                                                        finalResultHtml += $("#tempLabelFieldDiv").find('div:first').find('label').clone().wrap('<p>').parent().html();
                                                }
                                                else if (/^lblIMAGE.*$/.test($("#tempLabelFieldDiv").find('div:first').find('label').attr('id'))) {
                                                    finalResultHtml += '<div class="ff-col-1 ff-image"';
                                                    if ($("#tempLabelFieldDiv").find('#divFieldIMAGE').css('text-align').length > 0)
                                                        finalResultHtml += 'style="text-align: ' + $("#tempLabelFieldDiv").find('#divFieldIMAGE').css('text-align') + ';"';
                                                    finalResultHtml += '  >';
                                                    if ($("#tempLabelFieldDiv").find('div:first').find('img').length > 0){
                                                        finalResultHtml += $("#tempLabelFieldDiv").find('div:first').find('img').clone().wrap('<p>').parent().html();
                                                    }
                                                }
                                                else {
                                                        finalResultHtml += '<div  class="ff-col-1 ff-label-col"   >';
                                                        finalResultHtml += $("#tempLabelFieldDiv").find('div:first').find('label').clone().wrap('<p>').parent().html();
                                                }                        

                                                if ($("#tempLabelFieldDiv").find('div:first').find('.requiredSpan').length > 0)
                                                {
                                                        finalResultHtml += $("#tempLabelFieldDiv").find('div:first').find('.requiredSpan').clone().wrap('<p>').parent().html();
                                                }
                                                finalResultHtml += '</div>';

                                                //we exclude image fields since there is only the one column
                                                if (allLabelsId[i].indexOf('lblIMAGE') != 0) {
                                                    $("#tempLabelFieldDiv").html(allFields[i]);
                                                    resultHtml += allFields[i];
                                                    $("#tempLabelFieldDiv").html(allFields[i]);
                                                }
                                                if ($("#tempLabelFieldDiv").find('.lookupInput').length > 0) {
                                                                                                              

                                                        $("#tempLabelFieldDiv").find('.lookupInput').find('a').remove();
                                                        $("#tempLabelFieldDiv").find('.lookupInput input[type=textbox]').removeAttr('data-value');
                                                        $("#tempLabelFieldDiv").find('.lookupInput input[type=hidden]').removeAttr('data-lookup-value-type');
                                                        $("#tempLabelFieldDiv").find('.lookupInput input[type=hidden]').removeAttr('data-lookup-value');
                                                        var a = $("#tempLabelFieldDiv").find('.lookupInput input[type=textbox]').attr('id');
                                                        var finalId=a;
                                                        if (a != undefined) {
                                                                a =  a.substring(a.length, a.length - 1);
                                                                if (isIdHasChildColorCode( a)) {
                                                                    a = '.' + a;
                                                                        var reString = $("#tempLabelFieldDiv").find('div:first').find(':input[type=textbox]').attr('id');
                                                                        reString = reString.substring(0, reString.length - 1);
                                                                        reString = reString.substring(reString.lastIndexOf('.') + 1);

                                                                        var finalString = $("#tempLabelFieldDiv").find('div:first').find(':input[type=textbox]').attr('id');
                                                                        finalString = finalString.substring(0, finalString.lastIndexOf('.'));

                                                                        $("#tempLabelFieldDiv").find('div:first').find(':input').attr('name', finalString + a + '.' + reString);
                                                                        $("#tempLabelFieldDiv").find('div:first').find(':input').attr('id', finalString + a + '.' + reString);
                                                                        finalId=finalString + a + '.' + reString;
                                                                }
                                                        }
                                                        //$lookupALink="<a class='lookup-link' href='' onclick='openLookupPopup(this);return false;' id='alink"+finalId+"'></a>";
                                                        $lookupALink=$('<a />',{'class':'lookup-link', 'href':'' ,'onclick':'openLookupPopup(this);return false;' , id:'alink'+finalId+''} )
                                                        $lookupHTML=$('<div />',{html:$("#tempLabelFieldDiv").find('div:first').find('.lookupInput').html()} );
                                                        
                                                        var elemId=$lookupHTML.find('input[type=textbox]').attr('id');
                                                        $lookupHTML.find('input[type=hidden]').attr('id',elemId);
                                                        $lookupHTML.find('input[type=hidden]').attr('name',elemId);
                                                        var elemInputId=$lookupHTML.find('input[type=textbox]').attr('id');
                                                        elemInputId='input'+elemInputId+'';
                                                        $lookupHTML.find('input[type=textbox]').attr('id',elemInputId);
                                                        $lookupHTML.find('input[type=textbox]').attr('readonly',true);
                                                        $lookupHTML.find('input[type=textbox]').attr('name',elemInputId);
                                                        var inputrefelem=$lookupHTML.find('input[type=textbox]');
                                                        if(isNullOrEmpty($(inputrefelem).attr('disabled')))
                                                        {
                                                        $lookupHTML.append($lookupALink);
                                                        }
                                                //var wrapper = document.createElement("div");
                                                         
                                                         
                                                        //var strPaymentDiv = wrapper.innerHTML;

                                                        finalResultHtml += '<div  class="ff-col-2 ff-field-col"   >' +$lookupHTML.html()  + '</div>';
                                                        //finalResultHtml += '<div  class="ff-col-2 ff-field-col"   >' +$("#tempLabelFieldDiv").find('div:first').find('.lookupInput').html() +lookupHtml + '</div>';
                                                } else {
                                                        if ($("#tempLabelFieldDiv #CAPTCHAINPUT").length > 0) {
                                                                var setCapId = $('#tempLabelFieldDiv [name="Captcha"]').attr('id');
                                                                finalResultHtml += '<div  class="ff-col-2 ff-captcha ff-field-col"  ><div id="' + setCapId + '" name="Captcha" data-isrequired="true" data-requiredmessage="Please enter the text shown in the image above"></div></div>';
                                                                $("#tempLabelFieldDiv img").remove();
                                                                $("#tempLabelFieldDiv input").remove();
                                                                $('#tempLabelFieldDiv [name="Captcha"]').remove();
                                                        } else if ($("#tempLabelFieldDiv #divFieldGENERALTEXT").length > 0) {
                                                                $("#tempLabelFieldDiv #divFieldGENERALTEXT").remove();
                                                        } else if ($("#tempLabelFieldDiv #divFieldIMAGE").length > 0) {
                                                                $("#tempLabelFieldDiv #divFieldIMAGE").remove();
                                                        } else {
                                                                var a = $("#tempLabelFieldDiv").find('div:first').find(':input').attr('id');
                                                                if (a != undefined) {
                                                                        a =  a.substring(a.length, a.length - 1);
                                                                if (isIdHasChildColorCode( a)) {
                                                                    a = '.' + a;
                                                                                var reString = $("#tempLabelFieldDiv").find('div:first').find(':input').attr('id');
                                                                                reString = reString.substring(0, reString.length - 1);
                                                                                reString = reString.substring(reString.lastIndexOf('.') + 1);
                                                                                //reString=$("#tempLabelFieldDiv").find('div:first').find(':input').attr('id').replace('Id',a);

                                                                                var finalString = $("#tempLabelFieldDiv").find('div:first').find(':input').attr('id');
                                                                                finalString = finalString.substring(0, finalString.lastIndexOf('.'));

                                                                                $("#tempLabelFieldDiv").find('div:first').find(':input').attr('name', finalString + a + '.' + reString);
                                                                                $("#tempLabelFieldDiv").find('div:first').find(':input').attr('id', finalString + a + '.' + reString);
                                                                                //$("#tempLabelFieldDiv").find('div:first').find(':input').attr('id',reString.substring(0,reString.length-1));                                            
                                                                             
                                                                                finalResultHtml += '<div class="ff-col-2 ff-field-col"  >' + $("#tempLabelFieldDiv").find('div:first').html() + '</div>';
                                                                        } else {
                                                                             
                                                                                finalResultHtml += '<div class="ff-col-2 ff-field-col"  >' + $("#tempLabelFieldDiv").find('div:first').html() + '</div>';
                                                                        }
                                                                }
                                                        }
                                                }
                                                 
                                        }//Not a payment field ends
                                     
                                         
                                    }//Is field li in ul ends
                                     if(!isPaymentField)
                                         {
                                            finalResultHtml += '</div>';
                                         }


                                }//label text not null ends
                

                                $(finalResultHtml).find('.ff-group-row').each(function (index) {
                                        if ($(this).has("div")) {
                                        }
                                        else {
                                                $(this).remove();
                                        }


                                });




                                $("#tempLabelFieldDiv").html(allFields[i]);
                                resultHtml += '</div>';
                                resultHtml += '</div>';
                                ///finalResultHtml += '</div>';


                        }/*label fields loop ends*/



                        if (counter > 0) {
                                finalResultHtml += '</div>';
                        }
                }/* IF li has ul element - means has section and field ends*/
                else if ($(this).hasClass("addNewSection") == false) {
                        /* footer section div */
                        $("#tempLabelFieldDiv").html($(this).clone().wrap('<p>').parent().html());
                        $("#tempLabelFieldDiv").find('img').remove('img');
                        if ($(this).hasClass('sectionHeader') && $(this).find('label ,input[type="button"]')) {
                                $("#tempLabelFieldDiv").find('.deleteField').remove();
                                resultHtml += '<div class="tr" >';
                                finalResultHtml += '<div  class="ff-footer-group"   >';
                                finalResultHtml += '<div  class="ff-item-row ff-footer-row"   >';
                                var textAlign = '';
                                if ($(this).hasClass('Ulbtn')) {
                                        resultHtml += '<div class="td sectionHeader" style="text-align:right;" >' + $("#tempLabelFieldDiv").find('div:first').clone().wrap('<p>').parent().html() + $("#tempLabelFieldDiv").find('div:nth-child(2)').clone().wrap('<p>').parent().html() + '</div>';
                                        resultHtml += '</div>';
                                        finalResultHtml += '<div  class="ff-submit-btn"  >' + $("#tempLabelFieldDiv").find('div:first').clone().wrap('<p>').parent().html() + $("#tempLabelFieldDiv").find('div:nth-child(2)').clone().wrap('<p>').parent().html() + '</div>';

                                } else {
                                        if ($(this).find("h1,h2,h3").length > 0) {
                                                if ($(this).find("h1,h2,h3").attr('align') != undefined)
                                                        textAlign = $("#labelDiv").find("h1,h2,h3").attr('align');
                                                else if ($("#labelDiv").find("h1,h2,h3").css('text-align') != "undefined")
                                                        textAlign = $("#labelDiv").find("h1,h2,h3").css('text-align');
                                        } else {
                                                textAlign = $("#labelDiv").find('div:first').css('text-align');
                                        }
                                        if (textAlign == '' || textAlign == undefined)
                                                textAlign = 'left';
                                        resultHtml += '<div class="td sectionHeader" style="text-align:' + textAlign + '; " >' + $("#tempLabelFieldDiv").find('.lblDiv').html() + '</div>';
                                        resultHtml += '</div>';
                                        finalResultHtml += '<div class="ff-item-row ff-text"  style="text-align:' + textAlign + '; ">' + $("#tempLabelFieldDiv").find('.lblDiv').html() + '</div>';

                                }
                                finalResultHtml += '</div>';///ff-item-row ff-footer-row ends
                                finalResultHtml += '</div>';///ff-footer-group ends
                        }
                }/* footer section div ends */
        });
        /* main form canvas li loop ends */
        fieldsXml += '</page>';
        //BACKEND Data XML Working
        var data = fieldsXml;
        var xml = $.parseXML('<root>' + data + '</root>');
        var $xml = $(xml);


        //Reference fields XML
        fieldsObjectXml += '<object>';
        fieldsObjectXml += '<name>' + $('#priName').attr('class') + '</name>';
        fieldsObjectXml += '<objectType>Primary</objectType>';
        fieldsObjectXml += '<relationshipType></relationshipType>';
        fieldsObjectXml += '<relatedField></relatedField>';
        //Add fieldsXml String
        fieldsObjectXml += '<fields>';

        $xml.find('field').each(function () {
                //check if the object name matches so we know where to put the field
                //we also check if there is no object name - this denotes a general field e.g. file upload
                //which should be included with the primary object anyway            
                
                if ($(this).find('Object').text().trim() == "sortableForRelFields1") {
                        fieldsObjectXml += '<field>';
                        fieldsObjectXml += '<name>' + $(this).find("name").text() + '</name>';
                        fieldsObjectXml += '<type>' + $(this).find("type").text() + '</type>';
                        fieldsObjectXml += '<hiddenField>' + $(this).find("hiddenField").text() + '</hiddenField>';

                        fieldsObjectXml += '<readOnly>' + $(this).find("readOnly").text() + '</readOnly>';
                        fieldsObjectXml += '<upsert>' + $(this).find("upsert").text() + '</upsert>';
                        if($(this).find("listViewId").length>0)
                        {
                        fieldsObjectXml += '<listViewId>' + $(this).find("listViewId").text() + '</listViewId>';
                        }
                        if($(this).find("listViewObject").length>0)
                        {
                        fieldsObjectXml += '<listViewObject>' + $(this).find("listViewObject").text() + '</listViewObject>';
                        }
                         
                        fieldsObjectXml += '<defaultValue>' + $(this).find("defaultValue").text() + '</defaultValue>';
                        fieldsObjectXml += '<maxLength>' + $(this).find("maxLength").text() + '</maxLength>';
                        fieldsObjectXml += '<required>' + $(this).find("required").text() + '</required>';
                        fieldsObjectXml += '<requiredMessage>' + $(this).find("requiredMessage").text() + '</requiredMessage>';
                        fieldsObjectXml += '<picklistValues>';
                        $(this).find('picklistValues').find("value").each(function () {
                                fieldsObjectXml += '<picklistValue><value>' + $(this).text() + '</value></picklistValue>';
                        });
                        fieldsObjectXml += '</picklistValues>';
                        fieldsObjectXml += '</field>';
                }
                if ($(this).find('object').text() == '') {
                        if ($(this).find('type').text() == "CAPTCHA") {
                                fieldsObjectXml += '<field>';
                                fieldsObjectXml += '<name>' + $(this).find("name").text() + '</name>';
                                fieldsObjectXml += '<type>CAPTCHA</type>';
                                fieldsObjectXml += '<required>' + $(this).find("required").text() + '</required>';
                                fieldsObjectXml += '<requiredMessage>' + $(this).find("requiredMessage").text() + '</requiredMessage>';
                                fieldsObjectXml += '</field>';
                        }
                        if ($(this).find('type').text() == "PAYPALPAYMENT") {
                                fieldsObjectXml += '<field>';
                                fieldsObjectXml += '<name>' + $(this).find("name").text() + '</name>';
                                fieldsObjectXml += '<type>PAYPALPAYMENT</type>';
                                fieldsObjectXml += '<required>' + $(this).find("required").text() + '</required>';
                                fieldsObjectXml += '<requiredMessage>' + $(this).find("requiredMessage").text() + '</requiredMessage>';
                                fieldsObjectXml += '</field>';
                        }
                        if ($(this).find('maxFiles').text() != '') {
                                fieldsObjectXml += '<field>';
                                fieldsObjectXml += '<name>' + $(this).find("name").text() + '</name>';
                                 fieldsObjectXml += '<paymentFieldId>' + $(this).find("paymentFieldId").text() + '</paymentFieldId>';
                                fieldsObjectXml += '<type>FILEUPLOAD</type>';
                                fieldsObjectXml += '<allowedFileTypes>' + $(this).find("allowedFileTypes").text() + '</allowedFileTypes>';
                                fieldsObjectXml += '<uploadToChatter>' + $(this).find("uploadToChatter").text() + '</uploadToChatter>';
                                fieldsObjectXml += '<maxFiles>' + $(this).find("maxFiles").text() + '</maxFiles>';
                                fieldsObjectXml += '<required>' + $(this).find("required").text() + '</required>';
                                fieldsObjectXml += '<requiredMessage>' + $(this).find("requiredMessage").text() + '</requiredMessage>';
                                fieldsObjectXml += '</field>';
                        }
                }
        });
        fieldsObjectXml += '</fields>';
        fieldsObjectXml += '</object>';

         
         $('.available-fields-block-wrapper .list-toggle-div-wrap').each(function(indx,wrapperDiv){
           var relindx=indx;
           relindx++;
                var secondaryObjectId=selectRelObjIdByIndex(relindx);
                var ListRelVarElem=$('#'+$(wrapperDiv).attr('id'));
                var sortableFieldClassName=safeStringValue($(ListRelVarElem).find('ul.dropfields').attr('id'),'');  
                fieldsObjectXml += '<object>';
                fieldsObjectXml += '<name>' + secondaryObjectId.substring(secondaryObjectId.indexOf('(') + 1, secondaryObjectId.indexOf(')')) + '</name>';
                fieldsObjectXml += '<objectType>Secondary</objectType>';
                var childObjectClass='';
                if($(wrapperDiv).attr('data-childclass') !=undefined && $(wrapperDiv).attr('data-childclass') !=""){
                    childObjectClass=safeStringValue($(wrapperDiv).attr('data-childclass'),'');
                }
                
                if ($(ListRelVarElem).find('.objName').text().indexOf('-') > 0) {
                        fieldsObjectXml += '<relationshipType>Master</relationshipType>';
                } else {
                        //if(getImg != undefined){
                        if (childObjectClass != '') {
                                fieldsObjectXml += '<relationshipType>Detail</relationshipType>';
                                  
                                fieldsObjectXml += '<relatedField>' + mapLookup[$(ListRelVarElem).find('.objName').text()] + '</relatedField>';
                        } else {
                                fieldsObjectXml += '<relationshipType>Lookup</relationshipType>';
                               
                                $("#sortableForRelFields1").find('li').each(function () {
                                        if (isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
                                                if (($(this).attr("title") == "REFERENCE" || $(this).attr("title").match(/\(Lookup\)$/g) != null)   && $(this).find('div').attr('lblname') == $(ListRelVarElem).find('.objName').text().substring(0, $(ListRelVarElem).find('.objName').text().indexOf('(') - 1)) {
                                                        fieldsObjectXml += '<relatedField>' + $(this).find('label').attr('id').replace('lbl', '') + '</relatedField>';
                                                }
                                        }
                                });
                        }
                }



                //Add fieldsXml String
                fieldsObjectXml += '<fields>';
                $xml.find('field').each(function () {
                        //if($(this).find('Object').html().replace('From : ','') == $('#ListMainRel4').find('.objName').text().replace(' Fields','')+' Object'){
                        //if($(this).find('Object').html().replace('From : ','') == $('#ListMainRel4').find('.objName').text()){
                        if (!isNullOrEmpty($(this).find('Object').text().trim()) && $(this).find('Object').text().trim()== sortableFieldClassName) {

                                
                                 if (childObjectClass != '') {
                                        if (childObjectClass == $(this).find("name").text().substring($(this).find("name").text().length - 1)) {
                                                fieldsObjectXml += '<field>';
                                                fieldsObjectXml += '<name>' + $(this).find("name").text().substring(0, $(this).find("name").text().length - 1) + '</name>';
                                                fieldsObjectXml += '<type>' + $(this).find("type").text() + '</type>';
                                                fieldsObjectXml += '<hiddenField>' + $(this).find("hiddenField").text() + '</hiddenField>';
                                                fieldsObjectXml += '<readOnly>' + $(this).find("readOnly").text() + '</readOnly>';
                                                fieldsObjectXml += '<upsert>' + $(this).find("upsert").text() + '</upsert>';
                                                if($(this).find("listViewId").length>0)
                                                {
                                                fieldsObjectXml += '<listViewId>' + $(this).find("listViewId").text() + '</listViewId>';
                                                }
                                                if($(this).find("listViewObject").length>0)
                                                {
                                                fieldsObjectXml += '<listViewObject>' + $(this).find("listViewObject").text() + '</listViewObject>';
                                                }
                                                fieldsObjectXml += '<defaultValue>' + $(this).find("defaultValue").text() + '</defaultValue>';
                                                fieldsObjectXml += '<maxLength>' + $(this).find("maxLength").text() + '</maxLength>';
                                                fieldsObjectXml += '<required>' + $(this).find("required").text() + '</required>';
                                                fieldsObjectXml += '<requiredMessage>' + $(this).find("requiredMessage").text() + '</requiredMessage>';
                                                fieldsObjectXml += '<picklistValues>';
                                                $(this).find('picklistValues').find("value").each(function () {
                                                        fieldsObjectXml += '<picklistValue><value>' + $(this).text() + '</value></picklistValue>';
                                                });
                                                fieldsObjectXml += '</picklistValues>';
                                                fieldsObjectXml += '</field>';
                                        }
                                } else {
                                        fieldsObjectXml += '<field>';
                                        fieldsObjectXml += '<name>' + $(this).find("name").text() + '</name>';
                                        fieldsObjectXml += '<type>' + $(this).find("type").text() + '</type>';
                                        fieldsObjectXml += '<hiddenField>' + $(this).find("hiddenField").text() + '</hiddenField>';
                                        fieldsObjectXml += '<readOnly>' + $(this).find("readOnly").text() + '</readOnly>';
                                        fieldsObjectXml += '<upsert>' + $(this).find("upsert").text() + '</upsert>';
                                        if($(this).find("listViewId").length>0)
                                            {
                                            fieldsObjectXml += '<listViewId>' + $(this).find("listViewId").text() + '</listViewId>';
                                            }
                                            if($(this).find("listViewObject").length>0)
                                            {
                                            fieldsObjectXml += '<listViewObject>' + $(this).find("listViewObject").text() + '</listViewObject>';
                                            }
                                        fieldsObjectXml += '<defaultValue>' + $(this).find("defaultValue").text() + '</defaultValue>';
                                        fieldsObjectXml += '<maxLength>' + $(this).find("maxLength").text() + '</maxLength>';
                                        fieldsObjectXml += '<required>' + $(this).find("required").text() + '</required>';
                                        fieldsObjectXml += '<requiredMessage>' + $(this).find("requiredMessage").text() + '</requiredMessage>';
                                        fieldsObjectXml += '<picklistValues>';
                                        $(this).find('picklistValues').find("value").each(function () {
                                                fieldsObjectXml += '<picklistValue><value>' + $(this).text() + '</value></picklistValue>';
                                        });
                                        fieldsObjectXml += '</picklistValues>';
                                        fieldsObjectXml += '</field>';
                                }
                        }
                });

                fieldsObjectXml += '</fields>';
                fieldsObjectXml += '</object>';
             
        });
        resultHtml += '</div>';
        finalResultHtml += '</div>';//// main form div ends

        //Changes for Button HTML            
        finalResultHtml = finalResultHtml.replace('<a class="tooltip" href="#"><span><h6>This option will redirect the person filling out the form to another website after they submit their form</h6></span></a>', htmlForButton)
        finalResultHtml = finalResultHtml.replace('style="float:left;margin-left:18px;"', 'class="btnDiv"');
        finalResultHtml = finalResultHtml.replace($(finalResultHtml).find('.btnDiv input').attr('id'), 'btnsubmit');

        $('#previewDiv').html(finalResultHtml);
        //Set hidden fields for Form 

        //alert(fieldsObjectXml);
        $('[id$="hiddenCkEditorValue"]').val(resultHtml);
        $('[id$="finalResultHtml"]').val(finalResultHtml);
        $('[id$="fieldsObjectXml"]').val(fieldsObjectXml);
        $('[id$="fieldsXml"]').val(fieldsXml);

        if (isPreview == false) {
                 

                var finalHtml = compressText($('[id$="finalResultHtml"]').val());
                var formHtml = compressText($('[id$="hiddenCkEditorValue"]').val());
                var fieldsXml = $('[id$="fieldsXml"]').val();
                var objectsXml = $('[id$="fieldsObjectXml"]').val();
               /* var relatedObjectsJSON=[];
                                        relatedObjectsJSON.push(createRelJSONObj(opFirst));
                                        relatedObjectsJSON.push(createRelJSONObj(opSecond));
                                        relatedObjectsJSON.push(createRelJSONObj(opThird));*/
                                        var relatedObjectsJSON=[];
                                      
                                        var relIndx=0;
                                         $('.ObjectName h4 span.secName').each(function(indx){
                                        if($(this).attr('id') != 'priName'){
                                              relIndx++;
                                              var  relObjText=selectRelObjIdByIndex(relIndx);
                                                relatedObjectsJSON.push(createRelJSONObj(relObjText));
                                               
                                                 
                                        }
                                });

                                        var relatedObjectsXML='<relatedObjects>';
                                        $.each(relatedObjectsJSON, function (index, jsonitem) {
                                            if (relatedObjectsJSON[index].object!=null && relatedObjectsJSON[index].object!='') {
                                               relatedObjectsXML+='<object>'+ relatedObjectsJSON[index].object+'</object>';
                                            }
                                        });
                                        relatedObjectsXML+='</relatedObjects>';

                if (isAutosave) {
                    
                        callAutosave(relatedObjectsXML, fieldsXml, objectsXml, finalHtml, formHtml, fetchHiddenObjectValues());
                        /*alert('Saved!');*/
                }
                else {
             

                        
                         remotevalidatePaymentAndCallSaveJS(relatedObjectsXML, fieldsXml, objectsXml, finalHtml, formHtml, fetchHiddenObjectValues());
                }

        } else {
                $('#btnSaved').removeClass('btnGreenClick');
                $("#preview").html("<center></center><div style='cursor:pointer;float:right;height:24px;padding-right: 10px;padding-top: 6px;padding-bottom: 10px;'><img src='{!URLFOR($Resource.iconImages,'Close.png')}' onmouseover='changeImg(this);' onmouseout='rechangeImg(this);' onclick='closePrivewDialog();'/></div><div style='width:100%;border-bottom:1px solid #ccc;clear:both;'></div><!--<h3>Form Preview</h3>--><div id='formPreview'>" + finalResultHtml + "</div><div style='position: relative;bottom: 0;width:100%;clear:both;height:20px'></div>");
                $('#preview').dialog('open');

                //Add Label for Remove
                //$("#preview .ff-fileupload-drop-area").after('<h5><div id="removeFiles" style="float:right;line-height: 25px;margin-top: 10px;">File Name  <div style="padding-left: 20px;color:#33aefd;float: right;">Remove</div><br/>File Name  <div style="padding-left: 20px;color:#33aefd;float: right;">Remove</div><br/>File Name  <div style="padding-left: 20px;color:#33aefd;float: right;">Remove</div><br/></div></h5>');
                $('#preview [name="Captcha"]').after('<img src="https://fastforms.visualantidote.com/Images/captcha.png" /><br/><input type="textbox" id="CAPTCHAINPUT" name="CAPTCHAINPUT" vatt="CAPTCHA" data-formatmessage="" data-maxlength="50" data-maxlengthmessage="Maximum 50 characters" maxlength="50" />');
        }
}

function compressText(txtIn)
{
        if (txtIn.length > 131072)
                return LZString.compressToEncodedURIComponent(txtIn);
        else
                return txtIn;
}

function decompressText(txtIn)
{
        if (txtIn.length > 0 && txtIn.charAt(0) != '<')
                return LZString.decompressFromEncodedURIComponent(txtIn);
        else
                return txtIn;
}

function escape(s) {
    var escaped = {
        '&': '&amp;',
        "'": '&#39;',
        '"': '&quot;'
    };
    try {
        return s.replace(/[&<>'"]/g, function (m) {
            return escaped[m];
        });
    } catch(err) {
        return s;
    }
}


/*call to save function ends*/
function createJSONSectionObj(sectionlabelid, sectionclass) {
        var dataobj = { "id": sectionlabelid, "class": sectionclass };


        return dataobj;
}



                function fetchHiddenObjectValues(){
                        var hiddenObjects = '';
                      var seperator="";         
                                 $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(indx,selectParentElem){
                        var selectedValue=$(selectParentElem).find('select.select-secondary-element').val();
                      if(!isNullOrEmpty(selectedValue))
                      {
                       var objtype= $(selectParentElem).find('select.select-secondary-element').children().children(':selected').attr('name');
                        console.log(' selectedValue  '+selectedValue+'  objtype-'+objtype);
                        hiddenObjects+=seperator+selectedValue+'##'+objtype;
                        seperator=",";      
                      }

                    });
                        return hiddenObjects;
             }
                 
                
                  
                function IsSelectVisible(selectlevelID)
                {
                
                        var returnflag=true;
                        if($('#'+selectlevelID+' .scroll-parent').css('display') == 'none'){
                                returnflag=false;
                        }
                        return returnflag;
                }
                function isSelectedItemIsvalid(selectlevelID)
                {
                
                        var returnflag=true;
                        if($('#'+selectlevelID+' .scroll-parent .select2-container a.select2-choice .select2-chosen').text() == '----Select Object----'){
                                returnflag=false;
                        }
                        return returnflag;
                }
                 
                 
                
                 
                String.prototype.replaceAll = function(search, replacement) {
                        var target = this;
                        return target.split(search).join(replacement);
                };
                
                function redirectToAdvanceFilter(){
                        var res = confirm('Are you sure for navigate to Advanced Editor ?');
                        if(res)
                                window.location.href = '/apex/Ckeditor';
                }
                 
                // Make all Li of fields and label make equals
                function makeAllLiHeightEqual(){
                        var heightOfAllLi = [];
                        var i = 0;
                        $(".formUlLabel").find('li').each(function(){
                                heightOfAllLi[i] = $(this).height();
                                i++;
                        });
                        i = 0;
                        $(".formUlField").find('li').each(function(){
                                if(i<heightOfAllLi.length )
                                        $(this).height(heightOfAllLi[i]);
                                i++;
                        });
                         
                }
                 
                // Open new Label Dialog
                function openNewLabelDialog(){
                        $('#hiddenLiId').val('');
                        $("#tblForRequirdBlock").hide();
                        /*window.frames['FormatToolbar'].document.getElementById('editor').innerHTML = '';*/
                        $( "#dialog" ).dialog({ height: 280});
                        $('#dialog').dialog('option', 'position', 'center');
                        $('#dialog').dialog('open');
                }
                function resetEditDivOpacity()
                {
                        ////to hide arrow/delete button on click on any editpanel's arrow button
                        $('#parentUlForm').find('.editImg').removeAttr('style');
                        $('#parentUlForm').find('.deleteField').show();
                                
                }
                var selFileType='';
                var isShowLabel=false;
             
                 /*here go  openEditDialog()*/
                 function openEditPaymentDialog(liId,elemSource,isFieldLabel)
                 {
                     var elemSourceParent=  $(elemSource).parents('.fieldLi');
                    if($(elemSource).hasClass('togHoverActive'))
                    {                       
                        console.log('Close Payment options');
                        mixpanel.track('Payment options collapsed',{ "Field ID": liId});
                        expandPaymentOptions(elemSourceParent);
                        resetScroll();
                    }
                    else
                    {                       
                        mixpanel.track('Payment options expanded',{ "Field ID": liId});                        
                        Intercom('trackEvent', 'opened-payment-options');
                        console.log('Expand Payment options');
                        expandPaymentOptions(elemSourceParent);
                    }
                    
                 }
                 function vaildateLookupEdit(liElementId)
                 {
                    var infoIsValid=true;
                    var firstLabel=$('#'+liElementId).find('>div:first > label:first');
                        if(!isNullOrEmpty($(firstLabel).attr('vatt')) && $(firstLabel).attr('vatt')=='REFERENCE')
                        {
                            if(!$('#'+liElementId).find('#trForHideField input[type="checkbox"]').is(':checked') && !$('#'+liElementId).find('#trForReadOnlyField input[type="checkbox"]').is(':checked')  && $('#'+liElementId).find('#trForLookupView').is(':visible') )
                            {
                                var selectedOptionElem=$('#'+liElementId).find('#trForLookupView select.lookup-select option:selected');
                                if(!isNotNullOrUndefined(selectedOptionElem) || isNullOrEmpty($(selectedOptionElem).attr('value')) || $(selectedOptionElem).val()=='000000000000000AAA')
                                {
                                    infoIsValid=false;
                                    var validationMsg='Please select a view';
                                    if($(selectedOptionElem).val()=='000000000000000AAA')
                                    {
                                        validationMsg='List View is null';
                                    }
                                    var lookupViewTr=$('#'+liElementId).find('#trForLookupView');
                                    
                                     $(lookupViewTr).find('select.lookup-select').select2('focus');
                                     if($(lookupViewTr).find('.formatEditCol2 .edit-validation-err').length<1)
                                     {
                                                $(lookupViewTr).find('.formatEditCol2 a.lookup-edit-link').after('<span class="edit-validation-err">'+validationMsg+'<span>');
                                     }
                                     else
                                     {
                                        $(lookupViewTr).find('.formatEditCol2 .edit-validation-err').text(validationMsg);
                                     }
                                                 
                                             
                                }
                                 

                            }
                        }
                        return infoIsValid;
                 }
            function openEditDialog(liId, isFieldLabel) {
                ////to fix issue: Delete button missing / arrow not hiding issue-- added on nov 26 2014 by balinder
                $("#trForUpsertField").find('.freemium-icon').remove('');
                 var infoIsValid=true;
                  var firstLabel=$('#'+$("#hiddenLiId").val()).find('>div:first > label:first');
                        if($("#" + $("#hiddenLiId").val()).find(".ExpandDiv").length > 0 && !isNullOrEmpty($(firstLabel).attr('vatt')) && $(firstLabel).attr('vatt')=='REFERENCE' && !vaildateLookupEdit($("#hiddenLiId").val()))
                        {
                            infoIsValid=false;
                        }
                        if(infoIsValid)
                        {
                /*collapse all payment field drawers*/
                collapsePaymentOptionsDiv();
                resetEditDivOpacity();
                resetPaymentOptions();
                $(".editImg").removeClass('togHoverActive');
                //resetSavedButton();
                isError = true;
                isShowLabel = false;
                var dHide = $("#" + liId + " .deleteField").attr('id');
                if ($("#hiddenLiId").val() == liId && $("#" + $("#hiddenLiId").val()).find(".ExpandDiv").length > 0) {
                        mixpanel.track('Field options collapsed',{ "Field ID": liId});
                        //close drawer
                        //addLabel();
                        if (/lblliUPLOAD/i.test(liId)) {
                                if ($('#customfltype').next().html() == "Please provide comma-separated extensions (e.g. .doc, .txt)") {
                                        isError = false;
                                        $('#customfltype').focus();
                                } else {
                                        $(".ui-icon-closethick").click();
                                        var RE = /^-{0,1}\d*\.{0,1}\d+$/;
                                        $("#limitValue").next().remove();
                                        if (RE.test($("#limitValue").val())) {
                                                if ($("#limitValue").val() > 99 || $("#limitValue").val() <= 0) {
                                                        isError = false;
                                                        $("#limitValue").css('border', '1px solid red');
                                                        $("#limitValue").after('<span style="color:red;">Please enter a numeric value<span>');
                                                        $("#limitValue").focus();
                                                } else {
                                                        limitValue = $("#limitValue").val();
                                                        $("#" + liId).find(".uploadboxarea").attr('data-maxfiles', limitValue);
                                                        isError = true;
                                                }
                                        } else {
                                                isError = false;
                                                $("#limitValue").css('border', '1px solid red');
                                                $("#limitValue").after('<span style="color:red;">Please enter a numeric value<span>');
                                                $("#limitValue").focus();
                                        }
                                }

                        }
                        if (isError) {
                                limitValue = $("#limitValue").val();
                                $("#" + liId).find(".uploadboxarea").attr('data-maxfiles', limitValue);
                                selFileType = $("#selectedfiletypes").val();
                                $(".ExpandDiv").slideUp('300', function() {
                                        resetFloat();
                                        goToNextTourStop();
                                });
                                setTimeout(function() {
                                        $(".ExpandDiv").remove()
                                }, 300);
                                $("#" + liId + " .deleteField").show();

                                $("#" + liId + " .editImg").removeAttr('style');
                                 
                                $(".formUlLabel").sortable("option", "disabled", false);
                                $("#parentUlForm").sortable("option", "disabled", false);


                        }
                        

                        
                        console.log(' autosave hit');
                        save(false, true);
                        isChangesMadeInForm = false;
                        $("#" + liId).parent().parent().parent().parent().parent().removeClass('isFieldEdit');
                         
                } 
                else 
                {
                    /*drawer is open                */

                        mixpanel.track('Field options expanded',{ "Field ID": liId});
                        var metadata = {
                          field_name: liId
                        };
                        Intercom('trackEvent', 'opened-field-options', metadata);                        
                        $("#" + liId + " .editImg").addClass('togHoverActive');
                        //if ($("#" + $("#hiddenLiId").val()).find(".ExpandDiv").length > 0) {
                        //    addLabel();
                        //}
                        var tempDialogHtml = $("#tempDialogHtml").html();
                        if ($("#tempDialogHtml").find('table').length > 0) {
                                $("#dialog").html($("#tempDialogHtml").html());
                        }
                        $("iframe").remove();
                        $(".ExpandDiv").remove();
                        $("#hiddenLiId").val(liId);
                        $("#hiddenLiLabelId").val($("#" + liId).find('label').attr('id'));
                        var labelLIId = $("#hiddenLiLabelId").val();
                        var dialogHtml = $('#dialog').html();
                        $("#tempDialogHtml").html(dialogHtml);
                        $("#" + liId).find('.ExpandDiv').remove();

                        $("#" + liId).append('<div class="ExpandDiv" id="ExpandDiv' + liId + '">' + dialogHtml + '</div>');
                        
                        
                        var nameOfLabel = labelLIId.replace('lbl', '');
                        
                        $('.arrowUp').bind("click", function() {
                                openEditDialog(liId, true);
                        });


                        if (/lblliIMAGE/i.test(liId)) {
                            $("#trForLabelEdit").hide();
                            $("#trForDefaultValue").hide();
                             $("#trForHideField").show();
                            $("#trForReadOnlyField").hide();
                            $("#trForCurrencyLabelField").hide();
                            
                            $("#trForLookupView").hide();
                            $("#trForFileField").hide();
                            $("#trForLimitField").hide();
                            $("#trForUploadToChatterField").hide();
                            $("#trForUpsertField").hide();
                            $(".sectionTd").hide();
                            $("#trForRequired").hide();
                            $("#trForDisplayType").hide();
                            $("#trForMsgField").hide();

                            $("#trForImageAlignment").show();
                            $("#trForImageWidth").show();
                            $("#trForImageHeight").show();
                            /*for lblliIMAGE- updated below code on sep 17 2015 to fix #190 issue*/
                            var imgWidth,imgHeight,imgAlign;
                            if($('#' + liId.replace('lblli','img')).length>0)
                            {
                                imgWidth = $('#' + liId.replace('lblli','img')).css('width').replace('px','');
                              imgHeight = $('#' + liId.replace('lblli','img')).css('height').replace('px','');
                              imgAlign = $('#' + liId).find('#divFieldIMAGE').css('text-align');
                            }
                              
                              if(!isNullOrEmpty(imgAlign))
                              {
                                $("#trForImageAlignment").find('#ddlImageAlignment').val(imgAlign);
                              }
                              if(!isNullOrEmpty(imgWidth))
                              {
                                $("#trForImageWidth").find('#imgWidthValue').val(imgWidth);
                              }
                              if(!isNullOrEmpty(imgHeight))
                              {
                                $("#trForImageHeight").find('#imgHeightValue').val(imgHeight);
                              }
                            
                          

                            if($("#" + liId).find('div:first-child > label').hasClass('grayLabel'))
                                            {
                                                setHideFieldForGeneralField(true);
                                            }
                                            else
                                            {
                                                setHideFieldForGeneralField(false);
                                            }


                        } 
                        else 
                        {


                            if (isFieldLabel) {

                                <apex:outputText rendered="{!if(isFreemium,true,false)}">
                                 $("#trForUpsertField").find('input[type="checkbox"]').attr('disabled',true);
                                 if(!$("#trForUpsertField").find('label.css-label').hasClass('cursor-not-allowed'))
                                 {
                                    $("#trForUpsertField").find('label.css-label').addClass('cursor-not-allowed');
                                 }
                                var  lockHtml=getFreemiumHTML('','','lines-3');
                                 $("#trForUpsertField").find('.formatEdit').append(lockHtml);
                                </apex:outputText>
                                var textLbl=$("#"+liId).find('>div:first-child > label').text();//$("#"+liId).find("#"+labelLIId).html();
                        $('#defaultLabel').val(textLbl);
                                /* if current li element has a field element*/
                                var fieldliiElement=$("#" + liId);
                                
                                    $(".fieldTd").show();
                                    $("#trForCurrencyLabelField").hide();

                                    var labelElem = $("#" + liId).find('div:first label:first');
                                    if ($(labelElem) && $(labelElem).attr('vatt')) {
                                            var vattValue = $(labelElem).attr('vatt');
                                            if (vattValue.indexOf('DOUBLE') >= 0) {
                                                    vattValue = 'INTEGER';
                                            }
                                            showDisplayAsControl(true, vattValue);
                                    }
                                    if ($(labelElem) && $(labelElem).attr('vatt')) {
                                            var vattValue = $(labelElem).attr('vatt');
                                            if (vattValue.indexOf('CURRENCY') >= 0) {
                                                var currencylabel = $("#" + liId).find('.fieldDiv input:first').prev().text();
                                            $("#trForCurrencyLabelField").show();
                                             $("#trForCurrencyLabelField").find('#currencyLabelValue').val(currencylabel);
                                            }
                                             
                                    }

                                    
                                    

                                    $(".sectionTd").hide();
                                    var isSelect = false;
                                    var isSelect2 = false;
                                    var isSelectRadioBtn = false;
                                    var isMultiSelect = false;
                                    var isMultiSelect2 = false;
                                    var isCustomRorClist = false;
                                    var isCustomFlexInputOrSelect = false;

                                    var fieldDivHtml = $("#" + liId).find('.fieldDiv').html();
                                    var selectElement = $("#" + liId).find('.fieldDiv>select')
                                    if (selectElement.length == 1) {
                                            selectElement = selectElement[0];
                                    }
                                    if (selectElement.type == 'select-one') {
                                            isSelect = true;
                                    } else if (selectElement.type == 'select-multiple') {
                                            isMultiSelect = true;
                                    }

                                    /*april 8 - flexcontrol modification */
                                    if ($("#" + liId).find('.fieldDiv div.select2-container').length > 0) {
                                            if ($("#" + liId).find('.fieldDiv div.select2-container-multi').length > 0) {
                                                    isMultiSelect2 = true;
                                            } else {
                                                    isSelect2 = true;
                                            } 
                                    }

                                    if ($("#" + liId).find('.fieldDiv div.custom-flex-control-container').length > 0) {

                                            isCustomFlexInputOrSelect = true;
 
                                    }


                                    $("#trForDefaultValue").find('td:last').html(fieldDivHtml);

                                    $("#trForDefaultValue").find('td:last').find('select').attr('id', 'defaultValue');
                                    if (isSelect2 || isMultiSelect2) {
                                            $("#trForDefaultValue").find('div.select2-container').remove();
                                            $("#trForDefaultValue").find('select:first').removeClass('select2-offscreen');

                                            var controlType = $("#trForDefaultValue").find('select:first').attr('data-flexcontrol');
                                            if (isMultiSelect2) {
                                                    console.log(' Multi select 2 tags' + controlType);
                                                    $('.flex-ctrl-display-as select.multi-picklist-type-select').val(controlType);
                                            } else if (isSelect2) {
                                                    $('.flex-ctrl-display-as select.picklist-type-select').val(controlType);
                                            } else {

                                            }

                                    } else if (isCustomFlexInputOrSelect) {
                                            /* if control is one of the following type- checkboxlist, radio button list, nps rating or star rating */
                                            $("#trForDefaultValue").find('div.custom-flex-control-container').remove();
                                            if ($("#trForDefaultValue").find('select:first').length > 0) {
                                                    $("#trForDefaultValue").find('select:first').removeClass('custom-select-offscreen');

                                                    var controlType = $("#trForDefaultValue").find('select:first').attr('data-flexcontrol');

                                                    if (isSelect) {

                                                            $('.flex-ctrl-display-as select.picklist-type-select').val(controlType);
                                                    } else if (isMultiSelect) {
                                                            $('.flex-ctrl-display-as select.multi-picklist-type-select').val(controlType);
                                                    }
                                            } else if ($("#trForDefaultValue").find('input[type="textbox"]:first').length > 0) {
                                                    $("#trForDefaultValue").find('input[type="textbox"]:first').removeClass('custom-flexcontrol-offscreen');
                                                    var controlType = $("#trForDefaultValue").find('input[type="textbox"]:first').attr('data-flexcontrol');
                                                    $('.flex-ctrl-display-as select.integer-type-select').val(controlType);

                                                    $("#trForDefaultValue").find('td:last').find('input').attr('id', 'defaultValue');

                                                    // $('.rating-range-block').removeClass('display-none');
                                                    //   $('.rating-range-block .star-rating-range').removeClass('display-none'); 
                                            }


                                    } else {
                                        if ($(fieldliiElement).find('.lookupInput').length > 0) {
                                            var lookupval=$("#trForDefaultValue").find('td:last').find('input[type=hidden]').val();
                                            $("#trForDefaultValue").find('td:last').find('input[type="textbox"]').attr('id', 'defaultValue');
                                            $("#trForDefaultValue").find('td:last').find('input[type="textbox"]').attr('data-value',lookupval);
                                        }
                                        else
                                        {
                                            $("#trForDefaultValue").find('td:last').find('input').attr('id', 'defaultValue');
                                        }
                                    }

                                    /*added datetimepicker to for default valueapril 1 2015*/
                                    if ($("#trForDefaultValue").find('td:last').find('input').size() > 0) {
                                            var inputElem = $("#trForDefaultValue").find('td:last').find('input');
                                            if ($(inputElem).attr('vatt') == 'DATE') {
                                                    $(inputElem).datetimepicker({
                                                            showTimepicker: false,
                                                            addSliderAccess: true,
                                                            sliderAccessArgs: {
                                                                    touchonly: false
                                                            },
                                                            changeMonth: true,
                                                            changeYear: true,
                                                            yearRange: "-100:+10",
                                                            onSelect: function(dateText) {
                                                                    addLabel();
                                                                    resetSavedButton();
                                                            }
                                                    });
                                            } else if ($(inputElem).attr('vatt') == 'DATETIME') {
                                                    $(inputElem).datetimepicker({
                                                            addSliderAccess: true,
                                                            sliderAccessArgs: {
                                                                    touchonly: false
                                                            },
                                                            changeMonth: true,
                                                            changeYear: true,
                                                            yearRange: "-100:+10",
                                                            onSelect: function(dateText) {
                                                                    addLabel();
                                                                    resetSavedButton();
                                                            }
                                                    });
                                            }

                                    }

                                    $("#trForDefaultValue").find('td:last').find('textarea').attr('id', 'defaultValue');

                                    $("#trForDefaultValue").find('td:last').find('textarea').attr('name', $('.ExpandDiv').prev().prev().find('textarea').attr('id'));

                                    $("#trForDefaultValue").find('td:last').find('.css-label').attr('for', 'defaultValue');
                                    $("#tblForRequirdBlock").show();
                                    //setTimeout(function(){$('#FormatToolbar').contents().find('#arrowSection').css('display','none')}, 2000);


                                    $("#" + liId).find('#defaultValue').removeAttr('readonly');

                                    
                                    //Disable required checkbox 
                                    if ($("#" + liId).find('#isDefaultRequired' + nameOfLabel).val() == "true" || $("#" + liId).find('#isDefaultRequired' + nameOfLabel).val() == true) {
                                            $('#requiredChk').prop("disabled", true);
                                            $('#requiredChk').parent().find('label').addClass('checkboxdisabled');
                                    } else {
                                            $('#requiredChk').prop("disabled", false);
                                            $('#requiredChk').parent().find('label').removeClass('checkboxdisabled');;
                                    }
                                    if ($("#" + liId).find('#upsertField' + nameOfLabel).val() == "true" || $("#" + liId).find('#upsertField' + nameOfLabel).val() == true) {
                                            $('#upsertField').prop('checked', true);
                                    } else {
                                            $('#upsertField').prop('checked', false);
                                    }

                                    if ($("#" + liId).find('#isUserSelectedRequired' + nameOfLabel).val() == "true" || $("#" + liId).find('#isUserSelectedRequired' + nameOfLabel).val() == true) {
                                            $('#requiredChk').prop('checked', true);
                                            $('#hideField').prop('checked', false);
                                            //$('#hideField').next().css('pointer-events','none');
                                    } else {
                                            $('#hideField').next().removeAttr('style');
                                            $('#requiredChk').prop('checked', false);
                                    }
                                    var defaultValue = $("#" + liId).find('#defaultValue' + nameOfLabel).val();
                                    var hideField = $("#" + liId).find('#hideField' + nameOfLabel).val();

                                    var defaultChekboxVal;
                                    if ($("#trForDefaultValue").find('td:last').find('input[type="checkbox"]').length > 0) {
                                            if (defaultValue == 'true')
                                                    $("#trForDefaultValue").find('td:last').find('input[type="checkbox"]').prop('checked', true);
                                            else
                                                    $("#trForDefaultValue").find('td:last').find('input[type="checkbox"]').prop('checked', false);
                                    } else {

                                            if ($('#defaultValue').is('select')) {
                                                    var values = defaultValue;
                                                    $.each(values.split(","), function(i, e) {
                                                            $("#defaultValue option[value='" + e + "']").prop("selected", true);
                                                    });
                                            } else {
                                                    var attrDataFlexControl = $('#defaultValue').attr('data-flexcontrol');
                                                    if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl != '') {
                                                            $('.rating-range-block .star-rating-range').addClass('display-none');
                                                            $('.rating-range-block .nps-rating-range').addClass('display-none');
                                                            switch (attrDataFlexControl) {
                                                                    case "integer-starrating":
                                                                            $('.rating-range-block').removeClass('display-none');
                                                                            $('.rating-range-block .star-rating-range').removeClass('display-none');
                                                                            $('#noOfStars').val($('#defaultValue').attr('data-flex-max'));
                                                                            $('#starMinLabel').val($('#defaultValue').attr('data-flex-minlabel'));
                                                                            $('#starMaxLabel').val($('#defaultValue').attr('data-flex-maxlabel'));
                                                                            break;
                                                                    case "integer-npsrating":
                                                                            $('.rating-range-block').removeClass('display-none');

                                                                            $('.rating-range-block .nps-rating-range').removeClass('display-none');
                                                                            $('#npsMinLabel').val($('#defaultValue').attr('data-flex-minlabel'));
                                                                            $('#npsMiddleLabel').val($('#defaultValue').attr('data-flex-middlelabel'));
                                                                            $('#npsMaxLabel').val($('#defaultValue').attr('data-flex-maxlabel'));

                                                                            break;
                                                                    default:
                                                                            break;
                                                            }
                                                    }

                                                    $('#defaultValue').val(defaultValue);

                                            }
                                    }
                                    var isReference=false;

                                    if ($(fieldliiElement).find('.lookupInput').length > 0) {
                                        isReference=true;
                                    }
                                    if (hideField == "true" || hideField == true) {
                                            $('#hideField').prop('checked', true);
                                            //$('#hideField').change();
                                            isShowLabel = true;
                                              if (isReference) {
                                            toggleVisibilityOnHideFieldChange($('#hideField'),$(fieldliiElement).find('.ExpandDiv'),false);
                                        }
                                    }
                                    
                                    var readOnlyField = $("#" + liId).find('#isReadOnly' + nameOfLabel).val();
                                    if (readOnlyField == "true" || readOnlyField == true) {
                                            $('#readOnlyField').prop('checked', true);
                                            //$('#readOnlyField').change();
                                            $('#defaultValue').removeAttr('disabled');
                                            if (isReference && !$('#trForReadOnlyField').hasClass('elem-disabled')) {
                                            toggleVisibilityOnReadOnlyChange($('#readOnlyField'),$(fieldliiElement).find('.ExpandDiv'),false);
                                        }
                                    } else {
                                            $('#readOnlyField').prop('checked', false);
                                            //$('#readOnlyField').change();
                                            $('#defaultValue').removeAttr('disabled');
                                            if (isReference && !$('#trForReadOnlyField').hasClass('elem-disabled')) {
                                            toggleVisibilityOnReadOnlyChange($('#readOnlyField'),$(fieldliiElement).find('.ExpandDiv'),true);

                                        }
                                    }
                                    //Set default true for hide field if field type is reference and disable hide checkbox
                                    if (isReference) {
                                            //$('#hideField').prop("disabled", true);
                                            //$('#hideField').prop("checked", true);
                                            //$('#hideField').parent().find('label').addClass('checkboxdisabled');

                                            $("#trForDefaultValue").find('td:last').find('input[type="hidden"]').attr('id', 'defaultValueHidden');
                                            var refObjectname='';
                                           refObjectname=$(fieldliiElement).find('div:first label:first').attr('vaobj');
                                           if(!isNullOrEmpty(refObjectname))
                                           {
                                            //if(refObjectname=='Group'){
                                            //    refObjectname='User';
                                           // }

                                            remoteGetSObjectListViewJS(refObjectname,fieldliiElement);
                                           }
                                    }
                                    $('#errMsgForRequiredField').val($("#" + liId).find('#errMsgForRequired' + nameOfLabel).val());

                                    //limit check
                                    $('#limitValue').val($(".uploadboxarea").attr('data-maxfiles'));

                                    //default value
                                    var lblName = $("#" + liId).find('label').attr('id').replace('lbl', '');
                                    var reval = $("#defaultValue").attr('name');
                                    var revalString = $("#defaultValue").attr('name');
                                    revalString = revalString.substring($("#defaultValue").attr('name').lastIndexOf('.') + 1, revalString.length);
                                    reval = $("#defaultValue").attr('name').replace(revalString, lblName);
                                    //alert(reval);
                                    var mainLabelElem = $('#defaultValue').parents('div[class="ExpandDiv"]').parent().find('div:first-child > label:first-child');

                                    // setDefaultValues(reval,this);

                                    if (document.getElementById('defaultValue').addEventListener) {
                                            document.getElementById('defaultValue').addEventListener("keyup", function() {
                                                    // document.getElementById(reval).value = $('#defaultValue').val();
                                                    setDefaultValues(reval, this);
                                                    if ((!$('#defaultValue').val() instanceof Array)) {
                                                            if ($('#defaultValue').val().trim() == "") {
                                                                    $(mainLabelElem).removeClass('grayLabel');
                                                                    /* $('.grayLabel').removeClass('grayLabel');*/
                                                                    /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                                                    $('#hideField').prop('checked', false);
                                                                    $('#hideField').attr('disabled', '');
                                                                    $('#hideField').next().css('pointer-events', 'none');
                                                                    $('#hideField').next().addClass('checkboxdisabled');
                                                            } else {
                                                                    $('#hideField').removeAttr('disabled');
                                                                    $('#hideField').next().removeAttr('style');
                                                                    $('#hideField').next().removeClass('checkboxdisabled');
                                                            }
                                                    }

                                            }, false);
                                    } else {
                                            document.getElementById('defaultValue').attachEvent("onkeyup", function() {
                                                    // document.getElementById(reval).value = $('#defaultValue').val();
                                                    setDefaultValues(reval, this);
                                                    if ((!$('#defaultValue').val() instanceof Array)) {
                                                            if ($('#defaultValue').val().trim() == "") {
                                                                    $(mainLabelElem).removeClass('grayLabel');
                                                                    /* $('.grayLabel').removeClass('grayLabel');*/
                                                                    /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                                                    $('#hideField').prop('checked', false);
                                                                    $('#hideField').attr('disabled', '');
                                                                    $('#hideField').next().css('pointer-events', 'none');
                                                                    $('#hideField').next().addClass('checkboxdisabled');
                                                            } else {
                                                                    $('#hideField').removeAttr('disabled');
                                                                    $('#hideField').next().removeAttr('style');
                                                                    $('#hideField').next().removeClass('checkboxdisabled');
                                                            }
                                                    }

                                            });
                                    }

                                    if (document.getElementById('defaultValue').addEventListener) {
                                            document.getElementById('defaultValue').addEventListener("change", function() {
                                                    addLabel();
                                                    resetSavedButton();

                                                    console.log(" THis Select-" + $(this).is('select'));


                                                    setDefaultValues(reval, this);

                                                    if ((!$('#defaultValue').val() instanceof Array) && $('#defaultValue').val().trim() == "") {

                                                            $(mainLabelElem).removeClass('grayLabel');
                                                            /* $('.grayLabel').removeClass('grayLabel');*/
                                                            /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                                            $('#hideField').prop('checked', false);
                                                            $('#hideField').attr('disabled', '');
                                                            $('#hideField').next().css('pointer-events', 'none');
                                                            $('#hideField').next().addClass('checkboxdisabled');
                                                    } else {
                                                            $('#hideField').removeAttr('disabled');
                                                            $('#hideField').next().removeAttr('style');
                                                            $('#hideField').next().removeClass('checkboxdisabled');
                                                    }

                                            }, false);
                                    } else {
                                            document.getElementById('defaultValue').attachEvent("onchange", function() {
                                                    addLabel();
                                                    resetSavedButton();
                                                    console.log(" THis Select-" + $(this).is('select'));

                                                    setDefaultValues(reval, this);
                                                    if ((!$('#defaultValue').val() instanceof Array) && $('#defaultValue').val().trim() == "") {
                                                            $(mainLabelElem).removeClass('grayLabel');
                                                            /* $('.grayLabel').removeClass('grayLabel');*/
                                                            /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                                            $('#hideField').prop('checked', false);
                                                            $('#hideField').attr('disabled', '');
                                                            $('#hideField').next().css('pointer-events', 'none');
                                                            $('#hideField').next().addClass('checkboxdisabled');
                                                    } else {
                                                            $('#hideField').removeAttr('disabled');
                                                            $('#hideField').next().removeAttr('style');
                                                            $('#hideField').next().removeClass('checkboxdisabled');
                                                    }
                                            });
                                    }
                                    

                                    if (/lblliUPLOAD/i.test(liId)) {


                                            $("#trForDefaultValue").hide();
                                            $("#trForHideField").show();
                                            $("#trForReadOnlyField").hide();
                                            $("#trForCurrencyLabelField").hide();
                                            $("#trForLookupView").hide();

                                            $("#trForFileField").show();
                                            $("#trForLimitField").show();
                                            $("#trForUploadToChatterField").show();
                                            $("#trForUpsertField").hide();

                                            var tempId = liId.replace('lblliUPLOAD', 'FileUploadArea');
                                            $("#limitValue").val($("#" + tempId).attr('data-maxfiles'));

                                            $("#selectedfiletypes").val($("#" + tempId).attr('data-allowedfiletypes'));
                                            $(".fancyheader  span").html($("#selectedfiletypes").val());
                                            if ($("#selectedfiletypes").val() == "") {
                                                    $(".fancyheader  span").html("All");
                                            }
                                            if ($("#selectedfiletypes").val().indexOf(".jpg") >= 0) {
                                                    $("#imgType").prop('checked', true);
                                            }
                                            if ($("#selectedfiletypes").val().indexOf(".doc") >= 0) {
                                                    $("#docType").prop('checked', true);
                                            }
                                            if ($("#selectedfiletypes").val().indexOf(".xls") >= 0) {
                                                    $("#xlsType").prop('checked', true);
                                            }
                                            if ($("#selectedfiletypes").val().indexOf(".zip") >= 0) {
                                                    $("#zipType").prop('checked', true);
                                            }
                                            if ($("#selectedfiletypes").val().indexOf(".pdf") >= 0) {
                                                    $("#pdfType").prop('checked', true);
                                            }
                                            if ($("#selectedfiletypes").val().indexOf(".mp3") >= 0) {
                                                    $("#multiType").prop('checked', true);
                                            }

                                            $("#errMsgForRequiredField").val($("#" + tempId).attr('data-requiredmessage'));

                                            if ($("#" + tempId).attr('data-isrequired')) {
                                                    $('#requiredChk').prop('checked', true);
                                            }
                                            if ($("#" + tempId).attr('data-isrequired') == false || $("#" + tempId).attr('data-isrequired') == "false") {
                                                    $('#requiredChk').prop('checked', false);
                                            }
                                            if ($("#" + tempId).attr('data-uploadtochatter')) {
                                                    $('#chkUploadToChatter').prop('checked', true);
                                            }
                                            if ($("#" + tempId).attr('data-uploadtochatter') == false || $("#" + tempId).attr('data-uploadtochatter') == "false") {
                                                    $('#chkUploadToChatter').prop('checked', false);
                                            }
                                            if($("#" + liId).find('div:first-child > label').hasClass('grayLabel'))
                                            {
                                                setHideFieldForGeneralField(true);
                                            }
                                            else
                                            {
                                                setHideFieldForGeneralField(false);
                                            }

                                    } else {



                                            if ($("#" + liId).find('.lookupInput').length > 0) {
                                                //$("#trForUpsertField").hide();                          
                                                //$("#trForHideField").hide();
                                                //$("#trForReadOnlyField").hide();
                                                $("#trForCurrencyLabelField").hide();     
                                                //$("#trForRequired").hide();
                                                //$("#trForMsgField").hide();   
                                                $("#trForLookupView").show();                                            
                                            } else {
                                                $("#trForUpsertField").show();  
                                                $("#trForLookupView").hide();                      
                                                $("#trForRequired").show();
                                                $("#trForMsgField").show();
                                                $("#trForHideField").show();
                                                $("#trForReadOnlyField").show();                          
                                            }
                                            $("#trForDefaultValue").show();
                                            $("#trForFileField").hide();
                                            $("#trForLimitField").hide();
                                            $("#trForUploadToChatterField").hide();
                                            console.log(' here to add tooltip in edit drawer');
                                            $("#" + liId).find('.expandDiv').find('.field-tooltip-block').remove();
                                            /*   var tooltiphtml = $("<div  />").append($("#" + liId).find('.field-info-tooltip-text').clone()).html();
                                                tooltiphtml="<span  class='field-tooltip-block'>"+tooltiphtml+"</span>";
                                             $("#" + liId).find('#tblForRequirdBlock').before(tooltiphtml);-disable field info popup*/
                                    }

                                    if (/lblliCAPTCHA/i.test(liId)) {
                                            $(".fieldTd").hide();
                                            $("#trForHideField").show();
                                            if($("#" + liId).find('div:first-child > label').hasClass('grayLabel'))
                                            {
                                                setHideFieldForGeneralField(true);
                                            }
                                            else
                                            {
                                                setHideFieldForGeneralField(false);
                                            }
                                            $("#tblForRequirdBlock").slideDown('300');
                                    } else if (/lblliGENERALTEXT/i.test(liId)) {
                                            $(".fieldTd").hide();

                                            $("#trForHideField").show();
                                            if($("#" + liId).find('div:first-child > label').hasClass('grayLabel'))
                                            {
                                                setHideFieldForGeneralField(true);
                                            }
                                            else
                                            {
                                                setHideFieldForGeneralField(false);
                                            }
                                            $("#tblForRequirdBlock").slideDown('300');
                                    } else if (/lblliIMAGE/i.test(liId)) {
                                            $(".fieldTd").hide();
                                            $("#trForHideField").show();
                                            if($("#" + liId).find('div:first-child > label').hasClass('grayLabel'))
                                            {
                                                setHideFieldForGeneralField(true);
                                            }
                                            else
                                            {
                                                setHideFieldForGeneralField(false);
                                            }
                                            $("#tblForRequirdBlock").slideDown('300');
                                    } else {
                                            $(".ExpandDiv").hide();
                                            $(".ExpandDiv").slideDown('300', function() {
                                                    resetFloat();
                                                    goToNextTourStop();
                                            });
                                    }

                                    if (/RecordTypeId/i.test(liId)) {
                                            //$('#hideField').next().addClass('checkboxdisabled');
                                            //$('#hideField').attr('disabled', true);
                                            //$('#hideField').prop('checked', true);
                                    }

                                    $("#" + liId + " .deleteField").hide();
                                    $("#" + liId + " .editImg").css('opacity', '1');
                                    $(".formUlLabel").sortable("option", "disabled", true);
                                    $("#parentUlForm").sortable("option", "disabled", true);
                            } else {
                                    /*if is section*/
                                    var textLbl=$("#"+liId).find('> label').text();//$("#"+liId).find("#"+labelLIId).html();
                        $('#defaultSectionLabel').val(textLbl);
                                    $(".sectionTd").show();
                                    //code to assign value to sectioncheckbox

                                    if ($("#" + liId).parent().hasClass('hideFullSection')) {
                                            $('#chkhideSectionField').prop('checked', true);

                                    }



                                    $(".fieldTd").hide();
                                     
                                    $("#" + dHide).hide();
                                    $("#" + liId + " .editImg").css('opacity', '1');
                                    $("#tblForRequirdBlock").slideDown('300', function() {
                                            goToNextTourStop();
                                    });
                                    $("#parentUlForm").sortable("option", "disabled", true);
                            }


                            $("#trForImageAlignment").hide();
                            $("#trForImageWidth").hide();
                            $("#trForImageHeight").hide();            

                        }
                        $("#hiddenLiId").val(liId);
                        $("#hiddenLiLabelId").val($("#" + liId).find('label').attr('id'));

                        
                }

                if ($("#" + liId).find('.ExpandDiv').length > 0) {
                        $("#" + liId).find('.editImg').unbind('mouseover');
                        $("#" + liId).find('.editImg').unbind('mouseout');
                        //$("#"+liId).find('.editImg').attr('src',editActiveImgUrl);
                } else {
                        //$("#"+liId).find('.editImg').attr('src',editImgUrl);
                        setHover();
                }
              }/* infoIsvalid if  ends*/
            }/* openEditDialog ends*/
            function setHideFieldForGeneralField(check)
            {
                if(check)
                {
                $('#hideField').prop('checked', true);
            }
            else
            {
               $('#hideField').prop('checked', false); 
            }
            }
 function resetSelectValues(thisElement)
{
         if($(thisElement).is('select'))
                                        {
                                             
                                             var selectElement=$(thisElement).parents('.fieldDiv').find('select:first'); 
                                                
                                                if($(thisElement).parents('.fieldDiv').find('div.select2-container').length>0)
                                                {
                                                    $(thisElement).parents('.fieldDiv').find('div.select2-container').remove();
                                                }
                                                if($(thisElement).parents('.fieldDiv').find('div.custom-flex-control-container').length>0)
                                                {
                                                    $(thisElement).parents('.fieldDiv').find('div.custom-flex-control-container').remove();
                                                }
                                                
                                                var selectedValues=$(thisElement).val();
                                                
                                             
                                                
                                                //document.getElementById(reval).value = selectedValue;
                                                if((thisElement.type == 'select-one') ) {
                                                     $(selectElement).find('option').removeAttr("selected");
                                                         $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
                                                         var selectType=$('select.picklist-type-select').val();
                                                         if(selectType=="picklist-combobox")
                                                        {
                                                                $(selectElement).select2();
                                                        }
                                                        else if(selectType=="picklist-radiobutton-vertical")
                                                        {
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'vertical'});
                                                        }
                                                        else if(selectType=="picklist-radiobutton-horizontal")
                                                                {
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'horizontal'});
                                                        }
                                                        else
                                                        {
                                                         /// default
                                                        }
                                                         //$(selectElement).select2("val",selectedValue);
                                                 }
                                                 else if((thisElement.type == 'select-multiple') ) 
                                                 {
                                                     $(selectElement).find('option').removeAttr("selected");
                                                        if(selectedValues instanceof Array && selectedValues.length>0)
                                                        {
                                                        $.each( selectedValues, function( key, value ) {
                                                                 $(selectElement).find('option[value="'+value+'"]').attr('selected','selected');
                                                                });
                                                        }
                                                        else
                                                        {
                                                                $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
                                                        }
                                                         var selectType=$('select.multi-picklist-type-select').val();
                                                        if(selectType=="multipicklist-multi-tags-check")
                                                        {
                                                                $(selectElement).select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
                                                        }
                                                        else if(selectType=="multipicklist-multi-tags")
                                                        {
                                                                 $(selectElement).select2();
                                                        }
                                                        else if(selectType=="multipicklist-checkbox-vertical")
                                                        {
                                                                 
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'vertical'});
                                     
                                                        }
                                                        else if(selectType=="multipicklist-checkbox-horizontal")
                                                        {
                                                                 
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'horizontal'});
                                     
                                                        }
                                                        else
                                                        {
                                                         /// default
                                                        }
                                                 }
                                                    
                                        }
                                        
}
function setDefaultValues(reval,thisElement)
{
         if($(thisElement).is('select'))
                                        {
                                             
                                             var selectElement=$(thisElement).parents('.fieldLi').find('.fieldDiv').find('select:first'); 
                                                
                                                if($(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').length>0)
                                                {
                                                    $(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').remove();
                                                }
                                                if($(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').length>0)
                                                {
                                                    $(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').remove();
                                                }
                                                
                                                var selectedValues=$('#defaultValue').val();
                                                
                                             
                                                
                                             console.log(' setDefaultValues'+thisElement.type);
                                                
                                                //document.getElementById(reval).value = selectedValue;
                                                if((thisElement.type == 'select-one') ) {
                                                        
                                                     $(selectElement).find('option').removeAttr("selected");
                                                         $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
                                                         var selectType=$('select.picklist-type-select').val();
                                                         console.log(' selectType 1-'+selectType);
                                                         if(selectType=="picklist-combobox")
                                                        {
                                                                    console.log('  Picklist combobox 1');
                                                                $(selectElement).select2();
                                                        }
                                                        else if(selectType=="picklist-radiobutton-vertical")
                                                        {
                                                                console.log('  Picklist radio button list 1');
                                                                $(selectElement).SelectToRadio('destroy');
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'vertical'});
                                                        }
                                                        else if(selectType=="picklist-radiobutton-horizontal")
                                                                {
                                                                        console.log(' Picklist radio button list 2');
                                                                        $(selectElement).SelectToRadio('destroy');
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'horizontal'});
                                                        }
                                                        else
                                                        {
                                                        console.log(' selectType-'+selectType);
                                                        }
                                                         //$(selectElement).select2("val",selectedValue);
                                                 }
                                                 else if((thisElement.type == 'select-multiple') ) 
                                                 {
                                                         /* selectedValues = [];
                                                        $.each($("#defaultValue").find('option'), function(){            
                                                             if($(this).attr('selected')=='selected'){ selectedValues.push($(this).attr('value'));}
                                                        });*/
                                                     $(selectElement).find('option').removeAttr("selected");
                                                        if(selectedValues instanceof Array && selectedValues.length>0)
                                                        {
                                                        $.each( selectedValues, function( key, value ) {
                                                                 $(selectElement).find('option[value="'+value+'"]').attr('selected','selected');
                                                                });
                                                        }
                                                        else
                                                        {
                                                                $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
                                                        }
                                                         var selectType=$('select.multi-picklist-type-select').val();
                                                         $(selectElement).SelectToRadio('destroy');
                                                            $(selectElement).removeClass('custom-select-offscreen');
                                                        if(selectType=="multipicklist-multi-tags-check")
                                                        {
                                                                 
                                                                $(selectElement).select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
                                                        }
                                                        else if(selectType=="multipicklist-multi-tags")
                                                        {
                                                                 
                                                                 $(selectElement).select2();
                                                        }
                                                        else if(selectType=="multipicklist-checkbox-vertical")
                                                        {

                                                                
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'vertical'});
                                                        }
                                                        else if(selectType=="multipicklist-checkbox-horizontal")
                                                        {

                                                                
                                                                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'horizontal'});
                                                        }
                                                        else
                                                        {
                                                         /// default
                                                        }
                                                 }
                                                 else{
                                                        
                                                 }
                                                    
                                        }
                                        else
                                        {
                                                document.getElementById(reval).value = $(thisElement).val();
                                                var attrDataFlexControl = $(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol');
                                                                if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
                                                                        switch (attrDataFlexControl) 
                                                                        {     
                                                                                case "integer-starrating":
                                                                                        var noofitems=$('#noOfStars').val();                    
                                                                                        var minlabel=$('#starMinLabel').val();
                                                                                        var maxlabel=$('#starMaxLabel').val();
                                                                                        setRatingInput($(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,'',maxlabel,attrDataFlexControl);
                                                                                        break;
                                                                                case "integer-npsrating":
                                                                                var minlabel=$('#npsMinLabel').val();
                                                                                        var middlelabel=$('#npsMiddleLabel').val();
                                                                                        var maxlabel=$('#npsMaxLabel').val();
                                                                                        setRatingInput($(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,middlelabel,maxlabel,attrDataFlexControl);
                                                                                                                                
                                                                                        break;
                                                                                default:
                                                                                 setRatingInput($(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),'','','','',attrDataFlexControl);
                                                                                break;
                                                                        }
                                                                }
                                                
                                        }
}
                function showDisplayAsControl(show,dataType)
                {
                         
console.log(' showDisplayAsControl - '+dataType);
                        $("#trForDisplayType").find('.flex-ctrl-display-as').each(function (indx, flexControlDiv) {
                                if(!$( flexControlDiv).hasClass('display-none'))
                                {
                                        $( flexControlDiv).addClass('display-none');
                                }
                         });

                        var showFlexControl=false;
                        if(show)
                        {
                                
                                switch (dataType) {     
                                case "INTEGER":
                                        showFlexControl=true;
                                        console.log(' Integer dataType-'+dataType);
                                        $("#trForDisplayType").find('.integer-display-type').removeClass('display-none');
                                        break;
                                case "PICKLIST":
                                         showFlexControl=true;
                                         console.log('Picklist dataType-'+dataType);
                                         $("#trForDisplayType").find('.picklist-display-type').removeClass('display-none');
                                        break;
                                case "MULTIPICKLIST":
                                         showFlexControl=true;
                                         console.log('MPicklist dataType-'+dataType);
                                     $("#trForDisplayType").find('.multi-picklist-display-type').removeClass('display-none');
                                        break;
                                        default:
                                        console.log('Default  dataType-'+dataType);
                                        break;
                                }
                        }
                        if(show && showFlexControl)
                        {
                                $("#trForDisplayType").show();
                        
                        }
                        else
                        {
                                $("#trForDisplayType").hide();
                        }
                }
                function changeDisplayType(elemSource){
                        var selectedValue=   $(elemSource).val();

                     <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">   
                        if (selectedValue != 'picklist-default' && selectedValue != 'multipicklist-default' && selectedValue != 'integer-default') {
                            var controlName=$(elemSource).find('option:selected').text();
                            if(isNullOrEmpty(controlName))
                            {
                                controlName='This display';
                            }
                                upgradeNowMessage(controlName+' type is only available in Professional or Enterprise editions of Fast Forms.','','');
                                $(elemSource).prop('selectedIndex',0);
                        }
                     </apex:outputText>

                     <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                        
                        if($(elemSource).hasClass('integer-type-select'))
                        {
                        var parentRatingRangeBlock= $(elemSource).parent().find('.rating-range-block');
                         if(selectedValue!='integer-default')
                         {
                                                                
                             $(parentRatingRangeBlock).find('div.rating-range').addClass('display-none');
                             $(parentRatingRangeBlock).removeClass('display-none');
                                if(selectedValue=='integer-npsrating')
                                {
                                         $(parentRatingRangeBlock).find('div.star-rating-range').addClass("display-none");
                                         $(parentRatingRangeBlock).find('div.nps-rating-range').removeClass("display-none");
                                         $(parentRatingRangeBlock).find('div.nps-rating-range div.rating-range').removeClass('display-none');
                                         //$(parentRatingRangeBlock).find('.star-rating-range').removeClass('display-none');
                                         setUpFlexControl(selectedValue,elemSource);
                                }
                                else if(selectedValue=='integer-starrating')
                                {
                                        $(parentRatingRangeBlock).find('div.nps-rating-range').addClass("display-none");
                                        $(parentRatingRangeBlock).find('div.star-rating-range').removeClass('display-none');
                                        $(parentRatingRangeBlock).find('div.star-rating-range div.rating-range').removeClass('display-none');
                                         setUpFlexControl(selectedValue,elemSource);
                                }
                         }
                         else
                         {
                                 $(parentRatingRangeBlock).addClass('display-none');
                                 setUpFlexControl(selectedValue,elemSource);
                         }
                         
                        }
                        else if($(elemSource).hasClass('picklist-type-select'))
                        {
                                setUpFlexControl(selectedValue,elemSource);
                        }
                        else if($(elemSource).hasClass('multi-picklist-type-select'))
                        {
                                setUpFlexControl(selectedValue,elemSource);
                        }

                        resetSavedButton();
                        mixpanel.track('Field display as option changed',{ "Field ID": $(elemSource).parent().attr('id')});
                        var metadata = {
                          field_name: $(elemSource).parent().attr('id'),
                          display_as: selectedValue
                        };
                        Intercom('trackEvent', 'changed-field-display-as', metadata);
                        </apex:outputText>            
                }
                 
                function setUpFlexControl(controlType,elemSource){
                        var readonly=  $('#readOnlyField').prop('checked');
                     var parentFieldLi= $(elemSource).parents('.fieldLi');
                        switch (controlType) {     
                                case "picklist-default":
                                console.log(' Picklist default ');
                             destroySelectToRadio($(parentFieldLi).find('.fieldDiv'));
                                destroySelect2($(parentFieldLi).find('.fieldDiv'));  
                                $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','picklist-default');
                                        
                                        break;
                                case "picklist-combobox":
                                console.log(' Picklist combobox ');
                                reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),false,true,'','');
                             destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','picklist-combobox');
                                $(parentFieldLi).find('.fieldDiv').find('select:first').select2();                
                                
                                        break;
                                case "picklist-radiobutton-vertical":
                                        console.log(' Picklist radiobutton ');
                                        destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                         reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-radio','vertical'); 
                                     break;
                             case "picklist-radiobutton-horizontal":
                                             destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                             reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-radio','horizontal');
                                                
                                             break;
                                case "multipicklist-default":
                                        console.log(' multipicklist default ');
                                        destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                        reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,true,'ff-ext-checkbox');
                                        $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','multipicklist-default');
                                        break;
                                case "multipicklist-checkbox-vertical":
                                        console.log(' multipicklist checkbox ');
                                         destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                        reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-checkbox','vertical');
                                        break;
                                case "multipicklist-checkbox-horizontal":
                                        console.log(' multipicklist checkbox ');
                                         destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                        reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-checkbox','horizontal');
                                        break;
                                case "multipicklist-multi-tags":
                                        console.log(' multipicklist tags ');
                                        destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                        reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,true,'','');
                                        $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','multipicklist-multi-tags');
                                        $(parentFieldLi).find('.fieldDiv').find('select:first').select2();
                                        break;
                                case "multipicklist-multi-tags-check":
                                        console.log(' multipicklist tags with checkbox ');
                                        destroySelect2($(parentFieldLi).find('.fieldDiv'));
                                        reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,true,'','');
                                        $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','multipicklist-multi-tags-check');
                                        $(parentFieldLi).find('.fieldDiv').find('select:first').select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
                                        break;  
                                case "integer-default":
                                        console.log(' integer- default ');
                                        $(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol','integer-default');
                                        setRatingInput($(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first'),'','','','',controlType);
                                        break;
                                case "integer-npsrating":
                                        console.log(' integer-npsrating ');
                                        
                                        
                                        var minlabel=$('#npsMinLabel').val();
                                        var middlelabel=$('#npsMiddleLabel').val();
                                        var maxlabel=$('#npsMaxLabel').val();
                                        $(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol','integer-npsrating');
                                        setRatingInput($(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,middlelabel,maxlabel,controlType);
                                        break;
                                case "integer-starrating":
                                        console.log(' integer-starrating ');
                                        var noofitems=$('#noOfStars').val();
                                        
                                        var minlabel=$('#starMinLabel').val();
                                        var maxlabel=$('#starMaxLabel').val();
                                        $(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol','integer-starrating');
                                        setRatingInput($(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,'',maxlabel,controlType);
                                        break;
                                default:
                                        console.log(' In default ');
                                        break;
                                }
                }
                 function changeInputRatingAttrs(elementSource)
                 {
                        var controltype='';
                                if($(elementSource).parent().hasClass('star'))
                                {
                                        
                                        controltype='integer-starrating';
                                        var noofitems=$('#noOfStars').val();
                                        
                                        var minlabel=$('#starMinLabel').val();
                                        var maxlabel=$('#starMaxLabel').val();
                                        setRatingInput($(elementSource).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,'',maxlabel,controltype);
                                }
                                else if($(elementSource).parent().hasClass('nps'))
                                {
                                        controltype='integer-npsrating';
                                         var minlabel=$('#npsMinLabel').val();
                                        var middlelabel=$('#npsMiddleLabel').val();
                                        var maxlabel=$('#npsMaxLabel').val();
                                        setRatingInput($(elementSource).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,middlelabel,maxlabel,controltype);
                                }
                                else
                                {
                                        setRatingInput($(elementSource).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),'','','','',controltype);
                                }
                                mixpanel.track('Field rating attributes changed',{ "Field ID": $(elemSource).parent().attr('id')});
                                
                        resetSavedButton();  

                 }
                         
                         /*Main method to intialize Star and NPS rating control
-It first detory anu existing custom display type Div and then initialize the input element with new control type 
                         */   
                function setRatingInput(inputElement,noofitems,minlabel,middlelabel,maxlabel,controltype){
                        
                         <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                        resetFlexInputForFM(inputElement);
                                        </apex:outputText> 
                                 var readOnly=false;
                                 switch (controltype) {     
                                        case "integer-starrating":
                                                if(noofitems=='')
                                                {
                                                        noofitems=5;
                                                        $('#noOfStars').val('5');
                                                }
                                                $(inputElement).ffrating('destroy');
                                                $(inputElement).attr('data-flexcontrol',controltype);
                                                $(inputElement).attr('data-flex-min',1);
                                                $(inputElement).attr('data-flex-max',noofitems);
                                                $(inputElement).attr('data-flex-minlabel',minlabel);
                                                $(inputElement).attr('data-flex-maxlabel',maxlabel); 
                                                if ( $(inputElement).is('[readonly]') ) 
                                                        { 
                                                                readOnly=true;
                                                        }
                                                $(inputElement).ffrating('show', {readonly:true,showSelectedRating:true});
                                        break;
                                        case "integer-npsrating":
                                                $(inputElement).ffrating('destroy');
                                                $(inputElement).attr('data-flexcontrol',controltype);
                                                $(inputElement).attr('data-flex-min',0);
                                                $(inputElement).attr('data-flex-middle',5);
                                                $(inputElement).attr('data-flex-max',10);
                                                $(inputElement).attr('data-flex-minlabel',minlabel);
                                                $(inputElement).attr('data-flex-middlelabel',middlelabel);
                                                $(inputElement).attr('data-flex-maxlabel',maxlabel); 

                                                 if ( $(inputElement).is('[readonly]') ) 
                                                        { 
                                                                readOnly=true;
                                                        }
                                                $(inputElement).ffrating('show', {readonly:true,isStar:false});
                                        break;
                                        default:
                                        $(inputElement).ffrating('destroy');
                                        if($(inputElement).hasClass('custom-flexcontrol-offscreen'))
                                        {
                                                $(inputElement).removeClass('custom-flexcontrol-offscreen');
                                        }
                                        
                                        break;
                                }
                         
                }
                function resetFlexSelectByParentLiForFM(parentFieldLi)
                {
                    var inputElement=$(parentFieldLi).parents('.fieldLi');
                    if($(parentFieldLi).hasClass('sortableForRelFields1') && !isNullOrEmpty($(inputElement).attr('data-flexcontrol')) && $(inputElement).attr('data-flexcontrol')!='picklist-default')
                    {
                        $(parentFieldLi).find('.editDelDiv .freemium-edit-block').remove();
                       var lockHtml=getFreemiumHTML('Flexible controls are','freemium-edit-block','');

                       $(parentFieldLi).find('.editDelDiv').prepend(lockHtml);
                    }
                }
                function resetFlexSelectForFM(inputElement)
                {
                    var parentFieldLi=$(inputElement).parents('.fieldLi');
                    if($(parentFieldLi).hasClass('sortableForRelFields1') && !isNullOrEmpty($(inputElement).attr('data-flexcontrol')) && $(inputElement).attr('data-flexcontrol')!='picklist-default' && $(inputElement).attr('data-flexcontrol')!='multipicklist-default')
                    {
                        $(parentFieldLi).find('.editDelDiv .freemium-edit-block').remove();
                        var controlType=flexControlDisplayName($(inputElement).attr('data-flexcontrol'),'This display');
                       var lockHtml=getFreemiumHTML(controlType+' type is','freemium-edit-block','');

                       $(parentFieldLi).find('.editDelDiv').prepend(lockHtml);
                    }
                }
                function resetFlexInputForFM(inputElement)
                {
                    var parentFieldLi=$(inputElement).parents('.fieldLi');
                    if($(parentFieldLi).hasClass('sortableForRelFields1') && !isNullOrEmpty($(inputElement).attr('data-flexcontrol')) && $(inputElement).attr('data-flexcontrol')!='integer-default')
                    {
                        $(parentFieldLi).find('.editDelDiv .freemium-edit-block').remove();
                         var controlType=flexControlDisplayName($(inputElement).attr('data-flexcontrol'),'This display');
                       var lockHtml=getFreemiumHTML(controlType+' type is','freemium-edit-block','');

                       $(parentFieldLi).find('.editDelDiv').prepend(lockHtml);
                    }
                }
                function expandDiv(){
                        //$('#FormatToolbar').css('height','170px');
                }
                function destroySelect2(parentSelectElement)
                {
                         $(parentSelectElement).find('select:first').select2('destroy'); 
                            $(parentSelectElement).find('div.select2-container').remove();
                            $(parentSelectElement).find('select:first').removeClass('select2-offscreen');
                }
                function destroySelectToRadio(parentSelectElement)
                {
                        $(parentSelectElement).find('select:first').SelectToRadio('destroy');  
                        $(parentSelectElement).find('select:first').removeClass('custom-select-offscreen');
                        
                }
                function reinitializeRatingElement(inputElementParent)
                {
                             
                                    var inputElement=$(inputElementParent).find('>input[type="textbox"]:first');   
                                    
                        var attrDataFlexControl = $(inputElement).attr('data-flexcontrol');
                        if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
                                switch (attrDataFlexControl) 
                                {     
                                        case "integer-starrating":
                                     var noofitems=$(inputElement).attr('data-flex-max');
                                     var minlabel=$(inputElement).attr('data-flex-minlabel');
                                     var maxlabel=$(inputElement).attr('data-flex-maxlabel');

                                        setRatingInput($(inputElement),noofitems,minlabel,'',maxlabel,attrDataFlexControl);
                                     // $('.rating-range-block').removeClass('display-none');
                                         //   $('.rating-range-block .star-rating-range').removeClass('display-none'); 
                                                break;
                                        case "integer-npsrating":
                                        var minlabel=$(inputElement).attr('data-flex-minlabel');
                                     var maxlabel=$(inputElement).attr('data-flex-maxlabel');
                                                var middlelabel=$(inputElement).attr('data-flex-middlelabel');
                                                setRatingInput($(inputElement),'',minlabel,middlelabel,maxlabel,attrDataFlexControl);
                                                //$('.rating-range-block').removeClass('display-none');
                                             // $('.rating-range-block .nps-rating-range').removeClass('display-none'); 
                                                break;
                                        default:
                                        setRatingInput($(inputElement),'','','','',attrDataFlexControl);
                                        break;
                                }
                        }

                }
                function reinitializeSelectToRadioElement(selectedcontrolType,selectElementParent,readOnly,destroyOnly,displayType,controlAlignment)
                {
                        var controltype=selectedcontrolType;
                        var displaytype=displayType;
                        var controlalignment=controlAlignment;
                        
                        
                     console.log(' reinitializeSelectToRadioElement controltype '+controltype);
                                $(selectElementParent).find('select:first').SelectToRadio('destroy');  
                                /* just remove custom style list if destroy doesn't work just in case*/
                                $(selectElementParent).find('div.custom-flex-control-container').remove();
                                $(selectElementParent).find('select:first').removeClass('custom-select-offscreen');
                                if(!destroyOnly)
                                {
                                        var flexcontrolattr=       $(selectElementParent).find('select:first').attr('data-flexcontrol');
                                        if(controltype=='')
                                        {
                                                         controltype=  flexcontrolattr;// $(selectElementParent).find('select:first').attr('data-flexcontrol');
                                        }
                                        if(controlalignment=='')
                                        {
                                                 
                                                 if(flexcontrolattr.indexOf('multipicklist-')>=0)
                                                 {
                                                        
                                                            controlalignment=controltype.replace('multipicklist-checkbox-','');
                                                 }
                                                 else
                                                 {
                                                    console.log(' ALIGNMENT changed-'+controltype);
                                                        controlalignment=controltype.replace('picklist-radiobutton-','');
                                                 }
                                        }
                                        
                                        if(displaytype=='' )
                                        {
                                                 
                                                 if(flexcontrolattr.indexOf('multipicklist-')>=0)
                                                 {
                                                        displaytype='ff-ext-checkbox'; 
                                                 }
                                                 else
                                                 {
                                                        displaytype='ff-ext-radio'; 
                                                 }
                                        }

                                        $(selectElementParent).find('select:first').SelectToRadio({controlType:displaytype,alignment:controlalignment,readonly:readOnly});
                                        $(selectElementParent).find('select:first').attr('data-flexcontrol',controltype);
                                }
                }
                function callDiv(){
                        //$('#FormatToolbar').css('height','101px');
                }
                function formatIframeLoaded(containerId, lblId,isFieldLabel){
                        var backColor = '\'#e6ecef !important;\'';
                        var textLbl=$("#"+containerId).find("#"+lblId).html();
                        /*window.frames['FormatToolbar'].document.getElementById('editor').innerHTML=textLbl;
                        if(isShowLabel){
                                //$(window.frames["FormatToolbar"].document).find('.fieldLabel').after('<label style="padding-left:20px;color: #616161;font-size: 11px;"><i>Field will not be visible to user</i></label>');
                                window.frames['FormatToolbar'].document.getElementById('hideText').innerHTML  = '<i>Field will not be visible to user</i>';
                        }*/
                }         
                //save label with field default values and required,hide values
                function addLabel() {
                    /**/
        var fieldLabelHtml =$('#defaultLabel').val(); 
        $("#tempBlockQuotesHide").html(fieldLabelHtml);
        $("blockquote").contents().unwrap();
        fieldLabelHtml = $("#tempBlockQuotesHide").html();
        var liId = $("#hiddenLiId").val();
        $("#labelDiv").html(fieldLabelHtml);
        if ($("#labelDiv").has("h1,h2,h3").length) {
                if ($("#labelDiv").find("h1,h2,h3").attr('align') != undefined)
                        $("#" + $("#hiddenLiId").val()).css("text-align", $("#labelDiv").find("h1,h2,h3").attr('align'));
                else if ($("#labelDiv").find("h1,h2,h3").css('text-align') != "undefined")
                        $("#" + $("#hiddenLiId").val()).css("text-align", $("#labelDiv").find("h1,h2,h3").css('text-align'));
        } else {
                $("#" + $("#hiddenLiId").val()).css("text-align", '');
        }
          /*lblliIMAGE check added to fix #190 issue on Sep 17 2015*/
        if (!(/lblliIMAGE/i.test(liId)) && (fieldLabelHtml == "" || fieldLabelHtml == "<br>" || fieldLabelHtml == "Please enter a label.")) {
               
                isError = false;
        } else if (/lblUPLOAD/i.test(liId)) {
                if ($('#selectedfiletypes').val() == '' || $("#limitValue").val() == '') {
                        isError = false;
                }
        } else {        
                var nameOfLabel = $("#hiddenLiLabelId").val().replace('lbl', '');
                var htmlForli = '<li id="' + idCounter + 'sortableForLabelli"';
                if ($("#" + liId).parent().hasClass('formUlLabel') == false)
                        htmlForli += 'style="background:#96cdd7;" class="lbl sectionHeader"';
                else
                        htmlForli += 'class="lbl"';
                 
                htmlForli += ' ondblclick="editFFLabel(this);" > <div class="handler" ><label style="font-weight:bold;" id="' + idCounter + 'label">' + fieldLabelHtml + '</label><div style="float:left"><img id="' + idCounter + 'sortableForLabelli" src="http://www.icondig.com/data/icons/picol/icons/edit_32.png" width="18px" height="18px" onclick="openEditDialog(this.id,false);"></div><img id="deleteLabel' + idCounter + '" class="deleteField" onclick="deleteSectoionLabel(this.id);" src="' + deleteImgUrl + '"/></div></li>';
                
                if ($("#hiddenLiId").val() == "") {
                        $("#parentUlForm").append(htmlForli);
                        idCounter++;
                } else {
                        if (/lblliUPLOAD/i.test(liId)) {
                                var tempId = liId.replace('lblliUPLOAD', 'FileUploadArea');
                                $("#" + liId).find("#" + tempId).attr('data-maxfiles', $("#limitValue").val());
                                $("#" + liId).find("#" + tempId).attr('data-allowedfiletypes', $("#selectedfiletypes").val());
                                $("#" + liId).find("#" + tempId).attr('data-requiredmessage', $("#errMsgForRequiredField").val());
                                $("#" + liId).find("#" + tempId).attr('data-isrequired', $('#requiredChk').prop("checked"));
                                $("#" + liId).find("#" + tempId).attr('data-uploadtochatter', $('#chkUploadToChatter').prop("checked"));
                        } else if (/lblliIMAGE/i.test(liId)) {                
                                var tempId = liId.replace('lblliIMAGE', 'imgIMAGE');
                                $("#" + liId).find("#" + tempId).attr('width', $("#imgWidthValue").val());
                                $("#" + liId).find("#" + tempId).attr('height', $("#imgHeightValue").val());
                                $("#" + liId).find("#" + tempId).parents('#divFieldIMAGE').css('text-align', $("#ddlImageAlignment").val());
                        }
                        var tempId = $("#hiddenLiLabelId").val()
                        $("#" + liId).find("#" + tempId).html(fieldLabelHtml);
                        $("#" + liId).find('#isDefaultRequired' + nameOfLabel).val($('#requiredChk').prop("disabled"));
                        $("#" + liId).find('#isUserSelectedRequired' + nameOfLabel).val($('#requiredChk').prop("checked"));
                        $("#" + liId).find('#errMsgForRequired' + nameOfLabel).val($('#errMsgForRequiredField').val());
                        var defaultValue, upsertValue;
                        if ($('#defaultValue').attr('type') == 'checkbox') {
                                defaultValue = $('#defaultValue').prop('checked');
                        } else if ($('#defaultValue').attr('multiple') == 'multiple' && $('#defaultValue').val() != '' && $('#defaultValue').val() != null) {
                                defaultValue = $('#defaultValue').val().join(';');
                        } else {
                                defaultValue = $('#defaultValue').val();
                        }
                        if ($('#upsertField').attr('type') == 'checkbox') {
                                upsertValue = $('#upsertField').prop('checked');
                        } else {
                                upsertValue = $('#upsertField').val();
                        }

                        $("#" + liId).find('#hideField' + nameOfLabel).val($('#hideField').prop("checked"));
                     

                        $("#" + liId).find('#isReadOnly' + nameOfLabel).val($('#readOnlyField').prop("checked"));
                       

                     
                        if ($("#" + liId).find('.fieldDiv > input[type="checkbox"]').length > 0) {
                                if (defaultValue == 'true' || defaultValue) {
                                        $("#" + liId).find('.fieldDiv > input[type="checkbox"]').attr('checked', 'checked');
                                } else
                                        $("#" + liId).find('.fieldDiv > input[type="checkbox"]').removeAttr('checked');
                        } else if ($("#" + liId).find('.fieldDiv > select').length > 0) {
                                $("#" + liId).find('.fieldDiv > select').find('option').each(function () {
                                        if ($(this).attr('value') == defaultValue)
                                                $(this).attr('selected', 'true');
                                });
                        } else if ($("#" + liId).find('.fieldDiv > textarea').length > 0) {
                                $("#" + liId).find('.fieldDiv > textarea').text(defaultValue);
                        } else if ($("#" + liId).find('.fieldDiv .lookupInput > input[type="hidden"]').length > 0) {         
                                        $("#" + liId).find('.fieldDiv .lookupInput > input[type="hidden"]').attr('value', $('#defaultValueHidden').val());
                                        $("#" + liId).find('.fieldDiv .lookupInput > input[type="textbox"]').attr('value', defaultValue);
                        } else {
                                if ($("#" + liId).find('.fieldDiv > input[type="hidden"]').length > 0)
                                        $("#" + liId).find('.fieldDiv > input[type="hidden"]').attr('value', $('#defaultValueHidden').val());

                                $("#" + liId).find('.fieldDiv > input[type="textbox"]').attr('value', defaultValue);
                        }
                        
                        $("#" + liId).find("#defaultValue" + nameOfLabel).val(defaultValue);
                        $("#" + liId).find("#upsertField" + nameOfLabel).val(upsertValue);
                        makeAllLiHeightEqual();
                }
                
                $("#fieldLabelTxt").val('');
        }
        addRequiredMarkOnLabel();
        }
                
                function addNewLiItem(){
                        //calculate Li Index             
                }
                function addNewSectionDetail(){
                        resetSavedButton();
                        initScrollbar();   
                        var nextCounter=nextSectionCounter();          
                        var liId = idCounter+ 'sortableForLabelli';
                        /*var imgUrl = "{!URLFOR($Resource.iconImages,'Edit.png')}";*/
                        var imgUrl = "{!URLFOR($Resource.alpha,'blank.png')}";
                         
                        var ulHtml = '<li><table class="mainTable" width="100%"><tr><td width="100%"><ul class="formUlLabel" id="labelformUl'+ nextCounter+'" ><li class="lbl sectionDisabled"    id="'+liId+'"><label id="sectionLabel'+nextCounter + '" ondblclick="editFFSection(this);" class="ff-section-header">New Section Title</label> <div class="editDelDiv"><img id="deleteFormUl'+ nextCounter+'" class="deleteField" onclick="deleteSection(this);" src="'+deleteImgUrl+'"/><img class="editImg" src="'+ imgUrl +'" onclick="openEditDialog(\''+liId +'\',false);" /></div></li></ul></td></tr></table> </li>';
                        idCounter++;
                        if($( "#parentUlForm" ).find('.addNewSection').length>0){
                                var idx = $( "#parentUlForm" ).find('.addNewSection').index();
                                idx = idx+1;
                                $("#parentUlForm>li:nth-child("+idx +")").before(ulHtml);
                        }
                        else if($("#parentUlForm").find(">li.Ulbtn").length>0)
                        {
                            var idx = $( "#parentUlForm" ).find('>li.Ulbtn').index();
                                idx = idx+1;
                                $("#parentUlForm>li:nth-child("+idx +")").before(ulHtml);
                        }                                                                           
                        else
                            {   
                                $("#parentUlForm").append(ulHtml);
                            }
                        sectionCounter++;
                        if($("#parentUlForm").find(">li>ul").find('ul.formUlLabel').length>0)
                                $("#parentUlForm").find(">li>ul").find('ul.formUlLabel').parent().parent().parent().parent().parent().remove();
                                 
                        makeFormSortable();            
                        setHover();
                }
                 function nextSectionCounter(){
                 var  numberofsections=0;
                 
                 $("#parentUlForm li ul li label.ff-section-header").each(function() {
        
        numberofsections+=1;
        console.log(' numberofsections '+numberofsections);
});
                //if there were multiple sections created previously,
                //this ID might already be in use
                //let's continue to add until we get another one
                 while( $('#sectionLabel'+numberofsections).length ){
                        numberofsections+=1;
                 }
                
                 return numberofsections;
                 }
                 
                function openNewButtonDialog(){
                if(footerBtnHTMLPopulated==false)
                {
                        $('#hiddenLiId').val('');
                        //submit Button text
                        $("#btnTxt").val('Send') ;
                        $("#txtbxSubmitButtonLabel").val('Send') ;
                        $("#btnUrl").val('');
                        $("#txtareaThankyoumsg").val("Thank you for your submission!");
                        $("#tblForRequirdBlock").hide();
                        $("#btnUrl").val('') ;
                        $("#btnFootnote").val('- required');
                        $("#submitBehaviorOptions").val('Display a message') ;
                        $("#submitBehaviorOptions").change();
                        }
                }
                var isbtnSection=true;
                function openBtnEditDialog(liId){             
                        //resetSavedButton();
                        $("#btnTxt").removeClass('errorMsg');
                        if($("#"+$("#hiddenLiId").val()).find(".ExpandDiv").length>0){
                                addLabel();
                                $(".ExpandDiv").remove();
                                         
                        }
                        if($(".Ulbtn").find(".expandBtnDiv").length==0){
                                var btnDialogHtml = $( '#buttonDialog' ).html();
                                $( '#buttonDialog' ).html('');
                                $(".Ulbtn").append('<div class="expandBtnDiv">'+btnDialogHtml+'</div>') ;
                                bindMsgAndLinkFoucusEvent();
                        }
                        $("#submitBehaviorOptions").change();
                        if($(".expandBtnDiv").is(":visible")){              
                                saveButton();
                                if(isbtnSection){
                                        $('.arrowbtnUp').unbind('click');                     
                                        $("#btnTxt").removeClass('errorMsg');
                                        $(".arrowbtnUp").hide();
                                        $(".expandBtnDiv table").slideUp('300', function() {
                                                goToNextTourStop();
                                        });                    
                                        setTimeout(function(){$(".expandBtnDiv").hide()},300);
                                        setTimeout(function(){$("#"+liId).find('.editImg').removeClass('togHoverActive');$("#"+liId).find('.editImg').removeAttr('style');},300);
                                        //setTimeout(function(){$("#"+liId).find('.editImg').attr('src',"{!URLFOR($Resource.iconImages,'expand.png')}")},300);
                                        $("#sortableForRelFields1.dropfields" ).sortable( "option", "disabled", false );                 
                                        $(".formUlLabel" ).sortable( "option", "disabled", false );
                                        $("#parentUlForm" ).sortable( "option", "disabled", false );                     
                                }                             
                        }else{
                                 
                                $(".arrowbtnUp").show();
                                $("#tempBtnDialogHtml").html()
                                $("#hiddenLiId").val(liId);
                                $("#hiddenLiButtonId").val( $( "#"+liId ).find( 'input[type="button"]').attr('id'));
                                $("#btnFootnote").val($( "#"+liId ).find('.footnoteDiv label').text());         
                                $("#btnTxt").val($("#"+liId).find('input[type="button"]').val()) ;
                                $("#txtbxSubmitButtonLabel").val($("#"+liId).find('input[type="button"]').val()) ;
                                $("#btnUrl").val( $( "#"+liId ).find( 'input[type="button"]' ).attr('btnUrl'));
                                $("#txtbxRedirectUrl").val( $( "#"+liId ).find( 'input[type="button"]' ).attr('btnUrl'));

                                if ($("#txtbxRedirectUrl").val() != "")
                                {
                                        $('a[href$="#formconfirmationRadio1"]').parent().removeClass('active');
                                        $('a[href$="#formconfirmationRadio2"]').parent().addClass('active')
                                        $('#formconfirmationRadio1').removeClass('active in');
                                        $('#formconfirmationRadio2').addClass('active in');            
                                }   
                                                        

                                $("#BtnMessage").val($( "#"+liId ).find( 'input[type="button"]' ).attr('btnMessage')) ;
                                $("#txtareaThankyoumsg").val($( "#"+liId ).find( 'input[type="button"]' ).attr('btnMessage')) ;
                                $("#submitBehaviorOptions").val($( "#"+liId ).find( 'input[type="button"]' ).attr('btnSubmitBehavior')) ;
                                $("#btnSendNotificatonEmail").val($( "#"+liId ).find( 'input[type="button"]' ).attr('SendNotificatonEmail')) ; 
                                var notificationEmails = $( "#"+liId ).find( 'input[type="button"]').attr('notificationEmails');
                                if(notificationEmails == undefined  )
                                        notificationEmails = '';
                                var splitedNotificationEmails = notificationEmails.split(",");
                                $( ".notificationEmail" ).remove();
                                $(".tdForNotification").html('');
                                for(var i=0;i<splitedNotificationEmails.length;i++){
                                        addNotificatonEmail(splitedNotificationEmails[i]);
                                }
                                $(".expandBtnDiv table").hide();
                                $(".expandBtnDiv").show();
                                $(".expandBtnDiv table").slideDown('300');
                                 
                                //Arrow Slide Up Effect
                                $('.arrowbtnUp').bind("click", function() {
                                        openBtnEditDialog(liId);                
                                        $(".formUlLabel" ).sortable( "option", "disabled", false );
                                        $("#parentUlForm" ).sortable( "option", "disabled", false );        
                                });
                                 
                                //Set Default Text for Button
                                document.getElementById('btnTxt').addEventListener("keyup", function() {
                                        $('.btnDiv input').val($('#btnTxt').val());
                                }, false);
                                document.getElementById('txtbxSubmitButtonLabel').addEventListener("keyup", function() {
                                        $('.btnDiv input').val($('#txtbxSubmitButtonLabel').val());
                                }, false);

                                document.getElementById('btnFootnote').addEventListener("keyup", function() {
                                        $('.footnoteDiv label').text($('#btnFootnote').val());
                                }, false);
                                $("#sortableForRelFields1.dropfields" ).sortable( "option", "disabled", true );                 
                                $(".formUlLabel" ).sortable( "option", "disabled", true );
                                $("#parentUlForm" ).sortable( "option", "disabled", true );    
                        }
                         
                        if($("#"+liId).find('.expandBtnDiv').is(':visible')){               
                                $("#"+liId).find('.editImg').addClass('togHoverActive');
                                $("#"+liId).find('.editImg').css('opacity','1');
                        }                  
                }
                var htmlForButton='';
                function saveButton(){
                        //var buttonText = $('<div/>').text($("#btnTxt").val()).html();
                        var buttonText = $("#txtbxSubmitButtonLabel").val();
                        var btnSendNotificatonEmail = $("#btnSendNotificatonEmail").is(":checked");
                        //var btnUrl = $("#btnUrl").val();
                        var btnUrl = $("#txtbxRedirectUrl").val();
                        var btnSubmitBehavior = $("#submitBehaviorOptions").val();
                        //var btnMessage =$('<div/>').text($("#BtnMessage").val()).html();
                        var btnMessage = $("textarea#txtareaThankyoumsg").val();
                        
                        var btnFootnote =  $("#btnFootnote").val();   
                                
                        var notificationEmails = '';
                        var addFlag = false;
                        var emailValue = '';
                        $( ".notificationEmail" ).each(function( index ) {
                                emailValue = $( this ).val();
                                if(emailValue.trim().length>0){
                                        if(addFlag )
                                                notificationEmails +=',';
                                        notificationEmails += emailValue;
                                        addFlag  = true;
                                }
                        });
                 
                                isbtnSection=true;
                                htmlForButton = '<input type="button" class="sectionHeader ff-btn-submit"  notificationEmails="'+ notificationEmails+'" id="';
                                 
                                if( $("#hiddenLiId").val()==""){
                                        htmlForButton += idCounter+'sortableForButton"';
                                }else{
                                        htmlForButton += $("#hiddenLiId").val()+'"';
                                } 
                                htmlForButton +=' onclick="SubmitData();"';
                                htmlForButton +=' value="'+ buttonText+'" btnMessage="'+btnMessage+'" btnUrl="'+btnUrl+'" SendNotificatonEmail="'+ btnSendNotificatonEmail+'"></input>';
                                 
                                var idOfButton = 'ftrSortableForLabelli'; 
                                var htmlForli = '<li  id="'+idOfButton+'" class="Ulbtn sectionHeader"  ><div  class="footnoteDiv"><span class="requiredSpan ff-footnote ff-required-mark">*</span><label  class="ff-footnote-label">'+btnFootnote+'</label></div><div class="btnDiv">'+htmlForButton+ '</div><div class="btnEditDiv"><img class="editImg" src="{!URLFOR($Resource.alpha,'blank.png')}" onclick="openBtnEditDialog(\''+idOfButton+'\');" /></div></li>';
                                if( $("#hiddenLiId").val()==""){
                                        $("#parentUlForm").append(htmlForli );
                                        idCounter++;
                                }else{
                                        $("#"+$("#hiddenLiId").val() ).find('.btnDiv').html(htmlForButton );   
                                        $( "#"+$("#hiddenLiId").val() ).find('.footnoteDiv').html('<span  class="requiredSpan  ff-footnote ff-required-mark">*</span><label class="ff-footnote-label">'+btnFootnote+'</label>');                 
                                        makeAllLiHeightEqual();
                                }
                                $(".ui-icon-closethick").click();
                                $("#btnTxt").val('') ;
                                $("#btnUrl").val('');
                            
                }
                 
                function itemUsedInRule(itm){
                console.log(' Item to be deleted- '+itm);
                var rulestr=isRuleExistForId(itm);
            var   returnflag=false;
                     if(rulestr!='undefined' && rulestr!='')
                     {
                     returnflag=true;
                     }
                        return returnflag;/*(lstRuleFields.indexOf(itm) > -1 );*/
                }
                 
                function calcualteFormInformation(){
                        var countOfButtons = $("#parentUlForm").find('.Ulbtn').length;
                        var countOfSection = $("#parentUlForm").find('.formUlLabel').length;
                        var countOfFields =  $(".formUlLabel").find('.fieldLi').length;
                        var buttonUrlHtml = '';
                        var salesforceObjects = '';
                        $("#parentUlForm").find('.Ulbtn').each(function(){
                                if(buttonUrlHtml != '')
                                        buttonUrlHtml += '<br/>';
                                buttonUrlHtml +=  $(this).find('input[type="button"]').attr('btnUrl');
                        });
                        var strFieldId = '';
                        //Add div
                        $(".formUlField").find('.fieldLi div div').each(function(){
                                if($(this).hasClass('deleteField') == false){
                                        strFieldId = $(this).children().attr('id').split('.')[0];                   
                                        if(salesforceObjects.indexOf(strFieldId)== -1){
                                                if(salesforceObjects != '')
                                                        salesforceObjects += ', ';
                                                salesforceObjects += strFieldId;
                                        }
                                }   
                        });             
                        $('#countOfButtons').text(countOfButtons);
                        $('#countOfSection').text(countOfSection);
                        $('#countOfFields').text(countOfFields );
                        $('#buttonUrlHtml').html(buttonUrlHtml);
                        $("#countOfRules").text('0');
                        $('#salesforceObjects').text(salesforceObjects);
                }
                function ruleEdit(ruleId){
                        var ruleIndex = ruleId.replace('ruleEdit','');
                        $("#hiddenSelectedRuleId").val(ruleIndex);
                        $("#selectOptionsIf").val($("#selectOptionsIf"+ruleIndex).val());
                        $("#selectOptionsIfFields").val($("#selectOptionsIfFields"+ruleIndex).val());
                        $("#selectOptionsIfOperators").val($("#selectOptionsIfOperators"+ruleIndex).val());
                        $("#ifFieldValue").val($("#ifFieldValue"+ruleIndex).val());
                        $("#selectOptionsThenOperators").val($("#selectOptionsThenOperators"+ruleIndex).val());
                        $("#selectOptionsFormattedLike").val($("#selectOptionsFormattedLike"+ruleIndex).val());
                        $("#errorMsgWhenRuleNotFollowed").val($("#errorMsgWhenRuleNotFollowed"+ruleIndex).val());
                        $( '#rulesDialog' ).dialog( 'open' );

                }
function deleteSignatureField(elemSource)
{
  $(elemSource).parents('.generalSortableForFields').fadeOut('slow');
  $(elemSource).parents('.generalSortableForFields').remove();

}
                // Delete Field from form
                function deleteField(delId){
                console.log(' delid '+delId);
                     // var fieldId = $('li#' + delId + ' .fieldDiv').find('input,textarea,select').eq(0).attr('id');
                        var liElement= $('li#'+delId+'');
                        clearFieldInfoPopupContent(liElement);
                        var fieldId =getFormattedElemId(liElement);
                        if (itemUsedInRule(fieldId)){
                                showError("<div class='primary'>This field is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
                        } else {        
                                var sortableListClass='';
                                for(indx=1;indx<=25;indx++){
                                    var classname='sortableForRelFields'+indx;
                                    if($("#"+delId).hasClass(classname))
                                        {
                                            sortableListClass=classname;
                                        }
                                }
                                 
                                $('#' + delId).find('div:first').find('.requiredSpan').remove();
                                         
                                
                               RemoveAllClassColorCodes($("#"+delId));

                                         
                                $("#"+delId).find('.addObjName').prev().remove();
                                $("#"+delId).find('.addObjName').remove();
                                $("#"+delId).find('.ExpandDiv').remove();
                                $("#"+delId).find('div:first').css('width','100%');
                                $("#"+delId).find('div:nth-child(2)').hide();             
                                $("#"+delId).find('select,input').val('');
                                $("#"+delId).find('textarea').text('');
                                $("#"+delId).find('label').removeClass('grayLabel');
                                $("#"+delId).find('select,input,textarea').removeAttr('value');
                                $("#trForDefaultValue").find('td:last').find('input').attr('id','defaultValue');
                                $("#trForDefaultValue").find('td:last').find('textarea').attr('id','defaultValue');
                                $("#"+delId).find('input[type="hidden"]').val('');
                                $("#"+delId).find('.editDelDiv').remove();             
                                $("#"+delId).addClass("tooltip fieldLi ui-state-default");
                                $("#"+delId).removeAttr('ondblclick');
/* april 15 - flexcontrol*/
                                
                                try{
                                
                                $("#"+delId).find('.custom-flex-control-container').next().removeClass('custom-select-offscreen');
                                $("#"+delId).find('.custom-flex-control-container').next().removeClass('custom-flexcontrol-offscreen');
                                $("#"+delId).find('.select2-container').next().removeClass('select2-offscreen');
                                $("#"+delId).find('.custom-flex-control-container').next().attr('data-flexcontrol','');
                        }
                        catch(err)
                        {}
                        $("#"+delId).find('.select2-container').remove();
                                $("#"+delId).find('.custom-flex-control-container').remove();
                                
                                //var deletedLiHtml = $("#"+delId).clone().wrap('<p>').parent().html();
                                var deletedLiHtml = fetchNewHTMLValue($("#"+delId).clone().wrap('<p>').parent());
                                

                                $("#"+delId).remove();
                                if (/lblliIMAGE/i.test(delId)){
                                    $("#"+delId).removeClass("fieldLiImage");
                                    $("#"+delId).removeClass("fieldLiImageActive");
                                }
                                else if(/lblliUPLOAD/i.test(delId) || /lblliGENERALTEXT/i.test(delId) || /lblliCAPTCHA/i.test(delId)){
                                        
                                }else{                
                                         
                                        if($("#"+sortableListClass).length>0)
                                        {
                                            $("#"+sortableListClass).append(deletedLiHtml);
                                                sort(sortableListClass);
                                        }
                                        //Bind Events
                                        activeClick();
                                }
                                                     
                                
                                 resetSavedButton();
                        }
                }
                 
                 function isValidChild(elem)
                {
                    var returnflag=false;
                    $('.list-toggle-div-wrap').each(function(indx,wrapperDiv){
                            
                            if($(wrapperDiv).attr('data-childclass') !=undefined && $(wrapperDiv).attr('data-childclass') !="" && $(elem).attr('id').lastIndexOf($(wrapperDiv).attr('data-childclass'))==$(elem).attr('id').length-1){
                                returnflag=true;
                            }
                        });
                    return returnflag;
                }
                // Delete Field from form
                function fetchNewHTMLValue(val){
                        var objs = ['li','label'];
                        for(var i=0;i<=objs.length-1;i++){
                             
                                if($(val).find(objs[i]).attr('id').length >0 && isValidChild($(val).find(objs[i]))){
                                
                                        var newId = $(val).find(objs[i]).attr('id');
                                        console.log(' newId '+newId);
                                        $(val).find(objs[i]).attr('id',newId.substr(0,newId.length-1));
                                }
                        }
                     $(val).find('.fieldDiv .ff-input-type,.fieldDiv .ff-select-type,.fieldDiv .ff-checkbox,.fieldDiv .ff-textarea').each(function (index) {
                        if($(this).attr('id').length >0 && isValidChild($(this))){
                        var newId = $(this).attr('id');
                         console.log(' newId 1-1 '+newId);
                        $(this).attr('id',newId.substr(0,newId.length-1));
                        }
                        
                        });
                     if($(val).find('.fieldDiv').children().attr('id') && $(val).find('.fieldDiv').children().attr('id').length >0 && isValidChild($(val).find('.fieldDiv').children())){
                                var newId = $(val).find('.fieldDiv').children().attr('id');
                                $(val).find('.fieldDiv').children().attr('id',newId.substr(0,newId.length-1));
                        }
                        $(val).find('input[type="hidden"]').each(function(e){
                                if($(this).attr('id').length >0 && isValidChild($(this))){
                                        var newId = $(this).attr('id');
                                        console.log(' newId 3 '+newId);
                                        $(this).attr('id',newId.substr(0,newId.length-1));
                                }
                        });
                        $(val).find(".listName").remove();

                         console.log(' HTML______ '+$(val).html());
                        return $(val).html();
                }
                
                function sortingFieldLabel(){
                        var labelVals = [];
                        var lblLIValues = $("#sortableForRelFields1").find('li.lbl').remove();
                        var btnLIValues = $("#sortableForRelFields1").find('li.Ulbtn').remove();
                        var labelWithLiMap = new Object();
                        $("#sortableForRelFields1").find('li').each(function(){
                                if($(this).hasClass('lbl')==false){
                                        labelVals.push($(this).find("div:visible").attr('lblname'));
                                        labelWithLiMap[$(this).find("div:visible").attr('lblname')] = $(this).clone().wrap('<p>').parent().html();
                                }
                        });
                        labelVals.sort();
                        $("#sortableForRelFields1").find('li').remove();
                        for(var i = 0, l = labelVals.length; i < l; i++){
                                $("#sortableForRelFields1").append(labelWithLiMap[labelVals[i]]);
                        }
                        $("#sortableForRelFields1").append(lblLIValues);
                        $("#sortableForRelFields1").append(btnLIValues);           
                        makeJqueryTooltip();            
                }

                //Delete Section
                function deleteSection(delElem){             
                        // Check section containing a required field.   
                        var fieldsUsedInRule = false;
                        var isSectionContainsReqField = false;
                        var sectionUsedInRule = itemUsedInRule($(delElem).parent().parent().attr('id'));
                        var lblId = '';
                        $(delElem).parents('ul.formUlLabel').find(".fieldLi").find('label').each(function(){
                                //var fieldId = $(this).parent().parent().find('.fieldDiv input,textarea,select').eq(0).attr('id');
                                /*modified to fix the child object element id issue on mar 10 2015 */
                                                                var liElement= $(this).parents('.fieldLi');
                                                                var fieldId =getFormattedElemId(liElement);
                                if (itemUsedInRule(fieldId))
                                        fieldsUsedInRule = true;                
                                lblId = $(this).attr('id');
                                if(lblId!==undefined)
                                {
                                lblId = lblId.replace('lbl','');

                                if($(this).parent().find('#isDefaultRequired'+lblId).val() == "true")
                                        isSectionContainsReqField = true;
                                    }
                        });
                        if (sectionUsedInRule){
                                showError("<div class='primary'>This section is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
                        }else if (fieldsUsedInRule){
                                showError("<div class='primary'>This section contains fields that are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
                        }else if(isSectionContainsReqField){
                                showError("<div class='primary'>The section you are trying to delete has a required field inside of it.</div><br /> <br /><div class='secondary'>To delete this section, move the required field to a different section and try again.</div>");
                        }else {                
                               
                                $(delElem).parents('.mainTable').parent().remove();
                                resetSavedButton();
                                initScrollbar();
                        }
                }
                 
                //Delete Section
                function deleteSectoionLabel(delId){
                        $('#'+delId).parent().parent().remove();
                        resetSavedButton();
                        initScrollbar();
                }
                 
                function addNotificatonEmail(emailValue){
                        $(".tdForNotification").append('<div class="notificationDiv"><input type="text" class="notificationEmail"  value="'+ emailValue+'"/></div>');
                        if($(".notificationDiv").length>1)
                                $("#removeImg").show();
                        else
                                $("#removeImg").hide();
                }
                 
                function removeNotificatonEmail(){
                        $(".tdForNotification").find('.notificationDiv:last').remove();
                        if($(".tdForNotification").find('.notificationDiv').length ==1)
                                $("#removeImg").hide(); 
                }
                function addNewSectionLi(){
                        $("#parentUlForm").find(".addNewSection").remove();
                        var idx = $( "#parentUlForm" ).find('.Ulbtn').index();
                        idx = idx+1;
                        var liHtml = '<li  style="cursor:pointer;{!IF(isFirstTimeFormEdit,'margin-top:15%;','')}"   class="addNewSection"><label  style="cursor:pointer;"  class="addNewSectionInner"> Add New Section +</label>';
                        //liHtml += '<div class="dragDropInfoDiv" style="margin-left:20px;display:{!IF(isFirstTimeFormEdit,'block;','none;')}"><label style="margin-right:50px;"></label><img src="{!URLFOR($Resource.iconImages,'dragdrop.png')}" ></div> ';
                        //liHtml += '<div class="arrowUpper" style="cursor:default;display:{!IF(isFirstTimeFormEdit,'block;','none;')}"><img src="{!URLFOR($Resource.iconImages,'arrow.png')}" ></div>';
                        liHtml += '<div id="addSectionPlus" style="background-color:#dcecf5;border-radius:5px;display: none; margin-right:7px;  " class="addNewSectionIcon"><div class="plusIcon">+</div></div><ul  style="width:90%" class="formUlLabel" id="labelformUlForAddNewSection" ></ul></li>'
                        $("#parentUlForm li:nth-child("+idx +")").before(liHtml);
                        $("#parentUlForm").find("li ul").find('.addNewSection').remove();
                }
                
                 
                 
                //Close Form and Asked confirmation that you want to close form without save or not.
                function closeForm(){           
                        if(isChangesMadeInForm == true){
                                $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to close this form without saving?</div></div>");
                                // Define the Dialog and its properties.
                                $("#dialog-confirm").dialog({
                                        resizable: false,
                                        modal: true,
                                        title: "Close",
                                        height: "auto",
                                        width: 413,
                                        position: 'center',
                                        buttons: {
                                                "Close": function () {
                                                        $(this).dialog('close');
                                                        $('.button').removeClass('active');          
                                                        $('#tabList tr td').find('.button').each(function(){ 
                                                                if($(this).text() == 'Close'){
                                                                        $(this).addClass('active');
                                                                }              
                                                        });
                                                        callback(true);
                                                },
                                                "Cancel": function () {
                                                        $(this).dialog('close');
                                                        callback(false);
                                                }
                                        },
                                        open: function( event, ui ) {
                                                $('.ui-dialog :button').blur();
                                        }
                                });
                                
                                function callback(value) {
                                        if (value) {
                                                window.location.href= '/apex/FormMenu';
                                        }else {
                                                return false;
                                        }
                                }
                        }else{
                                window.location.href= '/apex/FormMenu';
                        }
                        hideSection();
                }
                //hide arrow section 
                function hideSection(){
                      /*  $(".dragDropInfoDiv").hide();
                        $(".arrowUpper").hide();
                        $(".addNewSection").css('margin-top','0%');*/
                }
                //Show Save confirm Dialog
                function showSaveConfirm(){
                        $('.button').removeClass('active');      
                        if(isFirstTimeFormEdit == "true"){
                                $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to save?</div></div>"); 
                        } else {
                                $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to save?</div><br /><br /><div class='secondary'>This will automatically update all websites hosting this form.</div></div>");
                        }
                        // Define the Dialog and its properties.
                        $("#dialog-confirm").dialog({
                                resizable: false,
                                modal: true,
                                title: "Save",
                                height: "auto",
                                width: 413,
                                buttons: {                                                        
                                        "Yes": function () {
                                                $(this).dialog('close');
                                                callback(true);
                                        },
                                        "No": function () {
                                                $(this).dialog('close');
                                                $("#btnSaved").removeClass('btnGreenClick');                        
                                                callback(false);
                                        }                   
                                },                  
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                        $('.ui-dialog :button').blur();
                        $('#dialog-confirm').dialog('option', 'position', 'center');
                        function callback(value) {
                                if (value) {
                                        var isErr = false;
                                        var fieldLid = '';
                                        var defaultValue = '';
                                        //Validate to the tool so that if a reference field is required, the user has to pick a value using the lookup before they can save their form.
                                        $("#parentUlForm .defReq").each(function(){
                                                if($(this).parent().parent().css('display') != 'none' && $(this).parent().find('>label:first').hasClass('grayLabel')){
                                                        //if($(this).val() == "true"){                                 
                                                                fieldLid  = $(this).attr('id');
                                                                fieldLid  = fieldLid.replace('isUserSelectedRequired','defaultValue');
                                                                defaultValue = $(this).parent().find('#'+fieldLid ).val();
                                                                if((defaultValue == undefined || defaultValue == '')){
                                                                    $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>There are one or more reference fields in your form without a default value.<br /><br /></div><div class='secondary'>Are you sure you want to continue?</div></div>");
                                                                    // Define the Dialog and its properties.
                                                                    $("#dialog-confirm").dialog({
                                                                            resizable: false,
                                                                            modal: true,
                                                                            title: "Close",
                                                                            height: "auto",
                                                                            width: 413,
                                                                            position: 'center',
                                                                            buttons: {
                                                                                    "Yes": function () {
                                                                                            $(this).dialog('close');
                                                                                            save(false,false);
                                                                                    },
                                                                                    "No": function () {
                                                                                            $(this).dialog('close');
                                                                                            $(".btnPublishedSaved").text('Publish Draft');
                                                                                            $(".btnPublishedSaved").removeClass('va-disabled');
                                                                                            return false;
                                                                                    }
                                                                            },
                                                                            open: function( event, ui ) {
                                                                                    $('.ui-dialog :button').blur();
                                                                            }
                                                                    });
                                                                }
                                                        //}
                                                }
                                        });
                                        if(isErr == false){
                                                save(false,false);
                                        }
                                }else {
                                        return false;
                                }
                        }
                     
                }
             function showFirstTimePublish(){
             var urltppublishpage='{!$Site.BaseUrl}FormPublish?ffid={!$CurrentPage.parameters.Id}';
                        $("#SaveFormInfoDialog").html("<div class='dialogHeader'><div class='dialogIcon dialogIconOK'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Your form has been saved successfully!</div><br /><br /><div class='secondary'>Ready to publish? Click on the 'Go to Publish Options' below to publish your form.</div></div>");
                        // Define the Dialog and its properties.
                        $("#SaveFormInfoDialog").dialog({
                                resizable: false,
                                modal: true,
                                title: "Save Info",
                                height: "auto",
                                width: 413,
                                buttons: {
                                        "Cancel": {
                                        click: function () {
                                                window.location.href = urltppublishpage;
                                        },
                                        text: 'Go To Publish Options',
                                        'class': 'vabutton1'
                                        },
                                        "OK": {
                                        click: function () {
                                                $(this).dialog("close");
                                        },
                                        text: 'Stay in Form Editor',
                                        'class': 'vabutton2'
                                        }
                                },
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                        $('.ui-dialog :button').blur();           
                }
                 
             
                function showError(msg){
                        $("#dialog-error").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'>"+msg+"</div>");
                        // Define the Dialog and its properties.
                        $("#dialog-error").dialog({
                                resizable: false,
                                modal: true,
                                title: "Save Info",
                                height: "auto",
                                width: 413,
                                buttons: {
                                        "OK":{click :function () {
                                                $(this).dialog('close');
                                        },
                                        text: 'OK',
                                        'class': 'vabutton1'
                                        }
                                },
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                        $('.ui-dialog :button').blur();
                }
                function showUpgradePrompt(msg){
                        $("#dialog-error").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>"+msg+"</div></div>");
                        // Define the Dialog and its properties.
                        $("#dialog-error").dialog({
                                resizable: false,
                                modal: true,
                                title: "Save Info",
                                height: "auto",
                                width: 413,
                                buttons: {
                                        "OK":{
                                        click: function() {
                                                window.open('http://visualantidote.com/fastforms#Subscribe', '_blank');
                                        },
                                        text: 'Upgrade Now!',
                                        'class': 'vabutton1'
                                        },
                                        "No thanks":{
                                        click: function () {
                                                $(this).dialog('close');
                                        },
                                        text: 'No thanks',
                                        'class': 'vabutton2'
                                        }
                                        },
                                 
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                        $('.ui-dialog :button').blur();
                }        
                
                
                
                function setHeightOfEditorInFieldDiv(){ 
                }
             
                function closePrivewDialog(){
                        $('#preview').dialog('close');           
                        $("#removeFiles").remove();
                        $('.button').removeClass('active'); 
                }
             
                function closeSavingDialog(){
                        $( '#dialogSucess' ).dialog( 'close' );
                }
             
                function closeErrorDialog(){
                        $( '#dialogSucess' ).dialog( 'close' );
                }
             
                function Blend(a, b, alpha) {

                        var aa = [
                                    parseInt('0x' + a.substring(1, 3)), 
                                    parseInt('0x' + a.substring(3, 5)), 
                                    parseInt('0x' + a.substring(5, 7))
                        ];
                
                        var bb = [
                                    parseInt('0x' + b.substring(1, 3)), 
                                    parseInt('0x' + b.substring(3, 5)), 
                                    parseInt('0x' + b.substring(5, 7))
                        ];
                
                        r = '0' + Math.round(aa[0] + (bb[0] - aa[0])*alpha).toString(16);
                
                        g = '0' + Math.round(aa[1] + (bb[1] - aa[1])*alpha).toString(16);
                
                        b = '0' + Math.round(aa[2] + (bb[2] - aa[2])*alpha).toString(16);
                
                        return '#'
                                    + r.substring(r.length - 2)
                                    + g.substring(g.length - 2)
                                    + b.substring(b.length - 2);
                }
            
                function fadeText(cl1,cl2,elm){
                        var t = [];
                        var steps = 100;
                        // you can customize
                        var delay = 1000;
                        // you can customize
                        for (var i = 0;i<steps;i++) {
                                (function(j) {
                                        t[j] = setTimeout(function() {
                                                var a  = j/steps;
                                                var color = Blend(cl1,cl2,a);
                                                elm.style.backgroundColor = color;
                                        }, j*delay/steps);           
                                })(i);
                        }
                        return t; 
                }
                
                function stopfade(t){
                        for (i in t) {
                                clearTimeout(t[i]);
                        }       
                }
                
                function savedButtonClicked(){
                        $("#btnSaved").addClass('btnGreenClick');
                        if($("#btnSaved").hasClass('btnSaved')==false ){                
                                $('.button').removeClass('active');
                                if($(".expandBtnDiv").is(":visible")){
                                        $('#saveBtn').parent().parent().parent().parent().parent().parent().parent().find('.editImg').click();
                                        if(isbtnSection){
                                                showSaveConfirm();
                                        } 
                                }else{                             
                                        if(isError){                     
                                                showSaveConfirm();       
                                        }
                                                                
                                }             
                        }        
                }
                function publishDraft(){
                        
                    mixpanel.track('Publish draft clicked');
                    Intercom('trackEvent', 'published-draft');
                    if ($("#btnSaved").hasClass('va-disabled'))
                    {
                       showSuccessMessage();
                    } else {
                        $("#btnSaved").addClass('va-disabled');
                        if($(".expandBtnDiv").is(":visible")){
                                $('#saveBtn').parent().parent().parent().parent().parent().parent().parent().find('.editImg').click();
                                if(isbtnSection){
                                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                        lookupFieldConfirmAndPublish();
                                        </apex:outputText>                            
                                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                                        if(!(isFirstOperandValid() && ifThenBlockIsValid()))
                                        {
                                                ruleValidationCheck();  
                                        } 
                                        else
                                        {
                                                lookupFieldConfirmAndPublish();
                                        }
                                        </apex:outputText>                            

                                } 
                        }else{                             
                                if(isError){   
                                         <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                        lookupFieldConfirmAndPublish();
                                        </apex:outputText>                            
                                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">                                
                                        if(!(isFirstOperandValid() && ifThenBlockIsValid()))
                                        {
                                                ruleValidationCheck();  
                                        } 
                                        else
                                        {
                                                lookupFieldConfirmAndPublish();
                                        }   
                                        </apex:outputText> 
                                }
                                                                        
                        }   
                    }
                }
                function ruleValidationCheck()
             {
                     $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>You have one or more incomplete rules. Do you want to publish your draft anyway?</div></div>"); 
                         
                        // Define the Dialog and its properties.
                        $("#dialog-confirm").dialog({
                                resizable: false,
                                modal: true,
                                title: "Save",
                                height: "auto",
                                width: 413,
                                buttons: {                                                            
                                        "Yes":{
                                                click: function () {
                                                        $(this).dialog('close');                                               
                                                callback(true);
                                                },
                                                text: 'Yes',
                                                'class': 'vabutton1'
                                        },
                                        "No":{
                                                click: function () {
                                                        $(this).dialog('close');
                                                callback(false);
                                                },
                                                text: 'No',
                                                'class': 'vabutton2'
                                        }               
                                },                  
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                        $('.ui-dialog :button').blur();
                        $('#dialog-confirm').dialog('option', 'position', 'center');
                        function callback(value) {
                                if (value) {
                                            lookupFieldConfirmAndPublish();
                                }else {
                                        return false;
                                }
                        }
             }
                function checkLookupFieldsVisibillity()
                {
                    var allLookupFieldHidden=true;
                    $("#parentUlForm .fieldLi").each(function(indx,fielLiElement){
                        var labelElement=$(fielLiElement).find('div:first > label');
                        var textElement=$(fielLiElement).find('div.fieldDiv input[type="textbox"]');
                        if($(labelElement)!=undefined && $(labelElement).attr('vatt')=='REFERENCE'  && !$(labelElement).hasClass('grayLabel') && isNullOrEmpty($(textElement).attr('disabled')))
                        {
                            console.log(' Lookup field visible-'+$(labelElement).text());
                            allLookupFieldHidden = false;
                        }
                             
                    });
                    return allLookupFieldHidden;
                }
                function checkPaymentFieldsVisibillity()
                {
                    var paymentSetupWrapperHidden=true;
                    $("#parentUlForm .fieldLi .payment-overlay-wrapper").each(function(indx,paymentwrapperDiv){
                         
                         if(isNullOrEmpty($(paymentwrapperDiv).css('display')) || $(paymentwrapperDiv).css('display')!='none')
                         { 
                            paymentSetupWrapperHidden = false;
                        }
                             
                    });
                    return paymentSetupWrapperHidden;
                        }
                
                 
                function lookupFieldConfirmAndPublish()
                {
                    var lookupVisibilityOk = false;
                     var paymentVisibiliyOk=checkPaymentFieldsVisibillity();
                    //Validate to the tool so that if a reference field is required, the user has to pick a value using the lookup before they can save their form.
                     
                                    lookupVisibilityOk = checkLookupFieldsVisibillity();
                                 
                                 
                    if ((lookupVisibilityOk == true || (lookupWarningFlagDisable==true || lookupWarningFlagDisable=='true') ) && paymentVisibiliyOk) {
                        showPublishConfirm();
                    }
                    else {
                        if(paymentVisibiliyOk)
                        {


                    $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Warning: This form contains a lookup field which allows external users to view your Salesforce records.<br /><br />Are you sure you want to continue?<br/><br /></div><div class='secondary'><input id='chkbxLookupWarningFlag' type='checkbox'/><label for='chkbxLookupWarningFlag'>Don't show me this message again</label></div></div>");
                        // Define the Dialog and its properties.
                        $("#dialog-confirm").dialog({
                                resizable: false,
                                modal: true,
                                title: "Close",
                                height: "auto",
                                width: 413,
                                position: 'center',
                                buttons: {                                        
                                        "Yes":{
                                                click: function () {                                              
                                                    $(this).dialog('close');
                                                    if($('#chkbxLookupWarningFlag').is(':checked'))
                                                    {
                                                        console.log(' Warning disable');
                                                        lookupWarningFlagDisable=true;
                                                    }
                                                    else{
                                                        console.log(' Warning enable');
                                                    lookupWarningFlagDisable=false; 
                                                    }
                                                    
                                                    showPublishConfirm();
                                                },
                                                text: 'Publish',
                                                'class': 'vabutton1'
                                        },
                                        "No":{
                                                click: function () {                                                                                              
                                                    $(this).dialog('close');
                                                    $(".btnPublishedSaved").text('Publish Draft');
                                                    $(".btnPublishedSaved").removeClass('va-disabled');                                                
                                                    return false;
                                                },
                                                text: 'Cancel',
                                                'class': 'vabutton2'
                                        } 
                                },
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                        }
                        else
                        {
                            commonAlertMessage("One or more payment fields are not set up!","");
                        }
                    }
                }
                function showPublishConfirm()
                { 
                    var hasEmptyRefField = false;
                    var fieldLid = '';
                    var defaultValue = '';
                    //Validate to the tool so that if a reference field is required, the user has to pick a value using the lookup before they can save their form.
                    $("#parentUlForm .defReq").each(function(){
                            if($(this).parent().parent().css('display') != 'none' && $(this).parent().find('>label:first').hasClass('grayLabel')){
                                fieldLid  = $(this).attr('id');
                                fieldLid  = fieldLid.replace('isUserSelectedRequired','defaultValue');
                                defaultValue = $(this).parent().find('#'+fieldLid ).val();
                                if((defaultValue == undefined || defaultValue == '') ){
                                    hasEmptyRefField = true;
                                }
                            }
                    });
                                 
                    if (hasEmptyRefField == false) {
                        save(false,false);
                    }
                    else {
                        $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>There are one or more reference fields in your form without a default value.<br /><br /></div><div class='secondary'>Are you sure you want to continue?</div></div>");
                        // Define the Dialog and its properties.
                        $("#dialog-confirm").dialog({
                                resizable: false,
                                modal: true,
                                title: "Close",
                                height: "auto",
                                width: 413,
                                position: 'center',
                                buttons: {
                                        "Yes":{
                                                click: function () {                                              
                                                    $(this).dialog('close');
                                                    save(false,false);
                                                },
                                                text: 'Yes',
                                                'class': 'vabutton1'
                                        },
                                        "No":{
                                                click: function () {                                                                                              
                                                    $(this).dialog('close');
                                                    $(".btnPublishedSaved").text('Publish Draft');
                                                    $(".btnPublishedSaved").removeClass('va-disabled');                                                
                                                    return false;
                                                },
                                                text: 'No',
                                                'class': 'vabutton2'
                                        }
                                         
                                },
                                open: function( event, ui ) {
                                        $('.ui-dialog :button').blur();
                                }
                        });
                    }
                }
             function showPublishResponse()
                {
                if(isFirstTimeFormEdit == "true"){
                                                        showFirstTimePublish();
                                                         $('.publish-draft').addClass('va-disabled');
                                                            $('.draft-saved').hide();
                                                }
                                                else{
                                                showSuccessMessage();
                                                 $('.publish-draft').addClass('va-disabled');
                                                 $('.draft-saved').hide();
                                                }
                }
                function showSuccessMessage(){
                var editorurl="{!$Page.FormPublish+'?ffid='+$CurrentPage.Parameters.id}";
                showNotification("successActionBox", "<span >Your form has been updated successfully!<span> <a href='"+editorurl+"' class='vabutton1 ml50 publish-link-btn' >Publish Options</a>");
                }
                function autosaveTriggered(){
                        if (isChangesMadeInForm) {
                                save(false,true);
                                isChangesMadeInForm = false;    
                                hideNotification('successActionBox'); 
                        }   
                }        
                
                //  javascript for open custom lookup page
                function openLookupRefPopup(thisElement,Ltype,Rtype)
                {
                    if(Ltype=='Group' || Ltype=='Queue')
                    {
                        var elemeId=$(thisElement).parent().find('input[type="textbox"]').attr('name');
                        if(!isNullOrEmpty(elemeId))
                        {
                        var idItems=lengthSplitId(elemeId);
                        if(idItems==2)
                        {
                            //primary
                          Rtype=  elemeId.split('.')[0];
                        }
                        else if(idItems>2)
                        {
                            //secondary
                            Rtype=  elemeId.split('.')[1];
                        }
                      }
                    }
                    openLookupPopup(Ltype,Rtype);
                }
                function openLookupPopup(Ltype,Rtype){
                var left = (screen.width/2)-(600/2);
                var top = 250
                //ltype=RecordType&rtype=Account
                 
                var url = '/apex/FastFormsLookup?ltype='+Ltype+'&rtype='+Rtype+'&sourcePage=editor';
                newWin = window.open(url, 'Popup','height=500,width=600,left='+left+',top='+top+',resizable=no,scrollbars=yes,toolbar=no,status=no');
               }
                
                 
                
                function closeLookupPopup(){
                        if(null!=newWin){
                                newWin.close();               
                        } 
                }
                function lookupPick(a,b,c,d,e,f,g,h) {
                    console.log(' lookup Pick ');
                        if($("#defaultValue").attr('name') == undefined  || $("#defaultValue").attr('name') ==''){
                                $( "input[id='" + c + "']").val(f);
                        }else{
                                $("#defaultValueHidden").val(e);
                                $("#defaultValue").val(f);
                                c=$(".ExpandDiv").parent().find('input[type="textbox"]').attr('id');
                                if(c != null){
                                        document.getElementById(c).value=f;
                                } 
                                mixpanel.track('Lookup value selected',{ "Field ID": c});
                                
                        }             
                        addLabel();
                        resetSavedButton();                 
                        newWin.close();
                }
                function lookupPick2(a,b,c,d,e,f,g,h) {   
            if(!isNullOrEmpty(g) && g=='rule')
                    {            
                        setRuleLookupOptions(a,b,c,d,e,f,g,h)   ;       
                    }
                    else{
                            if($("#defaultValue").attr('name') == undefined  || $("#defaultValue").attr('name') =='')
                                $( "input[id='" + c + "']").val(e);
                        else{
                                $("#defaultValueHidden").val(d);
                                $("#defaultValue").val(e); 
                                c=$(".ExpandDiv").parent().find('input[type="textbox"]').attr('id');

                                if(c != null){                  
                                        //document.getElementById(c).value=e; 
                                        $(".ExpandDiv").parent().find('.fieldDiv input[type="textbox"]').val(e);
                                        $(".ExpandDiv").parent().find('.fieldDiv input[type="textbox"]').attr('value',e);
                                        $(".ExpandDiv").parent().find('.fieldDiv input[type="hidden"]').val(d);

                                        //$(".ExpandDiv").parent().find('input[type="textbox"]').attr('value',e);
                                        //$(".ExpandDiv").parent().find('input[type="textbox"]').attr('data-value',d);
                                }                  
                        }               
                        addLabel();
                        resetSavedButton();    
                        
                    }
                    newWin.close();
                }
                function changeImg(x,con){
                        if(con=='add'){
                                x.src="{!URLFOR($Resource.iconImages,'AddHover.png')}";
                        }
                        if(con=='remove'){
                                x.src="{!URLFOR($Resource.iconImages,'RemoveHover.png')}";
                        }
                        if(con=='Copy'){
                                x.src="{!URLFOR($Resource.alpha,'HelpHover.png')}";
                        }            
                        if(con==undefined){
                                x.src="{!URLFOR($Resource.iconImages,'CloseHover.png')}";
                        }
                }
                function rechangeImg(x,con){
                        if(con=='add'){
                                x.src="{!URLFOR($Resource.iconImages,'Add.png')}";
                        }
                        if(con=='remove'){
                                x.src="{!URLFOR($Resource.iconImages,'Remove.png')}";
                        }
                        if(con=='Copy'){
                                x.src="{!URLFOR($Resource.alpha,'HelpActive.png')}";
                        }
                        if(con==undefined){
                                x.src="{!URLFOR($Resource.iconImages,'Close.png')}";
                        }
                }
                function itemAdd(item){
                    var itemid=item.attr('id');
                    var isPaymentField=false;
                    if(itemid!==undefined && itemid.indexOf('PAYPALPAYMENT')>0)
                    {
                        isPaymentField=true;
                    }
                    if(isPaymentField)
                    {
                        item.find('.paypal-item-header').hide();
                        item.removeAttr('style');
                        
                            $(item.find('.paypal-item-row')).each(function(i, ppitemrow) {
                                if(!$(ppitemrow).hasClass('pp-default-hide'))
                                {
                                                $(ppitemrow).find('.PPGeneralFieldDiv').show();
                                                $(ppitemrow).show();
                                            }
                                                //$(ppitemrow).find('.PPGeneralFieldDiv').removeAttr('style');

                                         // $(ppitemrow).find('.PPGeneralFieldDiv').css('width','40%');
                                             
                                        });
                             item.find('.alert-payment-setup').show();
                         
                    }
                    else
                    {
                        item.find('div').show();
                        item.find('div:first').css('width','40%');
                    }
                        
                        item.removeClass('tooltip');
                        $( ".formUlLabel" ).children().removeClass('ui-state-default');
                        item.find('.deleteField').show();
                        var dropLiId = item.attr('id');
                        item.removeClass('ui-state-default');
                        var editDelDivHtml = '<div class="editDelDiv">';  

                        if(item.find('.deleteField').length==0 && item.find('.editImg').length==0){                            
                             
                                if(isPaymentField)
                                            {
                                             
                                                 editDelDivHtml += '<img class="editImg" src="'+imgUrl +'" onclick="openEditPaymentDialog(\''+dropLiId +'\',this,true);" />';
                                editDelDivHtml += '<img id="'+dropLiId+'" src="'+deleteImgUrl+'" class="deleteField" onclick="deletePaymentField(this.id);"/>';
                                            }  
                                            else
                                            {
                                                 editDelDivHtml += '<img class="editImg" src="'+imgUrl +'" onclick="openEditDialog(\''+dropLiId +'\',true);" />';
                                editDelDivHtml += '<img id="'+dropLiId+'" src="'+deleteImgUrl+'" class="deleteField" onclick="deleteField(this.id);"/>';
                                            }
                        }
                        editDelDivHtml += '</div >';
                        if(isPaymentField)
                        {
                            item.find('.field-div-payment').append(editDelDivHtml);
                        } else {
                            item.append(editDelDivHtml);
                        }
                        
                        return item;
                }
                function editText(e){
                        e.readOnly='';
                        $(e).removeClass('editText');
                        $(e).addClass('editTextfocus');            
                }
                function saveEdit(e){
                        saveEditText($(e).val());
                        e.readOnly=true;            
                        $(e).removeClass('editTextfocus');
                        $(e).addClass('editText');                        
                }
                function checkUploadToChatter(e){   
                        addLabel();        
                        resetSavedButton();
                }

                function checkReq(e){           
                
                        addLabel();        
                        resetSavedButton();
                         
                }
                
        function checkHide(e) {
            var lblelem = $('#defaultValue').parents('div[class="ExpandDiv"]').parent().find('div:first-child > label').eq(0);
            var referenceField=false;
            var parentFIeldLiElement=$(e).parents('.fieldLi');
            var parentExpandDiv=$(parentFIeldLiElement).find('.ExpandDiv');
            if ($(parentFIeldLiElement).find('.fieldDiv span.lookupInput').length > 0)
            {
                referenceField=true;
            }
            mixpanel.track('Field hidden option checked',{ "Field ID": lblelem.attr('id')});

            <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
             if (!$('#hideField').is(":checked")) {
                    $(lblelem).removeClass('grayLabel');
                    $('#defaultLabelDiv').find('.hideText').innerHTML = '';
                    
                } else {
                    $(lblelem).addClass('grayLabel');
                    $('#defaultLabelDiv').find('.hideText').innerHTML = '<i>Field will not be visible to user</i>';
                    
                }    
                
             if (referenceField) {
                    upgradeNowMessage('Lookup fields are only available in Professional or Enterprise editions of Fast Forms.','','');                       
                    e.checked = true;
                    toggleVisibilityOnHideFieldChange(e,parentExpandDiv,false);
                }
                else
                {
                   addLabel();
                resetSavedButton();  
                }
             </apex:outputText>
            <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                if (!$('#hideField').is(":checked")) {
                    $(lblelem).removeClass('grayLabel');
                    $('#defaultLabelDiv').find('.hideText').innerHTML = '';
                    if(referenceField)
                    {
                         toggleVisibilityOnHideFieldChange(e,parentExpandDiv,true);
                    }
                } else {
                    $(lblelem).addClass('grayLabel');
                    $('#defaultLabelDiv').find('.hideText').innerHTML = '<i>Field will not be visible to user</i>';
                    if(referenceField)
                    {   
                        toggleVisibilityOnHideFieldChange(e,parentExpandDiv,false);
                    }
                }    
                addLabel();
                resetSavedButton(); 
            </apex:outputText>

        }
        function toggleVisibilityOnHideFieldChange(elemSource,parentExpandDiv,showELem)
        {
            if(showELem)
            {
                if(!$(parentExpandDiv).find('#trForReadOnlyField').find('input[type=checkbox]').is(":checked"))
                    {
                        toggleVisibilityOnReadOnlyChange($(parentExpandDiv).find('#trForReadOnlyField'),parentExpandDiv,showELem);
                    }
                    $(parentExpandDiv).find('#trForReadOnlyField').removeClass('elem-disabled');

            }
            else{
            $(parentExpandDiv).find('#trForReadOnlyField').addClass('elem-disabled');
             //$(parentExpandDiv).find('#trForReadOnlyField').find('#readOnlyField').prop('checked', true);
                    toggleVisibilityOnReadOnlyChange($(parentExpandDiv).find('#trForReadOnlyField'),parentExpandDiv,showELem);
                }
        }
        function toggleVisibilityOnReadOnlyChange(elemSource,parentExpandDiv,showELem)
        {
            if(showELem)
            {
                $(parentExpandDiv).find('#trForRequired').removeClass('elem-disabled');
                    $(parentExpandDiv).find('#trForLookupView').removeClass('elem-disabled');
                    $(parentExpandDiv).find('#trForMsgField').removeClass('elem-disabled');
                    $(parentExpandDiv).find('.edit-dialog-alert').show();
                        }
                        else
                        {
                            $(parentExpandDiv).find('.edit-dialog-alert').hide();
                        $(parentExpandDiv).find('#trForRequired').addClass('elem-disabled');
                            $(parentExpandDiv).find('#trForLookupView').addClass('elem-disabled');
                            $(parentExpandDiv).find('#trForMsgField').addClass('elem-disabled');                            
                        }
        }
        function setFieldCurrencyLabel(elemSource)
        {
            console.log(' currency label for fields '+$(elemSource).val());
            $(elemSource).parents('.fieldLi').find('.fieldDiv').find('input:first').prev().text($(elemSource).val());
            $(elemSource).parents('div[class="ExpandDiv"]').find('#trForDefaultValue input:first').prev().text($(elemSource).val());
            isChangesMadeInForm = true;
                        autosaveTriggered();
        }
function chkhideSection(e)
{
        //addLabel();
        //resetSavedButton();    
console.log('In CHECKBOX - ');
var chkboxElem=$(e);
 
console.log(' CHECKBOX - ' +$(chkboxElem));
            if ($(chkboxElem).prop('checked')!='undefined' &&  $(chkboxElem).prop('checked'))
            {
            
        var sectionUlId= $(chkboxElem).parents('.formUlLabel').attr('id');
        console.log(' checked - section id: '+sectionUlId);
        $(chkboxElem).parents('.formUlLabel').addClass('hideFullSection');
         }
         else
         {
            var sectionUlId= $(chkboxElem).parents('.formUlLabel').attr('id');
            $(chkboxElem).parents('.formUlLabel').removeClass('hideFullSection');
        console.log(' not checked - section id: '+sectionUlId);
        
         }
}
function changeFieldLabel(e)
{
  var parentFieldLiElement=$(e).parents('.fieldLi');
  $(parentFieldLiElement).find('>div:first-child > label').html($(e).val());
}
function changeSectionLabel(e)
{
  var parentSectionLiElement=$(e).parents('.sectionDisabled');
  $(parentSectionLiElement).find('> label').html($(e).val());
}

        function checkReadOnly(e) {
        addLabel();
        resetSavedButton();
             var referenceField=false;
        var parentFIeldLiElement=$(e).parents('.fieldLi');
        var parentExpandDiv=$(parentFIeldLiElement).find('.ExpandDiv');
        if ($(parentFIeldLiElement).find('.fieldDiv span.lookupInput').length > 0)
        {
          referenceField=true;
        }
        var lblelem = $(e).parents('div[class="ExpandDiv"]').parent().find('div:first-child > label').eq(0);
        var fieldelem=null;
        if(referenceField)
                {
                    fieldelem =$(e).parents('div[class="ExpandDiv"]').parent().find('.fieldDiv').find('input[type=textbox]');
                }
                else
                {
                     fieldelem = $(e).parents('div[class="ExpandDiv"]').parent().find('.fieldDiv').children('input[type=textbox],input[type=text],input[type=checkbox],textarea,select');
                }
        
        var lblId = lblelem.attr('id').replace('lbl', '');
        
        mixpanel.track('Field readonly option checked',{ "Field ID": lblId});
        //if (/RecordTypeId/i.test(lblId) == false) {
        if (!$('#readOnlyField').is(":checked")) {
                $(lblelem).removeClass('readOnlyLabel');


                if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').length > 0) {
                        console.log(' Readonly disabled ');
                        $(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').removeAttr('disabled');
                } else if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').length > 0) {
                        if ($(e).parents('.fieldLi').find('.fieldDiv').find('>input[type="textbox"]:first').length > 0) {
                                $(fieldelem).removeAttr('readonly');
                                $('#defaultValue').removeAttr('readonly');
                                reinitializeRatingElement($(e).parents('.fieldLi').find('.fieldDiv'));
                        } else {
                                reinitializeSelectToRadioElement('', $(e).parents('.fieldLi').find('.fieldDiv'), false, false, '', '');
                        }

                } else {

                        if ($(fieldelem).is('select')) {
                                $(fieldelem).removeAttr('disabled');
                                $('#defaultValue').removeAttr('disabled');
                        } else {

                                $(fieldelem).removeAttr('readonly');
                                $('#defaultValue').removeAttr('readonly');
                        }
                }


        } else {
                $(lblelem).addClass('readOnlyLabel');
                /* $('#defaultValue').attr('disabled','true');*/


                if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').length > 0) {
                        console.log(' Readonly enabled ');
                        $(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').attr('disabled', 'true');
                } else if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').length > 0) {
                    /* flexcontrol */
                        if ($(e).parents('.fieldLi').find('.fieldDiv').find('>input[type="textbox"]:first').length > 0) {
                                $(fieldelem).attr('readonly', 'true');
                                $('#defaultValue').attr('readonly', 'true');
                                reinitializeRatingElement($(e).parents('.fieldLi').find('.fieldDiv'));
                                
                        } else {
                                reinitializeSelectToRadioElement('', $(e).parents('.fieldLi').find('.fieldDiv'), true, false, '', '');
                        }
                } else {
                        if ($(fieldelem).is('select')) {
                                $(fieldelem).attr('disabled', 'true');
                                $('#defaultValue').attr('disabled', 'true');
                        } else {
                                $(fieldelem).attr('readonly', 'true');
                                $('#defaultValue').attr('readonly', 'true');
                        }

                }
        }
            <apex:outputText rendered="{!if(isFreemium,false,true)}">
        if(referenceField)
                {
                if (!$(e).is(":checked")) {
                    toggleVisibilityOnReadOnlyChange(e,parentExpandDiv,true);
                }
                else
                {
                     toggleVisibilityOnReadOnlyChange(e,parentExpandDiv,false); 
                }
            }
            </apex:outputText>
             <apex:outputText rendered="{!if(isFreemium,true,false)}">
             if(referenceField)
                {
              upgradeNowMessage('Lookup fields are only available for paid subscriptions.','','');
          }
             chk.checked = true;
             </apex:outputText>
            
        //}

}
        
                function removeError(e){
                        if($(e).hasClass('errorMsg')){
                                $(e).removeClass('errorMsg');
                                $(e).val('');
                        }
                }
                
                
                //Form Setting Toggle Div
                function toggleFormSettingSection(expandFormsettings){   
                //$("#headerPanel").animate({ scrollTop: 0 }, "slow");
                
        if($('#frmSetting').is(':visible')){
                UnSaved(false);
        }else{
          
            $('select.select-primary-element').select2();

            refreshRelatedObjectInfo('.select-secondary-element-wrapper');    
                   disableSelectLookupOption();
                        
                $("#FrmImg").addClass('togHoverActive');
                                
                $(".hoverRelImg").next().hide();
                $(".hoverRelSelectedSecondImg").next().hide();
                $(".hoverRelSelectedThirdImg").next().hide();
                                
                 $('.FrmName').val($('.editText').val());
                 $('.editText').addClass('disableColor');
                 $('.form-editor-title-box').addClass('va-disabled-items');
                    
                $('#tabList .button').addClass('btnSaved');
                $('.ObjectName h4').addClass('disableColor');
                
                $('.objectDiv').addClass('disableColor');
                $('#formTitle').addClass('disableColor');
                //$('.tooltips').addClass('disableColor');
                          
                if(expandFormsettings)
                {
                        $("#frmSetting").slideDown(300);
                     // getRemoteRuleFieldsJs();
                         getRemoteRuleFieldsInfoJs();
                        setHover();
                         setColorTag(); 
                         resetAddRelatedObjectBlock();
                          <apex:outputText rendered="{!if(isFreemium,true,false)}">  
                         resetPrimaryForFreemium('select.select-primary-element'); 
                          </apex:outputText>    
                }
                         
                setRelatedObjectXML();
        }
        if(expandFormsettings){ 

                scrollToElement("headerPanel");

            }
        }
            
        function scrollToElement(elementid)
        {
            if(!isNullOrEmpty(elementid)){ 
                $('html, body').animate({
    scrollTop: $("#"+elementid).offset().top
}, 100);        
            }
        }
        function setRelatedObjectXML()
        {
         console.log('in setRelatedObjectXML ');  
         var secObjectXML='';
             $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {
         if(  !isNullOrEmpty($(secSelectBlock).find('select.select-secondary-element').select2("val")))
         {
            var selectedOptionName=$(secSelectBlock).find('select.select-secondary-element option:selected').attr("name");
            if(!isNullOrEmpty(selectedOptionName))
            {
                        var selectedval=    $(secSelectBlock).find('select.select-secondary-element').select2("val"); 
                         var selectedText=    $(secSelectBlock).find('select.select-secondary-element').select2('data').text;
                             $(secSelectBlock)
                             console.log(' SECONDARY selected Object value-  '+selectedval+' selectedOptionName- '+selectedOptionName);
                             secObjectXML+='<object>';
                             secObjectXML+='<text>'+selectedText+'</text>';
                             secObjectXML+='<value>'+selectedval+'</value>';
                             secObjectXML+='<relationtype>'+selectedOptionName+'</relationtype>';
                             secObjectXML+='</object>';
                             }   
                         }
     });
        secObjectXML='<objects>'+secObjectXML+'</objects>';
            formRelatedObjectXML=secObjectXML;
        
        }
        function getRelatedObjectXML()
        {
        return formRelatedObjectXML;
        }

                var isExpanding = false;
                var isSection=true;
                var i=0;
                /////addded to fix issue: #33 Fields scrolling to top - on nov 26 2014 by balinder
                function toggleGenFieldsSection() {
                        var headerpanelbottomoffset =$('#headerPanel').position().top+$('#headerPanel').outerHeight(true)+184;
                        if (!isExpanding) {
                                if ($(document).scrollTop() > headerpanelbottomoffset) {
                                        $('#availableFieldBox').css('position', 'relative');
                                        $('#availableFieldBox').css('top', $(document).scrollTop() - headerpanelbottomoffset);
                                        //$('#generalFieldBox').css('position', 'relative');
                                }
                                //$('#generalFieldBox').css('top', $('#availableFieldBox').css('top'));
                                isExpanding = true;
                                 
                                var hr = 0;
                                
                                if ($(".generalFields").hasClass("activeItem")) {
                                        console.log(' gnFldImg  collapse '); 
                                        $("#divForGenFields").hide();//.slideUp(300);
                                         $(".generalFields").removeClass('activeItem');
                                         
                                        
                                        if ($(document).scrollTop() > headerpanelbottomoffset) {
                                                $('#availableFieldBox').css('position', 'fixed');
                                                $('#availableFieldBox').css('top', 0);
                                                 
                                        }
                                        $('.list-toggle-div-wrap').show();
                                        isExpanding = false;
                                         
                                } else {
                                        console.log(' gnFldImg expand ');
                                        
                                        $(".generalFields").addClass('activeItem');
                                        
                                         hideAllAvailableFieldLists();
                                         $("#divForGenFields").slideDown(10, function(){
                                                        goToNextTourStop();
                                                });
                                                isSection = true;
                                         

                                        if ($(document).scrollTop() > headerpanelbottomoffset) {
                                
                                                $('#availableFieldBox').css('position', 'fixed');
                                                $('#availableFieldBox').css('top', 0);
                                                
                                        }
                                        else
                                        {
                             
                                        }
                                        isExpanding = false;
                                        
                                }
                        }
                }
                
                function checkInput(evt){
                        var charCode = (evt.which) ? evt.which : evt.keyCode
                        if (charCode > 31 && (charCode < 48 || charCode > 57))
                                return false;    
                        return true;
                }
                function checkRegInput(){
                        var RE = /^-{0,1}\d*\.{0,1}\d+$/;
                        $("#limitValue").next().remove();
                        if($("#limitValue").val() == ''){
                                $("#limitValue").css('border','1px solid red');
                                $("#limitValue").focus();
                                isError = false;                                

                        }else{
                                if(RE.test($("#limitValue").val())){
                                        if($("#limitValue").val() > 99 || $("#limitValue").val() <=0 ){
                                                isError = false;
                                                $("#limitValue").css('border','1px solid red');
                                                $("#limitValue").after('<span style="color:red;">Limit is incorrect<span>');
                                                $("#limitValue").focus();
                                        }else{
                                                $("#limitValue").css('border','1px inset #cecece');
                                                isError = true;                              
                                        }
                                }else{
                                        isError = false;
                                        $("#limitValue").css('border','1px solid red');
                                        $("#limitValue").after('<span style="color:red;">Limit is incorrect<span>');
                                        $("#limitValue").focus();
                                }
                        }
                }
                function errorSave(){
                        $("#dialogSucess").dialog("close");
                        $("#failure").css('display','none');
                        resetSavedButton();
                }

                var isPrimary=false;
                $(document).ready(function(){
                        //Select2 section
                        //$("select.drop-selectEditor").select2();
                     /* binding of on change event of Primary object Select*/
                        setHover();
                        
                });
function changePrimaryObjectCall(elemSource)
{
    <apex:outputText rendered="{!if(isFreemium,true,false)}">
                      if(elemSource.value != '' &&  $.inArray(elemSource.value, validObjects())<0) 
                      {
                        
                         
                          upgradeNowMessage("Only Case, Account, Contact and Lead objects are available in Fast Forms free edition.","","http://visualantidote.com/fastforms#Subscribe");
 
$(elemSource).select2("val",$('#priName').attr('class'));
                    return false;
                      }
                      else{
                      </apex:outputText>
         $(".btnPublishedSaved").text('Publish Draft');
                                $("#btnSaved").removeClass('btnGreenClick');
                                $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to change your form's primary object?<br /><br /></div><div class='secondary'>Changing your form's primary object will remove all fields, related objects and rules from your form. </div></div>");                 
                                // Define the Dialog and its properties.
                                $("#dialog-confirm").dialog({
                                        resizable: false,
                                        modal: true,
                                        title: "Save",
                                        height: "auto",
                                        width: 413,
                                        buttons:{                                        
                                        "Yes":{
                                                click: function () {
                                                        $(this).dialog('close');
                                                        callback(true);
                                                },
                                                text: 'Yes',
                                                'class': 'vabutton1'
                                        },
                                        "No":{
                                                click: function () {
                                                        $(this).dialog('close');                                           
                                                        callback(false);
                                                },
                                                text: 'No',
                                                'class': 'vabutton2'
                                        }           
                                },
                                                                    
                                        open: function( event, ui ) {
                                                $('.ui-dialog :button').blur();
                                        }
                                });
                                $('.ui-dialog :button').blur();
                                $('#dialog-confirm').dialog('option', 'position', 'center');
                                function callback(value) {
                                        if (value) {
                                                //Primary Object Changed
                                                 //saveEditFormName($('#formnameedit').val());
                                                 updateformTitle();
                                                    var formnm=$('#formTitle').val();
                                                 var tracksubmissions=IsTrackingEnabled();
                                                var emailnotifications=IsEmailNotificationsEnabled();
                                                 var notifyemail=getNotificationEmail();
                                                 var  primaryObjectVal=$(elemSource).val();
                                                  var pdfChatterEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationChatter');
                                                 var pdfRecordEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationRecord');
                                                 var pdfEmailEnabled=isPdfAttachmentEnabledFor('.chkbxPDFEmailEnabled');
                                                  var pdfSendEmailTo= getPDFSendToEmail('.txt-pdf-sendtomail');
                                                 console.log(' Updated primaryObjectVal-'+primaryObjectVal)
                                                changePrimaryObject(primaryObjectVal,formnm,tracksubmissions,emailnotifications,notifyemail,pdfChatterEnabled,pdfRecordEnabled,pdfEmailEnabled,pdfSendEmailTo);
                                        }else {
                                                $(elemSource).select2("val",$('#priName').attr('class'));
                                                return false;
                                        }
                                }
                                <apex:outputText rendered="{!if(isFreemium,true,false)}">
                    }/*else condition ends*/
                       </apex:outputText>
}
                function disable_scroll() {
                        document.body.style.overflow="hidden";
                }
                function enable_scroll() {
                        document.body.style.overflow="auto";
                }
                var previousOpenedFirst = false;
                 
                 
                 
                var previousOpenedSecond = false;
                
                
                function setTitleSortable(){
                        {
                            if(RunTag){   
                        console.log('set title parent hit runtag ');           
                               
                              
                                var relatedObjectsJSON=[];
                                      
                                        var relIndx=0;
                                         $('.ObjectName h4 span.secName').each(function(indx){
                                        if($(this).attr('id') != 'priName'){
                                              relIndx++;
                                              var  relObjText=selectRelObjIdByIndex(relIndx);
                                                relatedObjectsJSON.push(createRelJSONObj(relObjText));
                                               
                                                 
                                        }
                                });
                                       
                                if(relIndx==0)
                                {
                                    DummyTrigger('');
                                }
                                else if(relIndx>0){ 
                                 var relatedObjectsXML='<relatedObjects>';
                                        $.each(relatedObjectsJSON, function (index, jsonitem) {
                                            if (relatedObjectsJSON[index].object!=null && relatedObjectsJSON[index].object!='') {
                                               relatedObjectsXML+='<object>'+ relatedObjectsJSON[index].object+'</object>';
                                            }
                                        });
                                        relatedObjectsXML+='</relatedObjects>';           
                                        console.log( ' setTitleSortable -relIndx '+relIndx);
                                         
                                        
                                        addRelatedObjectThird(relatedObjectsXML,'{!JSENCODE(hiddenSelectedObjects)}');                      
                                          
                                
                                }
                                 if(relIndx>=0){ 
                                    toggleFormSettingSection(false); /*added to populate related objects - Dec 10 2014*/ 
                                        UnSaved(false);/*added to populate related objects - Dec 10 2014*/                    
                                        hideSection();
                                        RunTag=false;
                                 }
                        
                        }
                        
                                            
                }
                       /// setTitleParent();
                      
                }
                var previousOpenedThird = false;
                
                var delFirst=false;
                var delSecond=false;
                var delThird=false;
                var delObjectSecond='';
                var delObjectThird='';
                
                var firstImage;
                 
                function setColorTag(){
                    var childCount=1;
                     $('.select-secondary-element-wrapper').find('.secondary-object-block').find('.select2-container.select-secondary-element a').find('img').remove();
                     $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {
                        var optionselected=$(secSelectBlock).find('select.select-secondary-element option:selected');
                         if( isNotNullOrUndefined(optionselected) &&  !isNullOrEmpty($(optionselected).attr('name')))
                         {
                          
                            var selectedOptionName= $(optionselected).attr('name');
                            if(!isNullOrEmpty(selectedOptionName) && selectedOptionName=='detail')
                            {
                                        var containerHtml = '<img class="branchImage" src="'+ffcommonResuorceUrl+'/iconalpha/'+colorTagArray[childCount]+'.png" />';
                                        $(secSelectBlock).find('.select2-container.select-secondary-element a').append(containerHtml);
                            childCount += 1;
                            }   
                         }
                     });
                }
                var delObjectName='';
                
                 
                
                 
                function isLookupOption(fistListId){
                 if(fistListId != undefined){
                 return fistListId.indexOf('lookup') > -1;
                 }
                        return false;
                }
               
                function UnSaved(triggerByELement){
                        previousOpenedThird = false;
                        previousOpenedFirst = false;
                        previousOpenedSecond = false; 
                        $("#frmSetting").slideUp(300);
                        rePopulateFormSettingObjectList();
                        $('.change').removeClass('del');           
                        $('.del').removeClass('del');
                        $('#tabList .button').removeClass('btnSaved');
                        $("#FrmImg").attr("src", "{!URLFOR($Resource.VisualAntidote__iconImages,'Formexpand.png')}");
                        $("#FrmImg").addClass('curChange');
                         
                        $('.ObjectName h4').removeClass('disableColor');
                        $('.editText').removeClass('disableColor');
                         $('.form-editor-title-box').removeClass('va-disabled-items');
         
                        $('.frmSet').removeClass('disableColor');  
                         
                        $('.objectDiv').removeClass('disableColor');
                        
                        $("#FrmImg").removeClass('togHoverActive');
                        $('#formTitle').removeClass('disableColor');
                         setColorTag();  
                         if(triggerByELement)
                         {
                         scrollToElement("headerPanel");
                        }
                        //$('.tooltips').find('img').attr('src','{!URLFOR($Resource.VisualAntidote__iconImages,'Copy-icon-Back.png')}');  
                }
                function rePopulateFormSettingObjectList()
                {
                        parseFormSettingXML (getRelatedObjectXML());
                }
                function parseFormSettingXML(xmlstr)
                {
                         
        
                        if(window.DOMParser)
                        {
                                parser = new DOMParser();
                                xmlDoc = parser.parseFromString(xmlstr, "text/xml");
                        }
                        else // Internet Explorer
                        {
                                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                                xmlDoc.async = false;
                                xmlDoc.loadXML(xmlstr);
                        }
                        
                     
                        var elem=xmlDoc.getElementsByTagName("object");
                         
                            
                         $.each(elem, function(index, objElement){
                                
                                
                                if(objElement.childNodes.length>0)
                                {
                                        
                                    var selectedValue='';
                                                    $.each(objElement.getElementsByTagName("value"), function(index, subitem){
                                                     
                                                         selectedValue=$(subitem).text();
                                                 });
                                                 if(selectedValue!='')
                                                 {
                                                    var relindx=index;
                                                    relindx++;
                                                  setRelatedObjectStyle($('.select-related-'+relindx).parent(),selectedValue);
                                                    
                                                 }
                                                 else
                                                 {
                                                    console.log('Selected Value is empty  ');
                                                 }
                                 }
                                 });
                 }
                function setRelatedObjectStyle(elem,selectedVal)
                {
                        if(elem!=undefined)
                        {
                         console.log('Selected Value is not empty  '+selectedVal);
                        $(elem).find('.delete-object-box').show();
                        $(elem).find('select.select-secondary-element').select2("val",selectedVal);
                    }
                        
                }
                function updateformTitle()
                {
                        $('#formTitle').val($('#formnameedit').val());
                }
                function resetTrackSubmissions(){
                 if( $('.chkbxtrackingEnabled').prop('checked'))
                    {
                 updateTrackSubmissionsOption(true);
                    }
                    else
                    {
                 updateTrackSubmissionsOption(false);
                
                    }
                }
                /*saved()  function starts  -call from save changes in form settings */
                  
                 function Saved(){
                     
                    
                    console.log(' Related Object XML- '+getRelatedObjectXML());
                
                  
                             updateformTitle(); 
                                resetSavedButton();
                           
                            var formnm=$('#formTitle').val();
                                 var tracksubmissions=IsTrackingEnabled();
                    
                             var emailnotifications=IsEmailNotificationsEnabled();
                    var notifyemail=getNotificationEmail();
                    var hiddenObjValues=fetchHiddenObjectValues();
                   
                     var relatedObjectsJSON=[];
                     $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(indx,selectParentElem){
                        var selectedValue=$(selectParentElem).find('select.select-secondary-element').select2("val");
                      if(!isNullOrEmpty(selectedValue))
                      {
                        relatedObjectsJSON.push(createRelJSONObj(selectedValue));
                        console.log(' selectedValue  '+selectedValue+'  Index of Rel obj-'+indx);
                      }

                    });
                    
                                        var relatedObjectsXML='<relatedObjects>';
                                        $.each(relatedObjectsJSON, function (index, jsonitem) {
                                            if (relatedObjectsJSON[index].object!=null && relatedObjectsJSON[index].object!='') {
                                               relatedObjectsXML+='<object>'+ relatedObjectsJSON[index].object+'</object>';
                                            }
                                        });
                                        relatedObjectsXML+='</relatedObjects>';
                                         console.log(' relatedObjectsXML '+relatedObjectsXML+' Hidden object values-'+hiddenObjValues);
                                         var pdfChatterEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationChatter');
                                                 var pdfRecordEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationRecord');
                                                 var pdfEmailEnabled=isPdfAttachmentEnabledFor('.chkbxPDFEmailEnabled');
                                                  var pdfSendEmailTo= getPDFSendToEmail('.txt-pdf-sendtomail');
                                saveChanges(relatedObjectsXML,hiddenObjValues,formnm ,tracksubmissions,emailnotifications,notifyemail,pdfChatterEnabled, pdfRecordEnabled,pdfEmailEnabled,pdfSendEmailTo);
                                
                                $('#hiddenLiId').val('ftrSortableForLabelli');
                                saveButton();
                                
                        
                             changeRelObjIndx='';
                                $('.change').removeClass('del');
                                $('.del').removeClass('del'); 
                                $('#tabList .button').removeClass('btnSaved');
                                $("#FrmImg").attr("src", "{!URLFOR($Resource.VisualAntidote__iconImages,'Formexpand.png')}");
                        
                             reEnableHeaderSection();
         
                                $('.ObjectName').find('h4').removeClass('disableColor');
                                $('.editText').val($('.FrmName').val());
                                $('.frmSet').removeClass('disableColor');
                                $("#FrmImg").addClass('curChange');
                                $("#FrmImg").removeClass('togHoverActive'); 
                                
                                $('.objectDiv').removeClass('disableColor');
                               
                                $('.tooltips').removeClass('disableColor');
                                //$('.tooltips').find('img').attr('src','{!URLFOR($Resource.VisualAntidote__iconImages,'Copy-icon-Back.png')}');         
                                hideSection(); 
                        
                       // updateFieldColor();// this is disabled  for now
                        scrollAvailableDiv();
                }
                 
                function reEnableHeaderSection()
                {
                        $("#frmSetting").slideUp(300);            
                                $('.editText').removeClass('disableColor');
                                $('.form-editor-title-box').removeClass('va-disabled-items');
                }
                /*saved() function ends*/
        function IsTrackingEnabled(){
        var tracksubmissions=false;
        if( $('.chkbxtrackingEnabled').prop('checked'))
                    {
                 tracksubmissions=true;
                    }
                    else
                    {
             tracksubmissions=false;
                
                    }
                    return tracksubmissions;
        }
        function isPdfAttachmentEnabledFor(chkbxElem)
        {
           var returnflag=false;
        if( $(chkbxElem).prop('checked'))
                    {
                 returnflag=true;
                    }
                    else
                    {
             returnflag=false;
                
                    }
                    return returnflag;
        }
        function getPDFSendToEmail(elemSource)
        {
           var returnVal=$(elemSource).val();
        if(isNullOrEmpty(returnVal))
         {
            returnVal='';
         }
                    return returnVal;
        }
        function onPDFEnabledChange(elemSource)
        {

            <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                        upgradeNowMessage('PDF confirmation feature is only available in Professional or Enterprise editions of Fast Forms.','','');                         
                                        elemSource.checked = false;
                        </apex:outputText>
                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
            if($(elemSource).is(":checked"))
            {
                $(elemSource).parents('.pdf-confirmations-block').find('.pdf-chatter-upload').slideDown(300);
            }
            else
            {
                $(elemSource).parents('.pdf-confirmations-block').find('.pdf-chatter-upload').slideUp(300);
            }
             </apex:outputText>
        }
        function onPDFEmailEnabledChange(elemSource)
        {
            <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                        upgradeNowMessage('PDF confirmations emails are only available in Professional or Enterprise editions of Fast Forms.','','');                         
                                        elemSource.checked = false;
                        </apex:outputText>
                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
            if($(elemSource).is(":checked"))
            {
                $(elemSource).parent().find('input[type="text"]').slideDown(300);
            }
            else
            {
               $(elemSource).parent().find('input[type="text"]').slideUp(300);
            }
             </apex:outputText>
        }
        function onEmailNotificationsEnabled(elemSource)
        {
            if($(elemSource).is(":checked"))
            {
                $(elemSource).parent().find('input[type="text"]').slideDown(300);
            }
            else
            {
               $(elemSource).parent().find('input[type="text"]').slideUp(300);
            }
        }
        function IsEmailNotificationsEnabled(){
        var notifyinemails=false;
        if( $('.chkbxemailNotifications').prop('checked'))
                    {
                 notifyinemails=true;
                    }
                    else
                    {
             notifyinemails=false;
                
                    }
                    return notifyinemails;
        }
        function getNotificationEmail(){
        return $('#inputTxtemailNotifications').val(); 
        }
        function RemoveAllClassColorCodes(elem)
        {
            $(elem).removeClass('A');
            $(elem).removeClass('B');
            $(elem).removeClass('C');
            $(elem).removeClass('D');
            $(elem).removeClass('E');
            $(elem).removeClass('F');
            $(elem).removeClass('G');
            $(elem).removeClass('H');
            $(elem).removeClass('I');
        }
        function removeColorCodes(elemtext)
        {
            var elemtxt=elemtext;
            if(!isNullOrEmpty(elemtext))
            {
            elemtxt=  elemtxt.replace(' A', ' ');
            elemtxt=  elemtxt.replace(' B', ' ');
            elemtxt=  elemtxt.replace(' C', ' ');
            elemtxt=  elemtxt.replace(' D', ' ');
            elemtxt=  elemtxt.replace(' E', ' ');
            elemtxt=  elemtxt.replace(' F', ' ');
            elemtxt=  elemtxt.replace(' G', ' ');
            elemtxt=  elemtxt.replace(' H', ' ');
            elemtxt=  elemtxt.replace(' I', ' ');
            }
            return elemtxt;
        }
        function isIdHasChildColorCode(elemtext)
        {
            console.log('listname-- '+elemtext);
            var returnflag=false;
            if(!isNullOrEmpty(elemtext) && colorTagArray.indexOf(elemtext+'')>=0)
            {
             returnflag=true;
           }
           return returnflag;
        }
       
        function updateFieldColor(){
                         
                        $('.list-toggle-div-wrap').each(function(indx,wrapperDiv){
                            
                            if($(wrapperDiv).attr('data-childclass') !=undefined && $(wrapperDiv).attr('data-childclass') !=""){
                                //var clsName = $("#ListMainRel3").attr('data-childclass');
                                var clsName = safeStringValue($(wrapperDiv).attr('data-childclass'),'');
                                var relListId=$(wrapperDiv).attr('id');
                                var classnameindx="";
                                if(!isNullOrEmpty(relListId))
                                {
                                           classnameindx=relListId.replace('ListMainRel','');                                                         
                                }
                                if(!isNullOrEmpty(classnameindx))
                                {
                                    
                                var sortableClassName='sortableForRelFields'+classnameindx;
                                $("#parentUlForm li .formUlLabel li.fieldLi ."+sortableClassName).each(function(){
                                        RemoveAllClassColorCodes(this);
                                        $(this).addClass(clsName);
                                        var lbl = $(this).find("label").attr('id');
                                        var previousClass = safeStringValue(lbl.substr(lbl.length - 1),'');
                                        var fldLbl = lbl.substr(3);
                                        fldLbl = fldLbl.substr(0,fldLbl.length-1);
                                        $(this).find("label").attr('id','lbl'+fldLbl+clsName);
                                        var inputFld=$(this).find(".fieldDiv").find(':input[type!="hidden"][class!="select2-input"]');
                                        inputFld.attr('id',inputFld.attr('id').replace(fldLbl+previousClass,fldLbl+clsName));
                                        $(this).find('#isUserSelectedRequired'+fldLbl+previousClass).attr('id','isUserSelectedRequired'+fldLbl+clsName);
                                        
                                        $(this).find('#errMsgForRequired'+fldLbl+previousClass).attr('id','errMsgForRequired'+fldLbl+clsName);
                                        $(this).find('#defaultValue'+fldLbl+previousClass).attr('id','defaultValue'+fldLbl+clsName);
                                        $(this).find('#isDefaultRequired'+fldLbl+previousClass).attr('id','isDefaultRequired'+fldLbl+clsName);
                                        $(this).find('#hideField'+fldLbl+previousClass).attr('id','hideField'+fldLbl+clsName);
                                        $(this).find('#upsertField'+fldLbl+previousClass).attr('id','upsertField'+fldLbl+clsName);  
                                        $(this).find('.editImg').attr('onclick' , "openEditDialog('"+ $(this).attr('id').replace(fldLbl+previousClass,fldLbl+clsName) +"',true);"); 
                                        if($(this).find('.deleteField').attr('id') != undefined){
                                                $(this).find('.deleteField').attr('id',$(this).attr('id').replace(fldLbl+previousClass,fldLbl+clsName));
                                        }
                                        $(this).attr('id',$(this).attr('id').replace(fldLbl+previousClass,fldLbl+clsName));
                                        $(this).find(".listName").text('');
                                        $(this).find(".listName").text(sortableClassName+' '+clsName);
                                        
                                  });
                                }
                        }
                        });
                        
                        
                        
                }
                
                function listHideRenderDiv(){
                        setTitleSortable();            
                        
                        $("#parentUlForm li").each(function(){
                                $(this).find('.formUlLabel').each(function(){
                                        $(this).find('li').each(function(){
                                                if($(this).hasClass('lbl') == false && $(this).hasClass('sortableForRelFields1')){
                                                    var formLiElem=$(this);
                                                     $('.form-information .secName-wrap').each(function(indx,parentDiv){
                                                        var objvalue=$(parentDiv).find('.secName').attr('id') ;
                                                        var elemFieldTitle=$(formLiElem).attr('title');
                                                        console.log(' OBJ Value-'+objvalue);
                                                    if(!isNullOrEmpty(objvalue) && !isNullOrEmpty(elemFieldTitle) && elemFieldTitle.indexOf('(Lookup)')>1){
                                                                var objLabel=objvalue.substring(objvalue.indexOf('(')+1,objvalue.indexOf(')'));

                                                                if( objvalue==elemFieldTitle.replace('(Lookup)','('+objLabel+')')){
                                                                    
                                                                        $(formLiElem).remove();
                                                                }
                                                        }

                                                     });
                                                        
                                                }
                                        });
                                });    
                        });
                        
                      
                        $("#parentUlForm li").each(function(){
                                $(this).find('.formUlLabel').each(function(){
                                        $(this).find('li').each(function(){
                                                if($(this).hasClass('lbl') == false && $(this).hasClass('sortableForRelFields1')){
                                                        var fName=$(this).find('div').attr('lblname');
                                                        $("#sortableForRelFields1 li").each(function(){                            
                                                                if(fName == $(this).find('div').attr('lblname')){
                                                                        $(this).remove();
                                                                }
                                                        });
                                                }
                                        });
                                });    
                        });
                        $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                            var sortableClassname=$(sortableUL).attr('id');
                            if(!isNullOrEmpty(sortableClassname))
                            {
                            $("#parentUlForm li").each(function(){
                                $(this).find('.formUlLabel').each(function(){
                                        $(this).find('li').each(function(){
                                                if($(this).hasClass('lbl') == false && $(this).hasClass(sortableClassname)){
                                                        var fName=$(this).find('div').attr('lblname');
                                                        $(sortableUL).find("li").each(function(){
                                                                if(fName == $(this).find('div').attr('lblname')){
                                                                        $(this).remove();
                                                                }
                                                        });
                                                }
                                        });
                                });    
                            });
                        }
                         }); 

                        
                        removeReference();
                        addRequiredParentOnSaved();
                        addRequiredMarkOnLabel();
                        
                        //$('#ListMainRel1 .objName').text($('#priName').text()+' Fields');
                        $('#ListMainRel1 .objName').text($('#priName').text());
                        <apex:outputText rendered="{!if(isFreemium,true,false)}">
                         resetFreemiumHTML();
                    </apex:outputText>
                        
                        
                }
                function resetFreemiumHTML()
                {
                    $('#divForFields .list-toggle-div').unbind('click');
                    if($.inArray($('#ListMainRel1 .objName').text(), validObjects())<0)
                    {
                        $('#ListMainRel1 .freemium-html').html(getFreemiumHTML('Fields from this object type are','',''));
                    $('#ListMainRel1 .freemium-html').show();
                        $('#ListMainRel1 .list-toggle-div').bind( "click", function() {
                            upgradeNowMessage("Only Case, Account, Contact and Lead fields are available in Fast Forms free edition.","","http://visualantidote.com/fastforms#Subscribe");
                        });
                    }
                    $('.available-fields-block-wrapper .list-toggle-div-wrap').each(function (indx,ListRelElem){
                        $(ListRelElem).find('.freemium-html').html(getFreemiumHTML('Multi-object forms are','',''));
                      $(ListRelElem).find('.freemium-html').show();
                      $(ListRelElem).find('.list-toggle-div').bind( "click", function() {
                            upgradeNowMessage("Multi-object forms are only available for paid subscriptions","","http://visualantidote.com/fastforms#Subscribe");
                        });
                    });
                    
                }
                function SetTitleColor()
                {
console.log(' in SetTitleColor');
                       
                        var indxImg=1;
                        $('.list-toggle-div-wrap').removeAttr('data-ischild');
                        $('.list-toggle-div-wrap').removeAttr('data-childclass');
                        $('.list-toggle-div-wrap').removeClass('child-');
                      
                        RemoveAllClassColorCodes($('.list-toggle-div-wrap'));
                       
                        $('.form-information .secName-wrap').each(function(indx,parentDiv){
                            var imgSrc=$(parentDiv).hasClass('object-detail');
                        
                        if($(parentDiv).hasClass('object-detail') && !isNullOrEmpty($(parentDiv).attr('data-relobj')) && !isNullOrEmpty($($('.list-toggle-div-wrap')[indx+1]).attr('id')))
                            {
                                var childindx=$(parentDiv).attr('data-relobj');
                                var listIdElem=$($('.list-toggle-div-wrap')[indx+1]);
                                var backimgcss=$('.secName-wrap.object-detail.relobj-'+childindx+' .secName').css('background-image');
                                $(listIdElem).find('.objName').css('background-image',"none");
                                $(listIdElem).find('.objName').css('background-image',backimgcss);//"url("+imgSrc+")");
                                $(listIdElem).find('.objName').css('background-position',"right center");
                                $(listIdElem).find('.objName').css('background-repeat',"no-repeat");
                                $(listIdElem).attr('data-ischild','true');
                                var childClass='';
                                if(!isNullOrEmpty(colorTagArray[childindx]))
                                {
                                    childClass= colorTagArray[childindx];
                                }
                                $(listIdElem).attr('data-childclass',childClass);
                                 
                            }
                        });
                        $('.list-toggle-div-wrap').each(function(indx,elem){
                            var isChild=$(elem).attr('data-ischild');
                            var childClass=$(elem).attr('data-childclass');
                            if(!isNullOrEmpty(isChild) && !isNullOrEmpty(childClass) && (isChild=='true' || isChild==true))
                            {
                                 $(elem).addClass('child-'+childClass);
                            }
                        });
                }
                var isSame=false;
                function addRequiredParentOnSaved(){
                         
                        SetTitleColor();

                        //Remove required reference field from Editor Area            
                        $("#parentUlForm li").each(function(){
                                $(this).find('.formUlLabel').each(function(){
                                        $(this).find('li').each(function(){                  
                                                if($(this).hasClass('lbl') == false ){                                                                        
                                                         if($(this).hasClass('sortableForRelFields1') && isFieldReference(this))
                                            {
                                          deleteField($(this).attr('id'));
                                              //$(this).hide();                                
                                                 }
                                                }
                                        });
                                }); 
                        });
                        removeReference();
                        removePrimaryLookupField();
                        $("#sortableForRelFields1").find('li').each(function(){
                                if($(this).find('textarea').length>0){
                                        $(this).find('textarea').text('');
                                } 
                                              
                                        if( ($(this).css("display") != "none" && $(this).attr("isrequired")== true || $(this).attr("isrequired")=="true") && ! isFieldReference(this)){ 
                                         
                                            $(this).dblclick();
                                         
                                                
                                        } 
                                                   
                        });                
                        
                        $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
                            $(sortableUL).find('li').each(function(){
                                if($(this).find('textarea').length>0){
                                        $(this).find('textarea').text('');
                                }
                                 
                                        var listId='';                 
                                        if($(this).css("display") != "none" && ($(this).attr("isrequired")== true || $(this).attr("isrequired")=="true")  ){                        
                                                $(this).dblclick();
                                                listId=$(this).attr("id");
                                        }
                                            
                                             
                                  
                        });
                         });              
                         
                }
                
               
    
     
    function createRelJSONObj(relatedObjectName)
    {
        var data= { "object": relatedObjectName};
      return data;
    }
     
                 function selectSecNameIdByIndex(senderCount){
                     var idstr="";
                     
                    $(".ObjectName span.secName").each(function(index){
                    if(index ==senderCount)
                    {
                    
                    idstr =$(this).attr('id');
                    }
                    
                    });
                    return idstr;
                 }
                 function selectSecNameTextByIndex(senderCount){
                    var idstr="";
                     
                    $(".ObjectName span.secName").each(function(index){
                    if(index ==senderCount)
                    {
                    
                    idstr =$(this).text();
                    }
                    
                    });
                    return idstr;
                 }
                 function selectRelObjIdByIndex(senderCount){
                    var idstr="";
                     
                    $(".ObjectName span.secName").each(function(index){
                    if((index+1) ==senderCount)
                    {
                    
                    idstr =$(this).attr('id');
                    }
                    
                    });
                    return idstr;
                 }
                 function selectRelObjTextByIndex(senderCount){
                    var idstr="";
                     
                    $(".ObjectName span.secName").each(function(index){
                    if((index+1) ==senderCount)
                    {
                    
                    idstr =$(this).text();
                    }
                    
                    });
                    return idstr;
                 }
                 function selectSecNameHtmlByIndex(senderCount){
                    var idstr="";
                     
                    $(".ObjectName span.secName").each(function(index){
                    if(index ==senderCount)
                    {
                    
                    idstr =$(this).html();
                    }
                    
                    });
                    return idstr;
                 }
                 function isSecNameElemExistsByIndex(senderCount){
                    var isexists=false;
                     
                     if($(".ObjectName span.secName").length>senderCount)
                     {
                     isexists=true;
                     }
                    
                    
                    return isexists;
                 }
                    
                 function resetAfterPrimaryObjectChange(){
                             $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {

                                     $(secSelectBlock).find('.select2-container').remove();
                            });
                            reEnableHeaderSection();

                 }
                 function resetSelect(){
                     $('.select-secondary-element-wrapper').find('.secondary-object-block').remove();
                       
                        $("#parentUlForm li").each(function(){
                                $(this).find('.formUlLabel').each(function(){
                                        $(this).find('li').each(function(){
                                                if($(this).hasClass('lbl') == false){
                                                        $(this).remove();
                                                }
                                        });
                                });    
                        });
                      
                       
                        DummyTrigger('');
                        $('.change').removeClass('del');
                        $('.del').removeClass('del'); 
                        $('#tabList .button').removeClass('btnSaved');
                        $("#FrmImg").attr("src", "{!URLFOR($Resource.VisualAntidote__iconImages,'Formexpand.png')}");
                        
                        $("#frmSetting").slideUp(300);
                                                
                        $('.editText').removeClass('disableColor');
                        $('.form-editor-title-box').removeClass('va-disabled-items');
                        $('.ObjectName').find('h4').removeClass('disableColor');
                        $('.editText').val($('.FrmName').val());
                        $('.frmSet').removeClass('disableColor');
                        $("#FrmImg").addClass('curChange'); 
                         
                        $('.objectDiv').removeClass('disableColor');
                       
                        $('.tooltips').removeClass('disableColor');
                        $('.tooltips').find('img').attr('src','{!URLFOR($Resource.VisualAntidote__iconImages,'Copy-icon-Back.png')}');         
                        hideSection();
                        $('#ListMainRel1 .objName').text($('#priName').text()+' Fields');            
                }
                
               
             
                function refreshRelatedObjectInfo(parentMainWrapper){

    var selectHTML =getRelatedObjSelectOptionHTML();
    $(parentMainWrapper).find('.secondary-object-block').each(function(indx,selectParentDiv){
            restructureRelatedObjSelectElement($(selectParentDiv).find('select.select-secondary-element'), selectHTML);
    });
       
         
    }
 
function disableSelectLookupOption()
    {
      var lookupSelected=[];
      $('.select-secondary-element-wrapper .secondary-object-block select').each(function (indx, selectElement) {
        if($(selectElement).find('option:selected').attr('name')=='lookup')
        {
         // lookupSelected.push({"order":indx,"svalue":$(selectElement).val()});
          lookupSelected.push($(selectElement).val());
        }
      });
      $('.select-secondary-element-wrapper .secondary-object-block select option').each(function (indx, optionelem) {
         var optgrpclass=$(optionelem).parent().attr('class');
        if(!isNullOrEmpty(optgrpclass) && optgrpclass=='LookupOption')
         {
          $(optionelem).removeAttr('disabled', 'disabled');
           $(optionelem).removeClass('display-none');
        }
      });
       
      $('.select-secondary-element-wrapper .secondary-object-block select').each(function (selindx, selectElement) {
      $(selectElement).find('optgroup').each(function (index, optgroup) {
        var optgrpclass=$(optgroup).attr('class');
         if(!isNullOrEmpty(optgrpclass) && optgrpclass=='LookupOption')
         {
        $(optgroup).find('option').each(function (indx, optionelem) {
console.log(' item found in array '+$.inArray($(optionelem).val(), lookupSelected))
            if(!$(optionelem).is(':selected') && $.inArray($(optionelem).val(), lookupSelected)>=0) {
                 
                 
                    $(optionelem).attr('disabled', 'disabled');
                       $(optionelem).addClass('display-none');
                    
            }
            else{
             // $(optionelem).removeAttr('disabled', 'disabled');
                      // $(optionelem).removeClass('display-none');
            }
        });
        }
    });
      
      });
    }
function OnChangeRelatedObject(thisElement,callBackConfirmed)
{
    var objUsedInRule=false;
    var relIndex=$(thisElement).attr('data-rel-index');
    var zeroBasedIndex=relIndex;
    var sortableIndx=relIndex;
    sortableIndx++;
    var sortForRelFieldsClass="sortableForRelFields"+sortableIndx;
        console.log(' OnChangeRelatedObject---'+sortForRelFieldsClass);
        var currentSelectedValue=$(thisElement).val();
     var originalRelObjectValue =  selectRelObjIdByIndex(zeroBasedIndex);
      <apex:outputText rendered="{!if(isFreemium,true,false)}">
         upgradeNowMessage("Related objects are only available for paid subscriptions.","","http://visualantidote.com/fastforms#Subscribe");
 
$(thisElement).select2("val", originalRelObjectValue);
                    return false;
                       
                      </apex:outputText>
                      <apex:outputText rendered="{!if(isFreemium,false,true)}">
    if(originalRelObjectValue != "" &&  changeRelObjIndx!=relIndex){
     var   fieldsExist=false;
        var lstOfFields='<ul style="text-align:left">';
        var lifieldsCount=0;
        $("#parentUlForm li").each(function(){
            $(this).find('.formUlLabel').each(function(){
                $(this).find('li').each(function(){
                    if($(this).hasClass('lbl') == false && $(this).hasClass(sortForRelFieldsClass)){
                        // var fieldId = $(this).find('.fieldDiv input,textarea,select').eq(0).attr('id');
                        /*modified to fix the child object element id issue on mar 10 2015 */
                        fieldsExist=true;
                        var liElement= $(this);
                        var fieldId =getFormattedElemId(liElement);
                        if (itemUsedInRule(fieldId))
                            objUsedInRule = true;

                        if( lifieldsCount<5)
                        {
                            lstOfFields +='<li>'+$(this).find('div > label').eq(0).text()+'</li>';
                        }
                        lifieldsCount++; /*updated by balinder nov 21 2014- issue:#38 Popup text issue in modal confirm when editdialog is open and useer tries to save the changes*/
                                                             
                    }
                });
            });    
        });
        if(lifieldsCount>5)
        {
            var extraFieldsCount= lifieldsCount-5;
            lstOfFields +='<li> and '+extraFieldsCount+' more </li>';
        }
        lstOfFields = lstOfFields+'</ul>';
        
        var childClass='';
        
        if(fieldsExist){                    
            var  childClassSpan='';
            if($('.form-information .secName-wrap').length>=zeroBasedIndex)
            {
                var relObjIndx= $('.form-information .secName-wrap').eq( zeroBasedIndex-1 ).attr('data-relobj');
                if(!isNullOrEmpty(relObjIndx) && !isNullOrEmpty(colorTagArray[relObjIndx]))
                {
                    childClass= colorTagArray[relObjIndx];
                    childClassSpan='<span class="child-class color-'+childClass+'"></span>';
                }
            }
                                                
            if (objUsedInRule) {
                showError("<div class='primary'>This object's fields are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
                callback(false);
            } else {
                var dialogBody = "<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to remove this object?<br /><br /></div><div class='secondary'>Removing <b>"+ selectRelObjTextByIndex(zeroBasedIndex)+ childClassSpan + "</b> will remove the following fields from your form:<br/>" + lstOfFields + "</div></div>";
                                                        
                $("#dialog-confirm").html(dialogBody);
                                     
         
                // Define the Dialog and its properties.
                $("#dialog-confirm").dialog({
                    resizable: false,
                    modal: true,
                    title: "Save",
                    height: "auto",
                    width: 413,
                    buttons:  {
                        "Yes":{
                            click: function () {
                                $(this).dialog('close');
                                callback(true);
                               changeRelObjIndx=relIndex;
                            },
                            text: 'Yes',
                            'class': 'vabutton1'
                        },
                        "No":{
                            click: function () {
                                $(this).dialog('close');
                                                                                                                             
                                callback(false);
                            },
                            text: 'No',
                            'class': 'vabutton2'
                        }                         
                    },
                                                                                    
                    open: function( event, ui ) {
                        $('.ui-dialog :button').blur();
                    }
                });
            }
        }else{
                                                         
            
            
        }
        $('.ui-dialog :button').blur();
        $('#dialog-confirm').dialog('option', 'position', 'center');
        function callback(value) {
            if (value) {
                if($(thisElement).val == ''){                     
                    
                }else{
                    
                }
                deleteRemovedObjFieldLi(thisElement);
                Saved();
                                                                        
            }else {
                $(thisElement).select2("val", originalRelObjectValue);
              
                                                                                
                return false;
            }
        }
    }
    else
    {
        updateFormSettingsSelectElements();
    }
     </apex:outputText>
                         
}/*onchangerelatedobject ends */
function updateFormSettingsSelectElements()
{
    $('.secondary-object-block .select2-container.select-secondary-element').each(function(indx,select2Elem){
        /*remove all classes starts with color-tag*/
        $(select2Elem).removeClass (function (index, css) {
            return (css.match (/(^|\s)color-tag-\S+/g) || []).join(' ');
        });
    });
    
    //Set Color indicator 
    var childCount=1;   
    //var urlResAlpha="{!URLFOR($Resource.VisualAntidote__alpha)}";
    $('.select2-container.select-secondary-element a').find( ".branchImage" ).remove();;
    $('.secondary-object-block .scroll-parent').each(function (indx, selectElemParent) {
        var fistListVal = $(selectElemParent).find('select.select-secondary-element').val();
        var groupLabel = $(selectElemParent).find("select.select-secondary-element option[value='" + fistListVal + "']").parent().attr('label');
        var containerHtml = '';
        if (groupLabel == "Child Objects") {
            //containerHtml = '<img class="branchImage" src="' + urlResAlpha + colorTagArray[countChild] + '.png" />';
           containerHtml = '<img class="branchImage" src="'+ffcommonResuorceUrl+'/iconalpha/'+colorTagArray[childCount]+'.png" />';
            childCount += 1;
        }
        $(selectElemParent).find('.select2-container.select-secondary-element a').append(containerHtml);
    });
    disableSelectLookupOption();
}
function deleteRemovedObjFieldLi(relSelectElem)
{
  var relIndex= $(relSelectElem).attr('data-rel-index');

  if(!isNullOrEmpty(relIndex))
    {   
    var listIndx=relIndex;
  listIndx++; 
       if($('#ListMainRel'+listIndx)!=undefined)
       {
          var sortableClassName= $('#ListMainRel'+listIndx).find('ul.dropfields').attr('id');
          if(!isNullOrEmpty(sortableClassName))
          {
            $("#parentUlForm li").each(function () {
                    $(this).find('.formUlLabel').each(function () {
                            $(this).find('li').each(function () {
                                    if ($(this).hasClass('lbl') == false && $(this).hasClass(sortableClassName)) {
                                            $(this).remove();
                                    }
                            });
                    });
            });
          }
       }
    }

}
    function addRelatedObject(elemSource)
    {
        <apex:outputText rendered="{!IF(isFreemium,true,false )}">

                          upgradeNowMessage("Related objects are only available for paid subscriptions.","","http://visualantidote.com/fastforms#Subscribe");
 
                  </apex:outputText>
                  <apex:outputText rendered="{!IF(isFreemium,false,true )}">

                         
        var parentWrapperDiv=$(elemSource).parents('.select-secondary-element-wrapper');
        $(parentWrapperDiv).find('div.scroll-parent.add-related-obj').hide();
        
            var relWrapElem=$('<div/>').html($('#relatedSelObjWrapperTEMP').html());
            
             var selectHTML =getRelatedObjSelectOptionHTML();
             
            if($(parentWrapperDiv).find('.secondary-object-block').length>0)
            {
            var lastDiv = $(parentWrapperDiv).find('.secondary-object-block').last();
            $( lastDiv ).after( $( relWrapElem).html() );
            }
            else
            {
                $( parentWrapperDiv ).prepend( $( relWrapElem).html() );
               
            }
            if($(parentWrapperDiv).find('.secondary-object-block').length>0)
            {
                var count=$(parentWrapperDiv).find('.secondary-object-block').length;
                var lastDiv = $(parentWrapperDiv).find('.secondary-object-block').last();
                $( lastDiv).find('select.select-secondary-element').removeClass('select-related-');
                $( lastDiv).find('select.select-secondary-element').addClass('select-related-'+count);
                $( lastDiv).find('select.select-secondary-element').attr('data-rel-index',count);
             restructureRelatedObjSelectElement($( lastDiv).find('select.select-secondary-element'), selectHTML);
            }
            else
            {
                var elementDiv=$(parentWrapperDiv).find('.secondary-object-block');
                $( elementDiv).find('select.select-secondary-element').removeClass('select-related-');
                $( elementDiv).find('select.select-secondary-element').addClass('select-related-1');
                $( elementDiv).find('select.select-secondary-element').attr('data-rel-index',1);
            }
            if($(parentWrapperDiv).find('.secondary-object-block').length<maxRelatedObject)
        {
            $(parentWrapperDiv).find('div.scroll-parent.add-related-obj').show();
        }
         disableSelectLookupOption();
        </apex:outputText>
    }
    function resetAddRelatedObjectBlock(){
        if($('.select-secondary-element-wrapper .secondary-object-block').length<maxRelatedObject)
        {
            $('.select-secondary-element-wrapper').find('div.scroll-parent.add-related-obj').show();
        }
        else
        {
            $('.select-secondary-element-wrapper').find('div.scroll-parent.add-related-obj').hide();
        }
    }
    function refreshChildRecordsFieldLi()
    {
        $('.list-toggle-div-wrap').each(function(indx,wrapperDiv){
                            
                            if($(wrapperDiv).attr('data-childclass') !=undefined && $(wrapperDiv).attr('data-childclass') !=""){
                                var sortableClassName='';
                                 var clsName = safeStringValue($(wrapperDiv).attr('data-childclass'),'');
                                var relListId=$(wrapperDiv).attr('id');
                                var classnameindx="";
                                if(!isNullOrEmpty(relListId))
                                {
                                        classnameindx=relListId.replace('ListMainRel',''); 
                                        if(!isNullOrEmpty(classnameindx))
                                        {
                                            
                                        sortableClassName='sortableForRelFields'+classnameindx;
                                        }                                                        
                                }
                                if(!isNullOrEmpty(sortableClassName))
                                  {
                                   $("#parentUlForm li .formUlLabel li").each(function () {
                                           
                                                        var listnm=$(this).find('span.listName').text();

                                                            if ($(this).hasClass('lbl') == false && $(this).hasClass(sortableClassName) && listnm.split(' ').length>1 && listnm.split(' ')[1].length==1) {
                                                              
                                                               RemoveAllClassColorCodes(this); 
                                                               var previousClass=safeStringValue(listnm.split(' ')[1]+'','');
                                                               $(this).removeClass(previousClass);
                                                               $(this).addClass(clsName);  
                                                               var lbl = $(this).find("label").attr('id');
                                                                  console.log(' previousClass:'+previousClass+' clsName:'+clsName);
                                                                var fldLbl = lbl.substr(3);
                                                                fldLbl = fldLbl.substr(0,fldLbl.length-1);
                                                                $(this).find("label").attr('id','lbl'+fldLbl+clsName);
                                                                var inputFld=$(this).find(".fieldDiv").find(':input[type!="hidden"][class!="select2-input"]');
                                                                inputFld.attr('id',inputFld.attr('id').replace(fldLbl+previousClass,fldLbl+clsName));
                                                                $(this).find('#isUserSelectedRequired'+fldLbl+previousClass).attr('id','isUserSelectedRequired'+fldLbl+clsName);
                                                                
                                                                $(this).find('#errMsgForRequired'+fldLbl+previousClass).attr('id','errMsgForRequired'+fldLbl+clsName);
                                                                $(this).find('#defaultValue'+fldLbl+previousClass).attr('id','defaultValue'+fldLbl+clsName);
                                                                $(this).find('#isDefaultRequired'+fldLbl+previousClass).attr('id','isDefaultRequired'+fldLbl+clsName);
                                                                $(this).find('#hideField'+fldLbl+previousClass).attr('id','hideField'+fldLbl+clsName);
                                                                $(this).find('#upsertField'+fldLbl+previousClass).attr('id','upsertField'+fldLbl+clsName);  
                                                                $(this).find('.editImg').attr('onclick' , "openEditDialog('"+ $(this).attr('id').replace(fldLbl+previousClass,fldLbl+clsName) +"',true);"); 
                                                                if($(this).find('.deleteField').attr('id') != undefined){
                                                                        $(this).find('.deleteField').attr('id',$(this).attr('id').replace(fldLbl+previousClass,fldLbl+clsName));
                                                                }
                                                                $(this).attr('id',$(this).attr('id').replace(fldLbl+previousClass,fldLbl+clsName));
                                                                $(this).find(".listName").text('');
                                                                $(this).find(".listName").text(sortableClassName+' '+clsName);
                                                            }
                                                  
                                    });
                                 }
                               
                        }
                        });
 
                 $("#parentUlForm li .formUlLabel li:not(.generalSortableForFields)").each(function (index ,fieldLiElem) {
                     
                   for (indx = $('.list-toggle-div-wrap').length+1; indx < 25; indx++) { 
                    var sortableClassName='sortableForRelFields'+indx;
                    if ($(fieldLiElem).hasClass('lbl') == false && $(fieldLiElem).hasClass(sortableClassName)){
                        /*to remove extra li items  which are not belong to any related object anymore */
                  $(fieldLiElem).remove();
                 }
                }
                 });
                 $("#parentUlForm li .formUlLabel li:not(.generalSortableForFields)").each(function (index ,fieldLiElem) {
                     var fieldLiClass=$(fieldLiElem).attr("class");

                     var liIsChildObject=false;
                   if(!isNullOrEmpty(fieldLiClass) && fieldLiClass.split(" ").length>2)
                   {
                    liIsChildObject=true;
                   }
                   var listid=$(fieldLiElem).find('.listName').text().trim();
                   listid= removeColorCodes(listid);
                   if(!isNullOrEmpty(listid)){
                    if ($(fieldLiElem).hasClass('lbl') == false && liIsChildObject){
                        var datachildclass=$('#'+listid).parents('.list-toggle-div-wrap').attr('data-childclass');
                        var elemid=$(fieldLiElem).find('.fieldDiv').attr('id');
                        if( !isNullOrEmpty(datachildclass) && $(fieldLiElem).hasClass(datachildclass) && !isNullOrEmpty(elemid) && elemid.split('.').length==3 && elemid.split('.')[1]!=$('#'+listid).parents('.list-toggle-div-wrap').find('.objName').attr('id'))
                        {
                            /*to remove li items  which are not belong to any related child object */
                            $(fieldLiElem).remove();
                        }
                    }
                    else if ($(fieldLiElem).hasClass('lbl') == false && !liIsChildObject)
                    {
                    
                    var elementName=$(fieldLiElem).attr("title");
                    var lookupobjid=$('#'+listid).parents('.list-toggle-div-wrap').find('.objName').attr('id');
                            if( !isNullOrEmpty(elementName) && $('#'+listid).parents('.list-toggle-div-wrap').find('.objName').text()==elementName.replace('(Lookup)',"("+ lookupobjid+")"))
                            {
                                /*to remove li items  which are not belong to any related lookup object */
                                 $(fieldLiElem).remove();
                            }
                     
                 }
                }
                 });
            
    }
    function deleteRelObject(elemSource)
    {
var selectElem=$(elemSource).parents('.secondary-object-block').find('select.select-secondary-element');
var currentSelectedValue=$(selectElem).val();
if(!isNullOrEmpty(currentSelectedValue))
{
       var objUsedInRule=false;

    var relIndex=$(selectElem).attr('data-rel-index');
    var zeroBasedIndex=relIndex;
    var sortableIndx=relIndex;
    sortableIndx++;
    var sortForRelFieldsClass="sortableForRelFields"+sortableIndx;
      
        
     var originalRelObjectValue =  selectRelObjIdByIndex(zeroBasedIndex);
     
     var   fieldsExist=false;
        var lstOfFields='<ul style="text-align:left">';
        var lifieldsCount=0;
        $("#parentUlForm li").each(function(){
            $(this).find('.formUlLabel').each(function(){
                $(this).find('li').each(function(){
                    if($(this).hasClass('lbl') == false && $(this).hasClass(sortForRelFieldsClass)){
                        // var fieldId = $(this).find('.fieldDiv input,textarea,select').eq(0).attr('id');
                        /*modified to fix the child object element id issue on mar 10 2015 */
                        fieldsExist=true;
                        var liElement= $(this);
                        var fieldId =getFormattedElemId(liElement);
                        if (itemUsedInRule(fieldId))
                            objUsedInRule = true;

                        if( lifieldsCount<5)
                        {
                            lstOfFields +='<li>'+$(this).find('div > label').eq(0).text()+'</li>';
                        }
                        lifieldsCount++; /*updated by balinder nov 21 2014- issue:#38 Popup text issue in modal confirm when editdialog is open and useer tries to save the changes*/
                                                             
                    }
                });
            });    
        });
        if(lifieldsCount>5)
        {
            var extraFieldsCount= lifieldsCount-5;
            lstOfFields +='<li> and '+extraFieldsCount+' more </li>';
        }
        lstOfFields = lstOfFields+'</ul>';
        
        var childClass='';
        
        if(fieldsExist || objUsedInRule){                    
            var  childClassSpan='';
            if($('.form-information .secName-wrap').length>=zeroBasedIndex)
            {
                var relObjIndx= $('.form-information .secName-wrap').eq( zeroBasedIndex-1 ).attr('data-relobj');
                if(!isNullOrEmpty(relObjIndx) && !isNullOrEmpty(colorTagArray[relObjIndx]))
                {
                    childClass= colorTagArray[relObjIndx];
                    childClassSpan='<span class="child-class color-'+childClass+'"></span>';
                }
            }
                                                
            if (objUsedInRule) {
                showError("<div class='primary'>This object's fields are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
                callback(false);
            } else {
                var dialogBody = "<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to remove this object?<br /><br /></div><div class='secondary'>Removing <b>"+ selectRelObjTextByIndex(zeroBasedIndex)+ childClassSpan + "</b> will remove the following fields from your form:<br/>" + lstOfFields + "</div></div>";
                                                        
                $("#dialog-confirm").html(dialogBody);
                                     
         
                // Define the Dialog and its properties.
                $("#dialog-confirm").dialog({
                    resizable: false,
                    modal: true,
                    title: "Save",
                    height: "auto",
                    width: 413,
                    buttons:  {                        
                        "Yes":{
                            click: function () {
                                $(this).dialog('close');
                                callback(true);
                               changeRelObjIndx=relIndex;
                            },
                            text: 'Yes',
                            'class': 'vabutton1'
                        },
                        "No":{
                            click: function () {
                                $(this).dialog('close');
                                                                                                                             
                                callback(false);
                            },
                            text: 'No',
                            'class': 'vabutton2'
                        }                         
                    },
                                                                                    
                    open: function( event, ui ) {
                        $('.ui-dialog :button').blur();
                    }
                });
            }
        }else{
                                                         
            doDeleteRelatedObject(elemSource);
            
        }
        $('.ui-dialog :button').blur();
        $('#dialog-confirm').dialog('option', 'position', 'center');
        function callback(value) {
            if (value) {
                if($(selectElem).val == ''){                     
                    
                }else{
                   doDeleteRelatedObject(elemSource);
                }
                
                                                                        
            }else {
                $(selectElem).select2("val", originalRelObjectValue);
              
                                                                                
                return false;
            }
        }
     }
     else{
         doDeleteRelatedObject(elemSource);
     }
     
    }
    function doDeleteRelatedObject(elemSource)
    {
        var parentObjectElemDiv=$(elemSource).parents('.secondary-object-block');
       var relindx=$(parentObjectElemDiv).find('select.select-secondary-element').attr('data-rel-index');
       deleteRemovedObjFieldLi($(parentObjectElemDiv).find('select.select-secondary-element'));
       var relcount=1;
       $('.select-secondary-element-wrapper .secondary-object-block').each(function (indx,selectElemParentDiv) {
        var nextcount=relcount;
        nextcount++;
        var currentclass="select-related-"+relcount;
        var nextclass="select-related-"+nextcount;
        if($(selectElemParentDiv).find('select.select-secondary-element').hasClass(nextclass)){
            $(selectElemParentDiv).find('select.select-secondary-element').removeClass(nextclass);
            $(selectElemParentDiv).find('div.select2-container.select-secondary-element').removeClass(nextclass);
        }
        else if($(selectElemParentDiv).find('select.select-secondary-element').hasClass(currentclass)){
         $(selectElemParentDiv).find('select.select-secondary-element').removeClass(currentclass);   
         $(selectElemParentDiv).find('div.select2-container.select-secondary-element').removeClass(currentclass);  
        }
        
        $(selectElemParentDiv).find('select.select-secondary-element').attr('data-rel-index','0');
        relcount++;
       });
        $(parentObjectElemDiv).remove();
        var relcount=1;
        $('.select-secondary-element-wrapper .secondary-object-block').each(function (indx,selectElemParentDiv) {
         var currentclass="select-related-"+relcount;
        $(selectElemParentDiv).find('select.select-secondary-element').addClass(currentclass);
        $(selectElemParentDiv).find('div.select2-container.select-secondary-element').addClass(currentclass);
        $(selectElemParentDiv).find('select.select-secondary-element').attr('data-rel-index',relcount);
        relcount++;
       });
       
        
                     
                   for (indx =relindx; indx< $('.select-secondary-element-wrapper .secondary-object-block').length+2; indx++) { 
                    
                    var nextindx=indx;
       nextindx++;
       var sortableClassname='sortableForRelFields'+nextindx;
        var updatedSortableClassname='sortableForRelFields'+indx;
                    $("#parentUlForm li .formUlLabel li").each(function () {
                           
                                            if ($(this).hasClass('lbl') == false && $(this).hasClass(sortableClassname)) {
                                                  $(this).removeClass(sortableClassname);
                                                    $(this).addClass(updatedSortableClassname);
                                            }
                                
                    });
                }
             
        Saved();
    }
    function restructureRelatedObjSelectElement(selectElement,selecthtml)
    {
        var selectedValue=$(selectElement).val();
        var elemClass=$(selectElement).attr("class");
         if(isNullOrEmpty(selectedValue))
        {
          selectedValue="";
        }

        $(selectElement).empty();
        $(selectElement).append(selecthtml);
        $(selectElement).select2();
        $(selectElement).select2("val", selectedValue);
    }
    function getRelatedObjSelectOptionHTML(){
        var htmlForSelect='';
                    console.log(' Fill select ');
                        var countObj=0;
                         var tempSelectElementDiv=$('.tempSelectRelatedListCSS') ;
                        $(tempSelectElementDiv).find('select.select-secondary-element > option').each(function() {  
                                countObj++;
                                if($(this).text() == '----Select Child Object----'){
                                        return false;
                                }  
                        });
                        var idx=0,newHtml='',newHtmlgrp='';
                        var sec=0;
                        $(tempSelectElementDiv).find('select.select-secondary-element > option').each(function() { 
                                idx++;
                                if(countObj > idx){
                                    // console.log(' here in if  lookup select val -' + $(this).val());
                                        if(idx != 1){
                                              newHtml += '<option name="lookup" value="' + extraSpaceSafe($(this).val()) + '">' + extraSpaceSafe($(this).text()) + ' </option>';
                                        }
                                         
                                }
                                else{ 
                            //  console.log(' here in if  detail select val -' + $(this).val());
                                        sec++;
                                        if(sec != 1){
                                                newHtmlgrp += '<option class="childoption2" name="detail" value="' + $(this).val() + '">' + $(this).text() + ' </option>';
                                        }
                                     
                                }
                        });
                             
                        htmlForSelect+='<option value="">----Select Object----</option>';
                        htmlForSelect+='<optgroup class="LookupOption" label="Lookup Objects" >' + newHtml + '</optgroup>' ;
                        htmlForSelect+='<optgroup class="ChildOption" label="Child Objects" >' + newHtmlgrp + '</optgroup>' ;
                        
                                
                     return htmlForSelect;    
                                
                }
                   
                function extraSpaceSafe(elemValue)
                {
                    if(elemValue!==undefined && elemValue!=null && elemValue!='')
                    {
                        elemValue=elemValue.replace('  (',' (');
                    }
                    return elemValue;
                }
                function verifyPackage(chk){        
                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                        
                                        upgradeNowMessage('Record updates are only available in Professional or Enterprise editions of Fast Forms.','','');                         
                                        chk.checked = false;
                        </apex:outputText>
                        <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                                        var lblelem = $(chk).parents('div[class="ExpandDiv"]').parent().find('div:first-child > label').eq(0);
                                        var lblId = lblelem.attr('id');
                                        
                                        mixpanel.track('Field upsert option checked',{ "Field ID": lblId});
                                        var metadata = {
                                          field_name: lblId
                                        };
                                        Intercom('trackEvent', 'enabled-upsert', metadata);                                        
                                        addLabel();
                                        resetSavedButton();
                                        
                        </apex:outputText>
                }
                 function clearFieldInfoPopupContent(liElement){
                 if(!$(liElement).find('.sfff-field-info').hasClass('display-none'))
                 {
                 $(liElement).find('.sfff-field-info').addClass('display-none');
                 }
                 
                    $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-f').html('');
             $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-r').html('');
             $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-h').html('');
                 }
             function generateFieldInfoPopupContent(liElement){       
                     var elementid= getFormattedElemId(liElement);
                     var liId=$(liElement).attr('id');
                     var isFieldHidden=false;
                        if($('#'+liId).find('label.ff-label').hasClass("grayLabel"))
                     {
                    
                         $('#'+liId).find('.field-info-tooltip').find('.fi-tooltip-text-h').append('<span class="fi-letter-icon">H</span>Field set as hidden ');
                     }
                    
                     $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-f').append('<span class="fi-letter-icon">F</span>Field: '+elementid+'');
                    if(elementid!='undefined' && elementid!='' && ruleObjectsData.length>0)
                    {
                     
                     var rulestr=isRuleExistForId(elementid);
                     if(rulestr!='undefined' && rulestr!='')
                     {
                    
                     $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-r').append('<span class="fi-letter-icon">R</span>Rule: '+rulestr+'');
                     }
                     }
                     
             }
             function isRuleExistsForIdNotInuse(elementid)
             {
                    var ruleexists=[];
                    if(ruleObjectsData.length==0)
                    {
                 
                    }
                    
                        var returnstr='';
                     if(ruleObjectsData!='undefined' && ruleObjectsData.length>0)
                     {
                            $.each(ruleObjectsData, function(index, jsonitem) {
                            if(jsonitem[index]!='undefined')
                            {
                                    var ruleorder=jsonitem[index].ruleorder;
                                     console.log(' ruleOrder index '+jsonitem[index].ruleorder );
                                     console.log('  Rule fields data length -' +jsonitem[index].rulefields);
                                            $.each(jsonitem[index].rulefields, function(index2, jsonrulefields) {
                                             if(jsonrulefields[index2]!='undefined' && jsonrulefields[index2]==elementid)
                                            {
                                            if($.inArray(ruleorder, ruleexists)==-1)
                                            {
                                                ruleexists.push(ruleorder);
                                             }
                                                console.log(' ruleOrder '+ruleorder +' for id '+elementid);
                                            }
                                        });
                                }
                                });
                                }
                                
                         var str='';
                         if(ruleexists!='undefined' && ruleexists.length>0)
                         {
                         str= ruleexists.join(",");
                            }
                        return   str;
             }
             function isRuleExistForId(elementid)
             {
             var ruleexists=[];
                 
                 
                             var ruleindex;
                             if(ruleObjectsData.length>0)
                             {
                                for (ruleindex = 0; ruleindex < ruleObjectsData.length; ruleindex++) {
                                        var ruleobject= ruleObjectsData[ruleindex][0]; 
                                        var ruleorder=ruleobject.ruleorder;
                                        
                                        var ruleFields=ruleobject.rulefields; 
                                            var ruleitemindex;
                                            for (ruleitemindex = 0; ruleitemindex < ruleFields.length; ruleitemindex++) {
                                        
                                                 if(ruleFields[ruleitemindex].rulefield!='undefined' && ruleFields[ruleitemindex].rulefield==elementid)
                                                 { 
                                                 ruleexists.push(ruleorder);
                                                 if($.inArray(ruleorder, ruleexists)==-1)
                                                    {
                                                        ruleexists.push(ruleorder);
                                                     }
                                                 }
                                         }
                                    
                                    }
                                }
                                
                                 var str='';
                         if(ruleexists!='undefined' && ruleexists.length>0)
                         {
                         str= ruleexists.join(",");
                            }
                        return   str;
             }
 
             function goToNextTourStop()
             {
                    if ($(".joyride-tip-guide").length > 0)
                        $("#takeTour").foundation('joyride','go_next');
             }       



        (function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
        for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);
        mixpanel.init("39b7e8be28cfa1b59fdd342bad0004e0");
</script>

 
 
        
 </head>
 
    <script>
    
        function showNotification(elemid, textmsg)
        {
                $('#' + elemid).fadeIn(250);
                $('#' + elemid).find('.msg-text-div').html(textmsg);
        }
        function hideNotification(elemid)
        {
                $('#' + elemid).find('.msg-text-div').html('');
                $('#' + elemid).fadeOut(250);
        }
       function resetEditorFreemiumNotificationJS(readonly)
        {
             Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.resetFreemiumWarning)}',readonly,
                function(result, event) { 
                    
                      if (event.status) {
                        console.log(' Success-'+result);
                        if(result=='disabled')
                        {
                          $('.freemium-msg-box-outer').fadeOut('fast');
                        }
                        else
                        {
                           $('.freemium-msg-box-outer').fadeIn('slow');
                        }
                      } else {
                        console.log(' Fail-'+result);
                      }
                   
                },
                { buffer: true, escape: true, timeout: 30000 }
            );
        }
        /*Changes draft button on autosave*/
        function draftchanges(val) {
 $('.publish-draft').removeClass('va-disabled');
        if (val) {
         
                $('.button-draft').fadeIn('fast');
                $('.button-draft').find('.draft-text').text('Draft Saving');
                $('.button-draft').removeClass('draft-saved');
                $('.button-draft').addClass('draft-saving');
        
            
            
        }
        else {
         
                $('.button-draft').fadeIn('fast');
                $('.button-draft').find('.draft-text').text('Draft Saved');
                $('.button-draft').removeClass('draft-saving');
            $('.button-draft').addClass('draft-saved');
        
        }
    }
    

        var lstRuleFields;

        function getRemoteRuleFieldsJs() {
                /*JAVASCRIPT Remoting Method to populate Email draft configuration xml */
                var ffrecordid = '{!$CurrentPage.parameters.id}';
                Visualforce.remoting.Manager.invokeAction(
                        '{!URLENCODE($RemoteAction.FormEditorController.getRemoteRuleFields)}',
                        ffrecordid,
                        function(result, event) {
                                if(event.status) {
                                        
                                        var decoded = $('<div/>').html(result[0]).text();
                                        
                                         lstRuleFields = parseRuleXMLForJSON(decoded);
                        
                                        console.log(' Rule order ' + result[1]);
                 
                                } else if(event.type === 'exception') {
                                        console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                                } else {
                                        console.log(" Exception 2- " + event.message);
                                }
                        },
                        {
                                escape: true
                        }
                );
        }
        function getRemoteRuleFieldsInfoJs() {
         ruleObjectsData=[];
                /*JAVASCRIPT Remoting Method to populate Email draft configuration xml */
                var ffrecordid = '{!$CurrentPage.parameters.id}';
                Visualforce.remoting.Manager.invokeAction(
                        '{!URLENCODE($RemoteAction.FormEditorController.getRemoteRuleFieldsInfo)}',
                        ffrecordid,
                        function(result, event) {
                                if(event.status) {
                                        
                                        var decoded = $('<div/>').html(result[0]).text();
                                        
                                         for(i=0;i<result.length;i+=2) {
        
                                                 var rulexml= $('<div/>').html(result[i]).text();
                                                 
                                                 var ruleorder= ''+result[i+1];
                                                 console.log(' RULEORDER -'+ruleorder);
                                                 var ruledt=parseRuleInfoInJSON(ruleorder,rulexml);
                                                 if(ruledt.length>0)
                                                 {
                                                 ruleObjectsData.push(ruledt);
                                                    }
                                        }
                                } else if(event.type === 'exception') {
                                        console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                                } else {
                                        console.log(" Exception 2- " + event.message);
                                }
                        },
                        {
                                escape: true
                        }
                );
             
        }
     // getRemoteRuleFieldsJs();

        
        function parseRuleXMLForJSON(xmlstr)
        {
                if(window.DOMParser)
                {
                        parser = new DOMParser();
                        xmlDoc = parser.parseFromString(xmlstr, "text/xml");
                }
                else // Internet Explorer
                {
                        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.async = false;
                        xmlDoc.loadXML(xmlstr);
                }

                return returnRuleJson(xmlDoc.getElementsByTagName("rule"));        
        }  
        function parseRuleInfoInJSON(ruleorder,xmlstr)
        {
                if(window.DOMParser)
                {
                        parser = new DOMParser();
                        xmlDoc = parser.parseFromString(xmlstr, "text/xml");
                }
                else // Internet Explorer
                {
                        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.async = false;
                        xmlDoc.loadXML(xmlstr);
                }
return returnRuleJsonObjectInfo(ruleorder, xmlDoc.getElementsByTagName("rule"));

                     
        }    

function returnRuleJson(elem)
        {
                var data=[];
                var returnstr = '';

                 $.each(elem, function(index, fieldElement){  
                        if(fieldElement.childNodes.length>0)
                        {

                            $.each(fieldElement.getElementsByTagName("operand1"), function(index, item){
                                data.push($(item).text());
                            });
                            $.each(fieldElement.getElementsByTagName("operand2"), function(index, item){
                                if ($(item).attr('isdynamic') == 'true')
                                        data.push($(item).text());                
                            });
                            $.each(fieldElement.getElementsByTagName("target"), function(index, item){
                                if ($(item).attr('isdynamic') == 'true')
                                        data.push($(item).text());                
                            });
                        }
                 });          
                return data;
        }

        function returnRuleJsonObjectInfo(ruleorder,rulexmlelem)
        {
                var ruledata=[];
                var returnstr = '';
var fieldData=[];
                 $.each(rulexmlelem, function(index, fieldElement){  
                        if(fieldElement.childNodes.length>0)
                        {

                            $.each(fieldElement.getElementsByTagName("operand1"), function(index, item){
                                fieldData.push(createJSONRuleObjField($(item).text()));     
                            });
                            $.each(fieldElement.getElementsByTagName("operand2"), function(index, item){
                                if ($(item).attr('isdynamic') == 'true')
                                     fieldData.push(createJSONRuleObjField($(item).text()));                  
                            });
                            $.each(fieldElement.getElementsByTagName("target"), function(index, item){
                                if ($(item).attr('isdynamic') == 'true')
                                        fieldData.push(createJSONRuleObjField($(item).text()));                
                            });
                            
                            
                        }
                 }); 
                 if(fieldData.length>0)
                            {
                            console.log('fieldData.length>0 ');
                                 ruledata.push(createJSONRuleObj(ruleorder,fieldData));    
                            }         
                return ruledata;
        }
        function createJSONRuleObj(ruleorder, rulexml) {
        
        var dataobj = { "ruleorder":ruleorder , "rulefields": rulexml };


        return dataobj;
}
function createJSONRuleObjField( rulefield) {
        var dataobj = { "rulefield":rulefield };


        return dataobj;
}
        function  toggleToFormEditor()
        {
        $('.sfff-editor-tabs .sfff-editor-tab').each(function(i, tabli) {
         $(tabli).removeClass('fade');
         $(tabli).removeClass('active');
        });
        $('.sfff-form-editor-content').removeClass('fade');
        $('.sfff-form-editor-content').removeClass('active');
        $('.sfff-rule-editor-content').removeClass('fade');
        $('.sfff-rule-editor-content').removeClass('active');
 
            
                     // getRemoteRuleFieldsJs();
                        getRemoteRuleFieldsInfoJs();
                        
                        setHover();
                        $('#formEditorA').parents('.sfff-form-editor-li').addClass('active');
                        $('#sfff-rule-editor').hide();             
                        $('#sfff-form-editor').addClass('active');
                        $('#sfff-form-editor').show();
                          
                            CallUnloadStyleEditor();
        }
        function toggleTab(elem){
                if ($(elem).attr('id') == 'formEditorA'){
                     // CallUnloadRuleEditor();
                    //  getRemoteRuleFieldsJs();
                    getRemoteRuleFieldsInfoJs();
                        
                        setHover();
                        $('#sfff-rule-editor').hide();
                        $('#sfff-form-editor').show();
                        $('#sfff-style-editor').hide();
                         CallUnloadStyleEditor();   

                } else if($(elem).attr('id') == 'ruleEditorA') {  
                    mixpanel.track('Rules Tab clicked');
                    Intercom('trackEvent', 'clicked-edit-rule-tab');
                    CallUnloadStyleEditor();   
                        $('#sfff-rule-editor').show();
                        $('#sfff-form-editor').hide();                    
                        $('#sfff-style-editor').hide();                   
                        isChangesMadeInForm = true;
                        autosaveTriggered();
                     
                        <apex:outputText rendered="{!packageTier != 'Base'}">
                        callLoadRuleEditor();
                        </apex:outputText>
                     // resetSelect2();        
                }
                else
                {
                        mixpanel.track('Style Tab clicked');
                        Intercom('trackEvent', 'clicked-edit-style-tab');
                        $('#sfff-rule-editor').hide();
                        $('#sfff-form-editor').hide();
                        
                         
                        $('#sfff-style-editor').show();
                        isChangesMadeInForm = true;
                        autosaveTriggered();
                        callLoadStyleEditor();
                }
        }
        function callLoadRuleEditor()
        {
        console.log('loadRuleEditorCall ');
        showMainRuleRepeater(false);
             loadRuleEditorCall(true);
        }
        function rerenderRuleEditorCall()
        {
         rerenderRuleEditor();
        }
        function CallUnloadRuleEditor()
        {
                console.log(' CallUnloadRuleEditor ');
unloadRuleEditorCall(false);
        }
        function showMainRuleRepeater(showRulediv)
{
    if(showRulediv)
            {
                console.log(' Show '+showRulediv);
                $('.ruleEditorWrapperCSS').show();

            }
            else
            {
                console.log(' HIDE '+showRulediv);
                    $('.ruleEditorWrapperCSS').hide();
            }

 }

         function callLoadStyleEditor()
        {
        console.log('loadRuleEditorCall ');
        showMainStyleRepeater(false);
             loadStyleEditorCall(true);
        }
        function rerenderStyleEditorCall()
        {
         rerenderStyleEditor();
        }
        function CallUnloadStyleEditor()
        {
                console.log(' CallUnloadStyleEditor ');
                unloadStyleEditorCall(false);
        }
        function showMainStyleRepeater(showStylediv)
        {
            if(showStylediv)
                    {
                        console.log(' Show  Stylediv-'+showStylediv);
                        $('.styleEditorWrapperCSS').show();

                    }
                    else
                    {
                        console.log(' HIDE  Stylediv-'+showStylediv);
                            $('.styleEditorWrapperCSS').hide();
                    }

         }


        function getExtension(filename) {
                var parts = filename.split('.');
                return parts[parts.length - 1];
        }

        function isImage(filename) {
                var ext = getExtension(filename);
                switch (ext.toLowerCase()) {
                case 'jpg':
                case 'jpeg':
                case 'gif':
                case 'png':
                        //etc
                        return true;
                }
                return false;
        }


        /* main function to upload image and all the animation in image control */
        function uploadImageFile(files,elementSourceParent,uploadType) 
        { 
        
            var formData = !!window.FormData ? new FormData() : null;
            
            //Not sure why multiple files dropping, so for time being disable multi file functionality
            if(files.length > 1)
            {
                    showError("<div class='primary'>Uploading multiple files is not supported, please upload a single file.</div>");          
                    return;
            } else if(!isImage(files[0].name))
            {
                    showError("<div class='primary'>Only jpg, gif, or png files are allowed.</div>");          
                    return;
            } else if (files[0].size/1024 > 600) {
                    showError("<div class='primary'>The image you have selected is greater than 600 KB in size. Please select a smaller file.</div>");
                    return;        
            }

         
                var xhrFFRequest = null;
                if(Sarissa.originalXMLHttpRequest) {
                        xhrFFRequest = new Sarissa.originalXMLHttpRequest();
                } else if (window.XMLHttpRequest) {
                        xhrFFRequest = new XMLHttpRequest();
                }
                // now post a new XHR request
                if (formData || xhrFFRequest!==undefined) {
                     
                    var prefix = '{!prefix}';
                    if (prefix != '')
                        prefix += '/';

                    var sfdcurl = 'https://'+sfdcHostName+'.salesforce.com/services/apexrest/' + prefix + 'FFDragAndDrop/v1?FileName='+encodeURIComponent(files[0].name)+'&cType='+encodeURIComponent(files[0].type) ;
                    
                     
                    xhrFFRequest.open('POST','/services/proxy' ,true);
                    xhrFFRequest.setRequestHeader("Authorization","Bearer {!$Api.Session_ID}");
                    xhrFFRequest.setRequestHeader('SalesforceProxy-Endpoint', sfdcurl);
                    xhrFFRequest.setRequestHeader('X-User-Agent', 'DragAndDropAPI v1.0');


 

                     xhrFFRequest.send(files[0]);
                     try{
                        if(xhrFFRequest.upload!=undefined)
                        {
                    xhrFFRequest.upload.onload = function() { 
                        $(elementSourceParent).find('.ffse-img-uploaded').show();
                        $(elementSourceParent).find('.ffse-img-uploading').hide();
                    }
                    };
        
                     if(xhrFFRequest.upload!=undefined)
                        {
                        xhrFFRequest.upload.onprogress = function (event) {
                            if (event.lengthComputable) {
                            $(elementSourceParent).find('.ffse-img-input-container').hide();
                                $(elementSourceParent).find('.ffse-img-uploading').show();
                            }
                        }
                    }
                    }
                    catch(err)
                    {
                        console.log('Exception : doesnt support upload progress');
                    }
                    
                    xhrFFRequest.onreadystatechange=function()
                        {
                            
                                if (xhrFFRequest.readyState==4 && xhrFFRequest.status == 200)
                                {
                                    
                                    $(elementSourceParent).find('.ffse-img-uploaded').hide();
                                    if(xhrFFRequest.responseText  && xhrFFRequest.responseText.length>0)
                                    {  
                                            var response =[];
                                            try{
                                            response=$.parseJSON(xhrFFRequest.responseText) ;
                                        }
                                        catch(err)
                                        {
                                            console.log(' Catch json error '+err.meesage);
                                            try{
                                            response=GetResponseData(xhrFFRequest.response); 
                                        }
                                        catch(err)
                                        {
                                            console.log(' Catch xml parsing error '+err.meesage);
                                        }
                                        }
                                            if(response[0]=='valid')
                                            {  

                                                 var objid=response[1];

                                                 var fileUploadElement= $(elementSourceParent).find('.ffse-fileUpload-control');
                                                 var cssSelector=  $(fileUploadElement).attr('data-ffstyle-selector');
                                                 var cssRuleDirective=  $(fileUploadElement).attr('data-ffstyle-prop');
                                                 var imgsrc='https://'+sfdcHostName+'.salesforce.com/servlet/servlet.ImageServer?id='+objid+'&oid='+organisationId;
                                             console.log(' Uploaded image src-'+imgsrc);
                                                 if(uploadType == 'StyleEditor')
                                                 {                         
                                                     var $removeImage=$('<span/>', { 'class':'ffse-remove-uploadedimg' ,html:'Remove', 'data-imgdoc-id':objid});
                                                     var $img=$('<img/>', { 'src':imgsrc , 'class':'ffse-uploaded-img',  'data-ffstyle-selector':cssSelector, 'data-ffstyle-prop':cssRuleDirective });
                                                     $(elementSourceParent).find('.ffse-img-upload-placeholder').show();
                                                     $(elementSourceParent).find('.ffse-img-upload-placeholder').html($img);
                                                     $(elementSourceParent).find('.ffse-img-upload-placeholder').append($removeImage);
                                                     var imgWidth='80';
                                                     var imgHeight='50';
                                                     $("<img/>").attr("src", $img.attr("src")).load(function() { 
                                                        setImageDimensions(elementSourceParent,this.width,this.height,true);
                                                        });
                                                    
                                                     uploadSuccess(elementSourceParent,true,uploadType);
                                                     $(elementSourceParent).find('.ffse-img-upload-placeholder .ffse-remove-uploadedimg').on("click", (function () {
                                                     
                                                        removeImageCallBack(this,cssSelector,cssRuleDirective,uploadType);
                                                     }));                                
                                                 } else {
                                                     //var $removeImage=$('<span/>', { 'class':'ffse-remove-uploadedimg' ,html:'Remove', onClick:'removeEditorImage(this);', 'data-imgdoc-id':objid});
                                                     var imgId = $(elementSourceParent).parent().parent().parent().attr('id').replace('lblli','img');
                                                     var $img=$('<img/>', { 'id':imgId, 'src':imgsrc , 'data-ffstyle-selector':cssSelector });
                                                     $(elementSourceParent).find('.ffse-img-upload-placeholder-editor').show();
                                                     $(elementSourceParent).find('.ffse-img-upload-placeholder-editor').html($img);
                                                     //$(elementSourceParent).find('.ffse-img-upload-placeholder-editor').append($removeImage);
                                                     uploadSuccess(elementSourceParent,true,uploadType);
                                                 }
                                            
                                                    

                                            }
                                             else
                                            {
                                                console.log('Exception on server - '+response[1]);
                                                 uploadError(elementSourceParent,"Error while uploading file"+response[1],uploadType);
                                            }
                                    }      
                                    else
                                    {
                                    uploadError(elementSourceParent,"Error while uploading file",uploadType);
                                    }
                                }
                                else if (xhrFFRequest.readyState==4 && xhrFFRequest.status != 200)
                                {
                                uploadError(elementSourceParent,"Server error while uploading file",uploadType);
                                }
                                else
                                {

                                }
                        }
                     
                         
                         


                }
        
        var $element=$(elementSourceParent).find('.ffse-fileUpload-control');
        $element.replaceWith($element.clone(true).val('')); 
        
         
}
 
    
function GetResponseData(xmlstr)
{

        /*parse the Rule configuration xml attriutes*/

        if (window.DOMParser) {
                parser = new DOMParser();
                xmlDoc = parser.parseFromString(xmlstr, "text/xml");
        }
        else // Internet Explorer
        {
                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = false;
                xmlDoc.loadXML(xmlstr);
        }
        var jsondata=[];
        $.each(xmlDoc.getElementsByTagName("item"), function (index, subitem) {
jsondata.push($(subitem).text());
        });
return jsondata;
}
function getXHR() { 
    var xhr= new XMLHttpRequest();
    if (xhr==null || xhr===undefined) {
         
    // IE6
    try { 
        // The latest stable version. It has the best security, performance, 
        // reliability, and W3C conformance. Ships with Vista, and available 
        // with other OS's via downloads and updates. 
     
        xhr=  ActiveXObject('MSXML2.XMLHTTP.6.0');
    } catch (e) { 
        try { 
            // The fallback.
            xhr=  ActiveXObject(' MSXML2.XMLHTTP.3.0');
        } catch (e) { 
            alert('This browser is not AJAX enabled.'); 
         xhr=  null;
        } 
    }
    }
    return xhr; 
}
/* called on file upload success */
function uploadSuccess(elementParent,autoSave,uploadType)
{
    $(elementParent).find('.ffse-img-upload-error').html('');
    $(elementParent).find('.ffse-img-upload-error').hide();

    if(uploadType == 'StyleEditor')
    {
            $(elementParent).find('.ffse-img-uploading').hide();
            $(elementParent).find('.ffse-img-uploaded').hide(); 
            $(elementParent).find('.ffse-img-input-container').hide(); 
            uploadSuccessStyleEditorCallBack(elementParent,autoSave); 
            
    } else {
            $(elementParent).parent().parent().parent().removeClass('fieldLiImage');
            $(elementParent).parent().parent().parent().addClass('fieldLiImageActive');
            $(elementParent).find('.ffse-img-input-container-editor').hide();       
            isChangesMadeInForm = true;
            autosaveTriggered();      
    }
}

/* called on file upload failure */
function uploadError(elementParent,errorMessage,uploadType)
{
    $(elementParent).find('.ffse-img-uploading').hide();
    $(elementParent).find('.ffse-img-uploaded').hide();
    $(elementParent).find('.ffse-img-upload-error').html(errorMessage);
    $(elementParent).find('.ffse-img-upload-error').show();
    if(uploadType == 'StyleEditor')
    {  
        $(elementParent).find('.ffse-img-upload-placeholder').html('');
        $(elementParent).find('.ffse-img-upload-placeholder').hide();    
    } else {
        $(elementParent).find('.ffse-img-upload-placeholder-editor').html('');
        $(elementParent).find('.ffse-img-upload-placeholder-editor').hide();        
    }
}

/**trigger file upload function */
function uploadFiles(elem,uploadType)
{
    if(uploadType == 'StyleEditor')
    {
        var parentElement=$(elem).parents('.ffse-file-upload-container');
    } else {
        var parentElement=$(elem).parents('.ffse-file-upload-container-editor');
    }
    uploadImageFile(elem.files,parentElement,uploadType);
}

/**Remove image file  */
function removeImageCallBack(elem,cssSelector,cssruledirective,uploadType)
{
        var elementParent=$(elem).parents('.ffse-file-upload-container');
        $(elementParent).find('.ffse-img-upload-placeholder').hide();
        $(elementParent).find('.ffse-img-upload-placeholder').html('<div class="ffse-img-removed" style="display:none;" data-ffstyle-selector="'+cssSelector+'" data-ffstyle-prop="'+cssruledirective+'-removed" />');
        $(elementParent).find('.ffse-img-input-container').show();
        var fileElement=$(elementParent).find('input.ffse-fileUpload-control');
                
                if($(fileElement).attr('data-ffstyle-selector')=='.ff-logo')
                { 
                $(elementParent).find('input.ffse-img-width').val('');
                 
                $(elementParent).find('input.ffse-img-height').val('');
                }
                removeImageStyleEditorCallBack(elementParent,cssSelector,cssruledirective,uploadType);
        
}

function removeEditorImage(elem)
{
        var elementParent=$(elem).parents('.ffse-file-upload-container-editor');
        $(elementParent).find('.ffse-img-upload-placeholder-editor').hide();
        $(elementParent).find('.ffse-img-upload-placeholder-editor').html('<div class="ffse-img-removed" style="display:none;" />');
        $(elementParent).find('.ffse-img-input-container-editor').show();          
        $(elementParent).parent().parent().parent().removeClass('fieldLiImageActive');
        $(elementParent).parent().parent().parent().addClass('fieldLiImage');
        isChangesMadeInForm = true;
        autosaveTriggered();       
}

/*payment field main functions */
function setupPaymentField(elemSource)
{
    var elemSourceParent=  $(elemSource).parents('.fieldLi');
togglePaymentSetupOverlay(elemSourceParent,true);
    expandPaymentOptions(elemSourceParent);
}
function resetPaymentField(elemSourceParent,hideOverlay,enableFields)
{
    $(elemSourceParent).find('.paypal-item-header').hide();
    togglePaymentSetupOverlay(elemSourceParent,hideOverlay);
    if(enableFields)
    {

        $(elemSourceParent).find('.paypal-item-row .PPGeneralLabelDiv').show();
        $(elemSourceParent).find('.paypal-item-row .PPGeneralFieldDiv').show();
    }
    else
    {
        $(elemSourceParent).find('.paypal-item-row .PPGeneralLabelDiv').hide();
        $(elemSourceParent).find('.paypal-item-row .PPGeneralFieldDiv').hide();
    }
}
function expandPaymentOptions(elemSourceParent)
{
    var expandCurrentDiv=false;
    if($(elemSourceParent).find('.ExpandDivPayment').length==0)
    {
expandCurrentDiv=true;
    }
    resetEditDivOpacity();
    collapsePaymentOptionsDiv();
    $(".ExpandDiv").remove();
    if(expandCurrentDiv)
    {
        $(".formUlLabel").sortable("option", "disabled", true);
                                $("#parentUlForm").sortable("option", "disabled", true);
        var paymentElementId=$(elemSourceParent).attr('id');
     paymentElementId= paymentElementId.replace('lblli','');
     var divPaymentFieldRecordAttr= $(elemSourceParent).find('.field-div-payment').attr('data-paymentfield-record-id');

     var paymentFieldRecordId='';
     if(divPaymentFieldRecordAttr!==undefined && divPaymentFieldRecordAttr!=='' )
     {
        paymentFieldRecordId=divPaymentFieldRecordAttr;
     }
     $(elemSourceParent).find('.editDelDiv').find('.editImg').addClass('togHoverActive');
var paymentComponentItem = $('#paymentComponentTemp').clone().html();
$ExpandDivPayment = $('<div />', {
                                                'class': 'ExpandDivPayment','style':'display:none'
                                        });
                                        $ExpandDivPayment.append(paymentComponentItem);
$(elemSourceParent).append($ExpandDivPayment);
//$(elemSourceParent).find('.ExpandDivPayment').slideDown('fast');
remoteGetPaymentFieldRecordJS(paymentFieldRecordId,elemSourceParent,paymentElementId);
    }
    else
    {
        $(".formUlLabel").sortable("option", "disabled", false);
                                $("#parentUlForm").sortable("option", "disabled", false);
        $(elemSourceParent).find('.ExpandDivPayment').slideUp(300);
        $(elemSourceParent).find('.ExpandDivPayment').remove();
        $(elemSourceParent).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
        isChangesMadeInForm = true;
     autosaveTriggered();
    }
}
function collapsePaymentOptionsDiv()
{
     $('#parentUlForm').find('.fieldLi').each(function(indx,fieldLiElement)
        {
            if($(fieldLiElement).find('.field-div-payment').length>0)
                 {
             $(fieldLiElement).find('.ExpandDivPayment').slideUp(300);
                    $(fieldLiElement).find('.ExpandDivPayment').remove();
                    $(fieldLiElement).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
            }
        });

 
}
function deletePaymentField(delId)
{
 
 var elemSourceParent= $('#parentUlForm li#'+delId+'');
    var paymentFieldid=$(elemSourceParent).find('.field-div-payment').attr('data-paymentfield-record-id');
     if(paymentFieldid!==undefined && paymentFieldid!='')
     {
     remoteDeletePaymentFieldJS(paymentFieldid,elemSourceParent);
 }
 else
 {
    deletePaymentFieldCallBack(elemSourceParent);
 }
}
function deletePaymentFieldCallBack(elemSource)
{

    
     $(elemSource).remove();
        
resetSavedButton();
$(".formUlLabel").sortable("option", "disabled", false);
                                $("#parentUlForm").sortable("option", "disabled", false);
}


function remotevalidatePaymentAndCallSaveJS(relatedObjectsXml, fieldsXml, objectsXml, finalHtml, formHtml, hiddenObjectValues) {

        var ffrecordid = "";
        ffrecordid = '{!JSENCODE($CurrentPage.parameters.id)}';

        Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteValidatePaymentInfo)}',
                 ffrecordid,
                function(result, event) {
                        if (event.status) {

                                //   //console.log(' result HTML-'+result);
                                if (result != null  && result.length>0 ) 
                                    {
                                        var elementIds=[];
                                         
                                        var responseErrorDetail='';
                                        var isResultItemsValid=true;
                                         for (i = 0; i < result.length; i++) {
                                                if(!result[i].IsValid)
                                                {
                                                isResultItemsValid=false;
                                                var indx=i+1;
                                                 //responseErrorDetail+="<b>"+result[i].OtherText.replace(/\|/g,'')+"</b>";
                                                 responseErrorDetail+="<b>Payment ("+indx+")</b>";
                                                 responseErrorDetail+=$('<div />').html(result[i].ResultText).text();
                                                  responseErrorDetail+='<br/>';
                                                 

                                                //elementIds.push(result[i].OtherText.replace(/|/g,''));
                                                }
                                        }
                                        if(isResultItemsValid)
                                        {
                                            callSave(relatedObjectsXml, fieldsXml, objectsXml, finalHtml, formHtml, hiddenObjectValues,lookupWarningFlagDisable); 
                                            //disablePublishDraftButton();
                                        }
                                        else
                                        {
                                            $simpleDiv = $('<div />', { html: 'One or more of your form\'s payment fields are missing some required information.<br /><br />'  , 'class':'ff-detail-block-wrap'});
                                            $simpleDivWrapper = $('<div />', {  });
                                            $span = $('<span />', { html: ' Details' ,'onclick':'toggleDetailBlock(this)', 'class':'ff-detail-block-link'}); 
                                            $errorDiv = $('<div />', { html: responseErrorDetail , 'class':'ff-detail-block'}); 
                                            disablePublishDraftButton();
                                            $errorDiv.hide();
                                            $simpleDiv.append($span);
                                            $simpleDiv.append($errorDiv);
                                            $simpleDivWrapper.append($simpleDiv);
                                            commonAlertMessage('Your payment fields are not set up!',$simpleDivWrapper.html());
                                        }
                                    } 
                                else {
                                         console.log('No paymentfield found ');
                                         
                                        callSave(relatedObjectsXml, fieldsXml, objectsXml, finalHtml, formHtml, hiddenObjectValues,lookupWarningFlagDisable); 
                                }


                        } else if (event.type === 'exception') {
                                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                        } else {
                                //console.log(" Exception 2- " + event.message);
                        }
                }, {
                        escape: true
                }
        );
        

}
function disablePublishDraftButton()
{
    $(".btnPublishedSaved").text('Publish Draft');
           $(".btnPublishedSaved").addClass('va-disabled');
}
function remoteDeletePaymentFieldJS(paymentFieldid,elemSourceParent) {

        var ffrecordid = "";
        ffrecordid = '{!JSENCODE($CurrentPage.parameters.id)}';

        Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormEditorController.remoteDeletePaymentField)}',
                 paymentFieldid,
                function(result, event) {
                        if (event.status) {

                                //   //console.log(' result HTML-'+result);
                                if (result != null && typeof result=='object' ) 
                                    {
                                            console.log('deleting payment field');
                                        if(result.IsValid)
                                        {
                                            deletePaymentFieldCallBack(elemSourceParent);
                                        }
                                        else
                                        {
                                            console.log('Payment field deletion result- '+result.ResultText);
                                            deletePaymentFieldCallBack(elemSourceParent);
                                        }
                                    } 
                                else {
                                         console.log('No paymentfield found ');
                                        
                                }


                        } else if (event.type === 'exception') {
                                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                        } else {
                                //console.log(" Exception 2- " + event.message);
                        }
                }, {
                        escape: true
                }
        );
        

}
function remoteGetPaymentFieldRecordJS(paymentFieldid,elemSourceParent,paymentElementId) {
var createPaymentfieldIfNotExists=true;
        var ffrecordid = "";
        ffrecordid = '{!$CurrentPage.parameters.id}';

        Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormEditorController.remoteGetPaymentFieldRecord)}',
                ffrecordid,paymentFieldid,createPaymentfieldIfNotExists,paymentElementId,
                function(result, event) {
                        if (event.status) {

                                //   //console.log(' result HTML-'+result);
                                if (result != null && typeof result=='object' ) {

                                     console.log('paymentfield found ');

                                    var paymentFieldObjJSON=result;
                                    populatePaymentSettings(elemSourceParent,paymentFieldObjJSON);

                                } 
                                else {
                                         console.log('No paymentfield found ');
                                         $(elemSourceParent).find('.ExpandDivPayment').slideDown(300);
                                }


                        } else if (event.type === 'exception') {
                                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                        } else {
                                //console.log(" Exception 2- " + event.message);
                        }
                }, {
                        escape: true
                }
        );
        

}
function resetPaymentSettingsJS(paymentFieldid,elemSourceParent) {
var createPaymentfieldIfNotExists=false;
var paymentElementId='';
        var ffrecordid = "";
        ffrecordid = '{!$CurrentPage.parameters.id}';

        Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormEditorController.remoteGetPaymentFieldRecord)}',
                ffrecordid,paymentFieldid,createPaymentfieldIfNotExists,paymentElementId,
                function(result, event) {
                        if (event.status) {

                                //   //console.log(' result HTML-'+result);
                                if (result != null && typeof result=='object' ) {
                                            resetPaymentSettingsCallBack(result,elemSourceParent);

                                } 
                                else {
                                         console.log('No paymentfield found ');
                                        
                                }


                        } else if (event.type === 'exception') {
                                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                        } else {
                                //console.log(" Exception 2- " + event.message);
                        }
                }, {
                        escape: true
                }
        );
        

}
function remoteInitializePaymentFieldsInfoJS(paymentFieldid,elemSourcePaymentDivId) {
var createPaymentfieldIfNotExists=false;
var paymentElementId='';
        var ffrecordid = "";
        ffrecordid = '{!$CurrentPage.parameters.id}';

        Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormEditorController.remoteGetPaymentFieldRecord)}',
                ffrecordid,paymentFieldid,createPaymentfieldIfNotExists,paymentElementId,
                function(result, event) {
                        if (event.status) {

                                //   //console.log(' result HTML-'+result);
                                if (result != null && typeof result=='object' ) {
                                            initializePaymentFieldsInfoCallBack(result,elemSourcePaymentDivId);

                                } 
                                else {
                                         console.log('No paymentfield found ');
                                        
                                }


                        } else if (event.type === 'exception') {
                                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                        } else {
                                //console.log(" Exception 2- " + event.message);
                        }
                }, {
                        escape: true
                }
        );
        

}
function remoteSetCurrencyLabelJS(currencyId,fieldLiElem)
 { 
       Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteGetCurrencyInfo)}',
        currencyId,
        function(result, event) {
            if (event.status) {
                
                
               if (result != null && typeof result=='object'  ) {
                
                   console.log('Currency Record ');
                    var currency_Symbol__C=getPrefixedOrgFieldName(SFOrgPrefix,'Currency_Symbol__c');
                    if(result[currency_Symbol__C]!=null)
                    {
                        console.log(' Currency is  defined');
                        setPaymentCurrencyLabel(result[currency_Symbol__C],fieldLiElem);
                    }
                    else
                    {
                        console.log(' Currency is not defined');
                        setPaymentCurrencyLabel("$",fieldLiElem);
                    }
                  
                   
                     
                } else {
                     console.log('Currency list null');
                }

            } else if (event.type === 'exception') {
                //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" unknown Exception while getting available themes- " + event.message);
            }
        }, {
            escape: false
        }
    );
 }

function initializePaymentFieldsInfo(paymentFieldid,elemSourcePaymentDivId)
{
    remoteInitializePaymentFieldsInfoJS(paymentFieldid,elemSourcePaymentDivId);
}
function initializePaymentFieldsInfoCallBack(paymentFieldRecord,elemSourcePaymentDivId)
{
 var elementParentFieldLi=$('#'+elemSourcePaymentDivId).parents('.fieldLi');
     var payment_type__c=getPrefixedOrgFieldName(SFOrgPrefix,'Payment_Type__c');
     var test_Mode__c=getPrefixedOrgFieldName(SFOrgPrefix,'Test_Mode__c');
      var subtotal_Field_Type__c=getPrefixedOrgFieldName(SFOrgPrefix,'Subtotal_Amount_Field_Type__c');
       var is_Payment_Required__c=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Payment_Required__c');
       var display_Amount_Charged__c=getPrefixedOrgFieldName(SFOrgPrefix,'Display_Amount_Charged__c');
       var currency__c=getPrefixedOrgFieldName(SFOrgPrefix,'Currency__c');
       var account__c=getPrefixedOrgFieldName(SFOrgPrefix,'Account__c');

     
    

    if(paymentFieldRecord[is_Payment_Required__c]!=null)
    {
         setPaymentAmountRequired(paymentFieldRecord[is_Payment_Required__c],elementParentFieldLi);
    }
  var displayamount=false;
    if(paymentFieldRecord[display_Amount_Charged__c]!=null)
    {
        console.log(' setPaymentAmountDisplayFlag');
        displayamount=paymentFieldRecord[display_Amount_Charged__c];
        setPaymentAmountDisplayFlag(paymentFieldRecord[display_Amount_Charged__c],elementParentFieldLi);
    }
    if(!isNullOrEmpty(paymentFieldRecord[currency__c]))
    {
        //currency is not null
        remoteSetCurrencyLabelJS(paymentFieldRecord[currency__c],elementParentFieldLi)
    }
    if(paymentFieldRecord[test_Mode__c]!=null)
    {
        var testmode=paymentFieldRecord[test_Mode__c];
     setPaymentTestModeDisplay(testmode,$('#'+elemSourcePaymentDivId).find('.test-mode-togglelink'));
     setPaymentTestModeHTML(elementParentFieldLi,testmode);
    }
    populatePaymentAmountInfo(paymentFieldRecord,elementParentFieldLi);
    
    if(!isNullOrEmpty(paymentFieldRecord[payment_type__c]) )
    { 
                restructurePaymentLabels(elementParentFieldLi,paymentFieldRecord[payment_type__c]+'',displayamount);
    }
    
    $(elementParentFieldLi).find('.paypal-item-row .PPGeneralLabelDiv').each(function(i, ppitemLabeldiv) {
                                 var labelprop=$(ppitemLabeldiv).find('label.ff-label').attr('data-label-prop');
                                 var labelpropPrefixed=getPrefixedOrgFieldName(SFOrgPrefix,labelprop);
                                if(!isNullOrEmpty(labelprop) && !isNullOrEmpty(paymentFieldRecord[labelpropPrefixed]))
                                { 
                                    $(ppitemLabeldiv).find('label.ff-label').text(''+paymentFieldRecord[labelpropPrefixed]);
                                }
                                            
                                             
                                        });
}
function remoteSetPaypalAccountModeJS(paymentFieldRecordid,updateTestMode,elementSourceFieldLi)
 { 
       Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteToggleTestMode)}',
        paymentFieldRecordid,updateTestMode,
        function(result, event) {
            if (event.status) {
                
                
               if (result != null && typeof result=='object' ) {

                   if(result.IsValid && result.ResultSObject!=null)
                   {
                    var  issandbox__c=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Sandbox__c');
                           var accid = result.ResultSObject.Id;
                           var issandbox = result.ResultSObject[issandbox__c];
                           var acctWrapdivid='pp-acc-'+accid;
                       setPaymentTestModeHTML(elementSourceFieldLi,issandbox);
                   }
                   else
                   {
                     
                      console.log('Account rec not found');
                   }
                   
                     
                } else {
                     console.log('Account rec not found');
                }

            } else if (event.type === 'exception') {
                //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" unknown Exception while getting available themes- " + event.message);
            }
        }, {
            escape: false
        }
    );
 }
function remoteUpdatePaymenfieldLabelInfoJS(paymentFieldRecord)
 { 
    
     
             Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteUpdatePaymenfieldInfo)}',
                paymentFieldRecord,
                function(result, event) {
                        if (event.status) {
                                
                                
                             if (result != null && result.indexOf('record updated')==0 ) {

                                     console.log('Update- '+result);
                                         
                                } else {
                                         console.log('update paymentfield fail');
                                }

                        } else if (event.type === 'exception') {
                                
                        } else {
                                 
                        }
                }, {
                        escape: false
                }
        );
 }
function updatePaymentFieldLabels(elemSource)
{
    var paymentFieldId='';
        
        var elemSourceParent=$(elemSource).parents('.field-div-payment');
     if($(elemSourceParent).length>0 && !isNullOrEmpty($(elemSourceParent).attr('data-paymentfield-record-id')))
     {
        paymentFieldId=$(elemSourceParent).attr('data-paymentfield-record-id');
     }
 if(!isNullOrEmpty(paymentFieldId))
 {
        var paymentFieldRecord={};
        paymentFieldRecord.Id=paymentFieldId;
            $(elemSourceParent).find('.paypal-item-row .PPGeneralLabelDiv').each(function(indx,targetElementDiv) {
                    var labelprop=$(targetElementDiv).find('label.ff-label').attr('data-label-prop');
                    var labelhtml=$(targetElementDiv).find('label.ff-label').html();
                         if(!isNullOrEmpty(labelprop) && !isNullOrEmpty(labelhtml) )
                        {
                             var labelpropPrefixed=getPrefixedOrgFieldName(SFOrgPrefix,labelprop);
                             paymentFieldRecord[labelpropPrefixed]  =labelhtml;
                        }
                });
        if(paymentFieldRecord!=null && Object.keys(paymentFieldRecord).length !== 0)
        {
            console.log(' Update payment field is triggered');
            remoteUpdatePaymenfieldLabelInfoJS(paymentFieldRecord);
            draftchanges(false);
        }
        else
        {
            console.log(' Update payment field is not triggered');
        }
    }
}
function populatePaymentSettings(elemSourceParent,jsonPaymentFieldObj)
{
        var paymentFieldObjId='';
        if(jsonPaymentFieldObj.Id !==undefined && jsonPaymentFieldObj.Id!='')
        {
            paymentFieldObjId=jsonPaymentFieldObj.Id;
        }

     $(elemSourceParent).find('.field-div-payment').attr('data-paymentfield-record-id',paymentFieldObjId);
     $(elemSourceParent).find('.ExpandDivPayment').attr('data-paymentfield-record-id',paymentFieldObjId);
     $(elemSourceParent).find('.ExpandDivPayment .paypal-accounts-list').find('input.ff-radio-input').removeClass('acc-selected');
     var account__C=getPrefixedOrgFieldName(SFOrgPrefix,'Account__c');
     if(jsonPaymentFieldObj[account__C]!==undefined && jsonPaymentFieldObj[account__C]!='')
        {
            var paypalaccid=jsonPaymentFieldObj[account__C];
            $(elemSourceParent).find('#pp-account-'+paypalaccid+' input[type=radio]').prop('checked',true);
            $(elemSourceParent).find('#pp-account-'+paypalaccid+' input[type=radio]').addClass('acc-selected');
        }
     $(elemSourceParent).find('.ExpandDivPayment').slideDown(300);
     changePaymentActiveTab($(elemSourceParent).find('.ExpandDivPayment .payment-option-tabs>li:first>a'));
     isChangesMadeInForm = true;
     autosaveTriggered();
}
function resetPaymentOptions()
{
    $('#parentUlForm li').find('.ExpandDivPayment').slideUp(300);
    $('#parentUlForm li').find('.ExpandDivPayment').remove();
}
function togglePaymentSetupOverlay(elemSourceParent,hideit)
{
    if(hideit)
    {
    $(elemSourceParent).find('.payment-overlay-box').hide();
    $(elemSourceParent).find('.payment-overlay-box .alert-payment-setup').hide();
    $(elemSourceParent).find('.payment-overlay-wrapper').hide();
    }
    else
    {
        $(elemSourceParent).find('.payment-overlay-box').show();
        $(elemSourceParent).find('.payment-overlay-box .alert-payment-setup').show();
        $(elemSourceParent).find('.payment-overlay-wrapper').show();
    }
}
/* Lookup field functions*/
function remoteGetSObjectListViewJS(lookupObjectName,parentLiElement)
 { 
    //if(refObjectname=='Group'){
                                            //    refObjectname='User';
                                           // }
     
             Visualforce.remoting.Manager.invokeAction(
                '{!URLENCODE($RemoteAction.FormEditorController.remoteGetSObjectListView)}',
                lookupObjectName,
                function(result, event) {
                        if (event.status) {
                                
                                
                             if (result != null && result.length>0  ) {

                                     console.log('remoteGetSObjectListViewJS- '+result);
                                     
                                     populateLookupSelect(parentLiElement,result);
                                    
                                    
                                         
                                } else {
                                    $(parentLiElement).find('#trForLookupView').hide();
                                    $(parentLiElement).find('#trForMsgField').hide();
                                    console.log('No List view found for -'+lookupObjectName);
                                }

                        } else if (event.type === 'exception') {
                                console.log(" Exception while getting  list view- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                                //$(parentLiElement).find('#trForLookupView').addClass('display-none');
                                $(parentLiElement).find('#trForLookupView').hide();
                                $(parentLiElement).find('#trForMsgField').hide();
                        } else {
                        console.log(" unknown Exception while getting list view- " + event.message);
                        $(parentLiElement).find('#trForLookupView').hide();
                        $(parentLiElement).find('#trForMsgField').hide();
                        
                        }
                }, {
                        escape: false
                }
        );
 }

function hideHelpIcon()
{
    $('.intercomHelpIcon').fadeOut(500);
}

/**/

    </script>

        <ol data-joyride="data-joyride" id="takeTour" style="display:none">
            <li data-id="parentUlForm" data-options="tip_location:top">Welcome to the Fast Forms Form Editor. Here is where you select and organize the fields you want to make available in your form. <br /><br />To add fields to your form, simply click and drag any field from the menus to the right and drag it into your form below.<br /><br />You can pick from any of your form's primary or related object fields to add to your form.<br /><br /></li>        
            <li data-id="0sortableForLabelli" data-options="tip_location:right">Each of your form's fields and sections comes with a number of options available to you. To see these options, simply hover over the field or section, then click on the arrow to the right.<br /><br /></li>        
            <li data-id="FormatToolbar" data-options="tip_location:right;">Here we can select from a number of options for customizing our fields or sections. For sections, we can modify the label and set it to hidden by default. For fields, we can customize the field's label, set options such as read-only or required, add a default value, and customize the error message if a value is not provided by the user. <br /><br />Once we're done customizing our field and section options, we can close the drawer by clicking on the arrow icon above again.<br /><br /></li>   
            <li data-id="generalFieldBox" data-options="tip_location:top">Fast Forms also allows you to add other types of fields that are not associated to your form's objects, called <i>General Fields</i>.<br /><br />Click the arrow next to 'General Fields' to see the fields available to you.<br /><br /></li>         
            <li data-id="generalFieldBox" data-options="tip_location:top">Some of the fields available to you here include a Captcha field, which prevents spam from being submitted to your form, a Text field which allows you to add custom text anywhere in your form, and a File Upload field, which allows you to accept file uploads for your form submissions.<br /><br /></li>
            <li data-id="btnSaved" data-options="tip_location:top;next_button:false;">Ready to share your form with the world? Simply click the 'Publish Draft' button to see some of the Publishing Options available to you.<br /></li>                
        </ol> 

 <!--  Processing And Success dialog Start   -->
 <div id="dialogSucess" title="Processing" style="display:none;margin-top:18px">
        <div id="Processing" class="dialogFont">
                <br/>
                <br/><br/>
                <span>Please wait...</span>
                <span><img style="vertical-align: middle;" src="{!engineUrl}/styles/images/ajax-loader.gif"/></span>      
        </div>
        <div id="success" style="display:none;">
                <br/><br/><br/><img id="sucessImg" src="{!URLFOR($Resource.jquery_dialog,'jquery_dialog/images/success.png')}" style="vertical-align:middle;"/>
                <b>Your request successfully sent to server.</b>
                 
        </div>
        <div id="failure" style="display:none;" class="dialogFont">
                <center>
                <span>There was an issue processing your request. <br />Please contact customer service for details.</span> <br />
                <input type="button" value="OK" class=".ui-dialog .ui-dialog-buttonpane button" style="margin-top:20px;font-size: 15px;font-weight: normal !important;" onClick="errorSave();return false;"/></center>       
        </div>    
 </div>
 <!-- Processing And Success dialog End-->
 <!-- Preivew dialog Start-->
 <div id="previewDialog" title="Preview" style="display:none;" class="contentPreview"> 
 </div>
     <div id="preview" class="preview">
    </div>
 <!-- Preivew  dialog End-->
 <!-- SaveFormInfo dialog Start-->
 <div id="SaveFormInfoDialog" title="Preview" style="display:none;" class="content"> 
 </div>
 
 <apex:form id="frm">
 
 


            <apex:outputPanel id="msgPanel">
                    <apex:pageMessages ></apex:pageMessages>
            </apex:outputPanel>
            
         
            
                     
            <apex:actionFunction immediate="true" name="addRelatedObjectThird" action="{!addRelatedObjectThird}" status="status"  reRender="pnlForFieldsRepeat,msgPanel,valRender"   oncomplete="resetSortable();createHtml();hideSection();listHideRenderDiv();">
                         <apex:param assignTo="{!relatedObjectsXml}"   name="relatedObjectsXml" value=""/>
                            <apex:param assignTo="{!hiddenSelectedObjects}" name="hiddenSelectedObjects" value=""/>
            </apex:actionFunction>
            <apex:actionFunction immediate="true" name="DummyTrigger" action="{!DummyTrigger}" reRender="valRender" status="status" oncomplete="resetSortable(); hideSection();listHideRenderDiv();">
                         <apex:param assignTo="{!relatedObjectsXml}"   name="relatedObjectsXml" value=""/>
                             
            </apex:actionFunction>
            
            <apex:actionFunction immediate="true" name="saveChanges" action="{!saveFormSettingChanges}" reRender="formObjectConfigPanel,pnlForFieldsRepeat,msgPanel,formTitleO,formnameeditPanel,formbreadcrumbTitleO" status="updatingdatastatus" oncomplete="toggleToFormEditor();resetSortable();createHtml();hideSection();listHideRenderDiv();refreshChildRecordsFieldLi();">
                         <apex:param name="relatedObjsXml" value="relatedObjsXml"  />
                            <apex:param assignTo="{!hiddenSelectedObjects}" name="hiddenSelectedObjects" value=""/>
                             <apex:param assignTo="{!formName}" name="fname" value="fname"/> 
                             <apex:param assignTo="{!TrackingEnabled}" name="trackingenabledparam" value=""/>
<apex:param assignTo="{!EmailNotificationEnabled}" name="emailnotificationenabledparam" value=""/> 
                                <apex:param assignTo="{!EmailToNotify}" name="emailnotificationparam" value=""/>  
                                <apex:param name="pdfChatter" value="pdfChatter"/> 
                                 <apex:param name="pdfRecord" value="pdfRecord"/> 
                                 <apex:param name="pdfEmailEnabled" value="pdfEmailEnabled"/> 
                                 <apex:param name="pdfEmailTo" value="pdfEmailTo"/>              
            </apex:actionFunction>
            
                        
            
            <apex:actionFunction immediate="true"   name="loadRuleEditorCall" action="{!loadRuleEditorComponent}" reRender="msgPanel,ruleEditorWrapper" status="statusLoad" oncomplete="rerenderRuleEditorCall();">
                         <apex:param name="toggleRule" value="true"/>
                            
            </apex:actionFunction>
            <apex:actionFunction immediate="true"  name="unloadRuleEditorCall" action="{!loadRuleEditorComponent}" reRender="msgPanel,ruleEditorWrapper" status="status" oncomplete="">
                         <apex:param name="toggleRule" value="false"/>
                            
            </apex:actionFunction>
            <apex:actionFunction immediate="true"   name="loadStyleEditorCall" action="{!loadStyleEditorComponent}" reRender="msgPanel,styleEditorWrapper" status="stylestatusLoad" oncomplete="rerenderStyleEditorCall();">
                         <apex:param name="toggleStyle" value="true"/>
                            
            </apex:actionFunction>
            <apex:actionFunction immediate="true"  name="unloadStyleEditorCall" action="{!loadStyleEditorComponent}" reRender="msgPanel,styleEditorWrapper" status="status" oncomplete="">
                         <apex:param name="toggleStyle" value="false"/>
                            
            </apex:actionFunction>
            
            <apex:actionFunction immediate="true" name="changePrimaryObject" action="{!changePrimaryObject}" reRender="formObjectConfigPanel,tempSelectRelatedList,pnlForFieldsRepeat,msgPanel,relatedObjectConfigPanel,formTitleO,formnameeditPanel,formbreadcrumbTitleO" status="changeconfigstatus" oncomplete="createHtml();toggleToFormEditor();resetSelect();">
                         <apex:param assignTo="{!sobjectName}" name="sNamesobjectName" value="sNamesobjectName"/>
                            <apex:param assignTo="{!formName}" name="fname" value="fname"/> 
                             <apex:param assignTo="{!TrackingEnabled}" name="trackingenabledparam" value=""/> 
                             <apex:param assignTo="{!EmailNotificationEnabled}" name="emailnotificationenabledparam" value=""/>
                                 <apex:param assignTo="{!EmailToNotify}" name="emailnotificationparam" value=""/> 
                                 <apex:param name="pdfChatter" value="pdfChatter"/> 
                                 <apex:param name="pdfRecord" value="pdfRecord"/> 
                                 <apex:param name="pdfEmailEnabled" value="pdfEmailEnabled"/> 
                                 <apex:param name="pdfEmailTo" value="pdfEmailTo"/> 
            </apex:actionFunction>
         
             
            
            
            
            <apex:actionFunction name="saveMessage" action="{!saveMessage}" reRender="hidePopupPanel"/>
             
            <!--  to save form name from form setting when hit save changes -balinder nov 26 2014 -->
         <apex:actionFunction immediate="true" name="saveEditFormName" action="{!saveEditText}" reRender="validationMsgs,formTitleO,formnameeditPanel"   >
                    <apex:param assignTo="{!formName}" name="fname" value="fname"/>  
                     </apex:actionFunction>  
 <apex:actionFunction immediate="true" name="updateTrackSubmissionsOption" action="{!updateTrackSubmissionsOption}" reRender="validationMsgs,trackingEnabledPanel"   >
                    <apex:param assignTo="{!TrackingEnabled}" name="trackingenabledparam" value="trackingenabledparam"/>  
                     </apex:actionFunction> 
                     
            
           
            <apex:actionFunction name="retrieveHtmlService" action="{!retrieveHtmlService}" reRender="pnelSobjectField" status="datacollectionstatus" oncomplete="retrieveHtmlServiceComplete();"/>
            <apex:actionFunction immediate="true" name="callSave" action="{!save}" reRender="pnelSobjectField"  oncomplete="showPublishResponse();sendComplete();">
                          <apex:param assignTo="{!relatedObjectsXml}"   name="relatedObjectsXml" value=""/>
                         <apex:param assignTo="{!fieldsXml}" name="sObjfieldsXml" value="sObjfieldsXml"/>
                         <apex:param assignTo="{!fieldsObjectXml}" name="sObjfieldsObjectXml" value="sObjfieldsObjectXml"/>
                         <apex:param assignTo="{!finalResultHtml}" name="sObjfinalResultHtml" value="sObjfinalResultHtml"/>
                         <apex:param assignTo="{!hiddenCkEditorValue}" name="sObjhiddenCkEditorValue" value="sObjhiddenCkEditorValue"/>
                                <apex:param assignTo="{!hiddenSelectedObjects}" name="hiddenSelectedObjects" value="hiddenSelectedObjects"/>
                                <apex:param assignTo="{!isLookupWarningDisabled}" name="isLookupWarningDisabled" value="isLookupWarningDisabled"/>
            </apex:actionFunction>
            <apex:actionFunction immediate="true" name="callAutosave" action="{!autoSave}" reRender="" status="draftChangesStatus" oncomplete="draftchanges(false);">
                         <apex:param assignTo="{!relatedObjectsXml}"  name="relatedObjectsXml" value=""/>
                         <apex:param assignTo="{!fieldsXml}" name="sObjfieldsXml" value="sObjfieldsXml"/>
                         <apex:param assignTo="{!fieldsObjectXml}" name="sObjfieldsObjectXml" value="sObjfieldsObjectXml"/>
                         <apex:param assignTo="{!finalResultHtml}" name="sObjfinalResultHtml" value="sObjfinalResultHtml"/>
                         <apex:param assignTo="{!hiddenCkEditorValue}" name="sObjhiddenCkEditorValue" value="sObjhiddenCkEditorValue"/>
                                <apex:param assignTo="{!hiddenSelectedObjects}" name="hiddenSelectedObjects" value="hiddenSelectedObjects"/>
            </apex:actionFunction>  

                    <apex:actionStatus id="draftChangesStatus" onstart="draftchanges(true);" onstop="draftchanges(false);" />
         <!--- Label  Dialog  -->
                 <div id="dialog" title="New Label" style="display:none;">            
                        <div class="edit-dialog-alert vff-alert mb50 m0-150"   style="display:none">
                        <div class="ohidden"  ><div class="vff-alert-msg msg-text-div"   >Warning: This field will allow external users to view your Salesforce records.</div><a class="help-icon-w" target="_blank" href="http://visualantidote.com/fastforms/help#lookup-fields"></a></div></div>
                        <table width="100%" border="0" cellspacing="0" id="tblForRequirdBlock" style="margin-top: 10px;overflow: hidden;float:left;">
                                <tr id="trForLabelEdit" class="fieldTd">
                                        <td id="defaultLabelDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Label:</label><span class="hideText"></span>
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" onkeyup="changeFieldLabel(this);" id="defaultLabel"/>
                                        </td>
                                </tr>
                                <tr id="trForSectionLabelEdit" class="sectionTd">
                                        <td id="defaultSectionLabelDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Label:</label> 
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" onkeyup="changeSectionLabel(this);" id="defaultSectionLabel"/>
                                        </td>
                                </tr>
                                <tr id="trForSectionInformation"  class="sectionTd">
                                        <td   class="formatEdit">
                                         <label class="sectionLbl" style="max-width:217px;padding-left:0px;color: #616161;font-size:14px;" >Hide Section:</label>
                                             </td>
                                        <td class="formatEditCol2">
                                         <input class="css-checkbox" id="chkhideSectionField" type="checkbox" onchange="chkhideSection(this);" /><label class="css-label"     for="chkhideSectionField"></label> 
                                        </td>
                                 </tr>
                                 <tr id="trForDisplayType" class="fieldTd">
                                        <td id="displayTypeDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Display as:</label>
                                        
                                        </td>
                                        <td class="formatEditCol2">
                                                <div class="flex-ctrl-display-as picklist-display-type display-none">
                                                <select onchange="changeDisplayType(this)" class="flex-ctrl picklist-type-select"> 
                                                        <option value="picklist-default">Picklist (default)</option>
                                                        <option value="picklist-combobox">Searchable Picklist</option>
                                                        <option value="picklist-radiobutton-vertical">Radio Button List (Vertical)</option>
                                                        <option value="picklist-radiobutton-horizontal">Radio Button List (Horizontal)</option>
                                                </select>
                                                </div>
                                                <div class="flex-ctrl-display-as multi-picklist-display-type display-none">
                                                <select onchange="changeDisplayType(this)" class="flex-ctrl multi-picklist-type-select"> 
                                                        <option value="multipicklist-default">Multi-Select Picklist (default)</option>
                                                        <option value="multipicklist-multi-tags">Multi-Select Tag List</option>
                                                        <option value="multipicklist-multi-tags-check">Multi-Select Checkbox Tag List</option>
                                                        <option value="multipicklist-checkbox-vertical">Checkbox List (Vertical)</option>
                                                        <option value="multipicklist-checkbox-horizontal">Checkbox List (Horizontal)</option>                          
                                                        
                                                </select>
                                                </div>
                                                <div class="flex-ctrl-display-as integer-display-type display-none">
                                                <select onchange="changeDisplayType(this)" class="flex-ctrl integer-type-select"> 
                                                        <option value="integer-default">Textbox (default)</option>
                                                        <option value="integer-npsrating">Net Promoter Score</option>
                                                        <option value="integer-starrating">Star Rating</option>
                                                </select>
                                                <div class="rating-range-block display-none" >
                                                        <div class="star-rating-range display-none" >
                                                                <div class="rating-range rating-no-of-stars star" >
                                                                <span>No. of stars:</span><input id="noOfStars"  onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input  no-of-stars"   type="text" />
                                                                </div>
                                                                <div class="rating-range rating-range-min star" >
                                                                <span>Label for min value:</span><input id="starMinLabel"   onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-min"   type="text" />
                                                                </div>
                                                                
                                                                <div class="rating-range rating-range-max star" >
                                                                <span>Label for max value:</span><input id="starMaxLabel"   onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-max"   type="text" />
                                                                </div>
                                                        </div>
                                                        <div class="nps-rating-range display-none" >
                                                                                                                                 
                                                                <div class="rating-range rating-range-min nps" >
                                                                <span>Label for min value:</span><input id="npsMinLabel"   onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-min"   type="text" />
                                                                </div>
                                                                <div class="rating-range rating-range-middle nps" >
                                                                <span>Label for middle value:</span><input id="npsMiddleLabel"  onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-middle"   type="text" />
                                                                </div>
                                                                <div class="rating-range rating-range-max nps" >
                                                                <span>Label for max value:</span><input  id="npsMaxLabel"  onblur="changeInputRatingAttrs(this);"  class="flex-ctrl-input input80 range-max"   type="text" />
                                                                </div>
                                                        </div>
                                                </div>

                                                </div>
                                        </td>
                                </tr>
                                
                                <tr id="trForDefaultValue" class="fieldTd">
                                        <td id="defaultDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Default value:</label>
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="defaultValue"/>
                                        </td>
                                </tr>
                                <tr id="trForCurrencyLabelField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblreadOnlyField">Currency Label:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="currencyLabelValue" class="sfff-input50" onchange="setFieldCurrencyLabel(this);"/>
                                        </td>
                                </tr>
                                <tr id="trForHideField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblHideField">Hide field:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="checkbox" class="css-checkbox" id="hideField" onchange="checkHide(this);" /><label for="hideField" class="css-label"></label>
                                        </td>
                                </tr> 
                                <tr id="trForReadOnlyField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblreadOnlyField">Read-only:</label>
                                        </td>
                                        <td class="formatEditCol2"> <input type="checkbox" class="css-checkbox" id="readOnlyField" onchange="checkReadOnly(this);"/><label for="readOnlyField" class="css-label"></label>
                                        </td>
                                </tr> 
                                <tr id="trForUpsertField" class="fieldTd">
                                        <td class="formatEdit" ><label  style="padding-left:0px;width: 190px;" id="lblHideField">Update existing Salesforce record matching this field value:</label>
                                         
                                        </td>
                                        <td class="formatEditCol2" style="vertical-align:top !important">
                                        <input type="checkbox" class="css-checkbox" id="upsertField" onchange="verifyPackage(this);"/><label for="upsertField"  class="css-label"></label>
                                        <a class="help-icon blue-tooltip"    >
                                                <span class="blue-tooltip-text -mt90 -ml40">Check this box if you want to update an existing record that matches the value provided in this field. If a matching record is found, the record will get updated with the submitted information.</span>
                                                <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                                        </a>                      
                                        </td>
                                </tr>                          
                                <tr id="trForLimitField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblLimitField">File upload limit:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="limitValue" onkeypress="return checkInput(event);" maxlength="2" onblur="checkRegInput();" onchange="addLabel();resetSavedButton();"/>
                                        </td>
                                </tr>
                                <tr id="trForFileField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblAllowField">Allowed file types:</label>
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="hidden" id="selectedfiletypes"/>
                                                        <div onclick="fancydropdowntoggle(this);"  class="fancyheader" >
                                                        <span style="display:inline-block;width:88%">All</span>
                                                        <img class="ExCol" src="{!URLFOR($Resource.iconImages,'SelectArrowDown.png')}" style="float:right;"/>
                                                        </div>
                                                        <div class="fancydropdown" style="clear:both;display:none;">
                                                                <input type="checkbox" id="imgType" value=".jpg,.png,.gif" class="css-checkbox flChk"/><label for="imgType" class="css-label" style="font-size:11px;max-width:100%;">Image File (.jpg, .png, .gif)</label>
                                                                <input type="checkbox" id="docType" value=".doc,.docx" class="css-checkbox flChk"/><label for="docType" class="css-label" style="font-size:11px;max-width:100%;">Word document (.doc, .docx)</label>
                                                                <input type="checkbox" id="xlsType" value=".xls,.xlsx,.csv" class="css-checkbox flChk"/><label for="xlsType" class="css-label" style="font-size:11px;max-width:100%;">Excel spreadsheet (.xls, .xlsx, .csv)</label>
                                                                <input type="checkbox" id="pdfType" value=".pdf" class="css-checkbox flChk"/><label for="pdfType" class="css-label" style="font-size:11px;max-width:100%;">Adobe Acrobat file (.pdf)</label>
                                                                <input type="checkbox" id="zipType" value=".zip" class="css-checkbox flChk"/><label for="zipType" class="css-label" style="font-size:11px;max-width:100%;">Archive file (.zip)</label>
                                                                <input type="checkbox" id="multiType" value=".wmv,.mp3,.mp4,.avi" class="css-checkbox flChk"/><label for="multiType" class="css-label" style="font-size:11px;max-width:100%;"> Media file (.wmv, .mp3, .mp4, .avi)</label><br/>
                                                        </div>                            
                                                        <div class="fancydropdownbottom" style="background-color:#f7f7f7;display:none;text-align:left;padding-left: 14px;">
                                                        Add Custom 
                                                        <br/>
                                                        <input type="text" id="customfltype" onchange="addLabel();resetSavedButton();" style="width:180px"/>
                                                        <br /><div class="txtInstruct">e.g. .psd, .asp</div>
                                                        </div>
                                        </td>
                                </tr>
                                    <tr id="trForUploadToChatterField"  class="fieldTd">
                                        <td  class="formatEdit"><label style="padding-left:0px">Upload To Chatter:</label>            
                                        </td>
                                        <td class="formatEditCol2"><input type="checkbox" id="chkUploadToChatter" class="css-checkbox" onchange="checkUploadToChatter(this);"/><label for="chkUploadToChatter" class="css-label"></label>
    
                        <a class="help-icon blue-tooltip"    >
                                <span class="blue-tooltip-text -mt68 -ml40">Check this box to have files uploaded to your form stored as Chatter files instead of standard Notes and Attachments files.</span>
                                <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>                        
                                                
                                                                                 
                                        </td>
                                </tr>
                                <tr class="fieldTd" id="trForRequired">
                                        <td  class="formatEdit"><label style="padding-left:0px">Required:</label>            
                                        </td>
                                        <td class="formatEditCol2"><input type="checkbox" id="requiredChk" class="css-checkbox" onchange="checkReq(this);"/><label for="requiredChk" class="css-label"></label>
                                        </td>
                                </tr>
                                <tr class="fieldTd" id="trForLookupView">
                                        <td  class="formatEdit"><label style="padding-left:0px">List View:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                        <select  id="lookupListView" class="select-elem lookup-select" onchange="lookupListViewChange(this);"/> <a class="lookup-edit-link" onclick="openLookupEditPage(this);return false;" style="display:none">Edit</a>
                                        </td>
                                </tr>
                                <tr id="trForMsgField" class="fieldTd" style="display:none;">
                                        <td  class="formatEdit"><label style="padding-left:0px" id="lblErrMsgForRequiredField">Error message to be shown<br />if they don&#39;t provide a value:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="errMsgForRequiredField" onchange="addLabel();resetSavedButton();"/>
                                        </td>
                                </tr>
                                <tr class="fieldTd" id="trForImageAlignment" style="padding-top">
                                        <td  class="formatEdit" style="padding-top:10px;"><label style="padding-left:0px;">Alignment:</label>            
                                        </td>
                                        <td class="formatEditCol2" style="padding-top:10px;">
                                                <select id="ddlImageAlignment" style="width:100px" onchange="addLabel();resetSavedButton();"> 
                                                        <option value="">--select--</option>
                                                        <option value="left">Left</option>
                                                        <option value="right">Right</option>
                                                        <option value="center">Center</option>
                                                </select>
                                        </td>
                                </tr>               
                                <tr class="fieldTd" id="trForImageWidth">
                                        <td  class="formatEdit"><label style="padding-left:0px">Width:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="text" style="width:100px" id="imgWidthValue" maxlength="4" onchange="addLabel();resetSavedButton();"/>&nbsp;px
                                        </td>
                                </tr>    
                                <tr class="fieldTd" id="trForImageHeight">
                                        <td  class="formatEdit"><label style="padding-left:0px">Height:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="text" style="width:100px" id="imgHeightValue" maxlength="4" onchange="addLabel();resetSavedButton();"/>&nbsp;px
                                        </td>
                                </tr>                      
                         </table>
                         <div style="float:right;margin-right: 24px;cursor: pointer;margin-top: -47px;"><img class="arrowUp" src="{!URLFOR($Resource.select2,'left_arrow.png')}" /></div>
                        <br/>
                     <input type="hidden" id="hiddenLiId"/>
                     <input type="hidden" id="hiddenLiLabelId"/>
                </div>
        <!--- Label Dialog End -->
                
         <!--- Button  Dialog  -->
                 <div id="buttonDialog" title="New Button" style="display:none;">
                        <br/><br/>
                        
                        <table cellspacing="20px" cellpadding="0" width="100%" style="margin-left:-2%;background-color:#e6ecef;">
                                <tr>
                                        <td width="36%" style="padding-left: 0px;font-family: 'Open Sans', 'sans-serif';"><label   >Button text:</label>
                                        </td>
                                        <td><input type="text" id="btnTxt" onFocus="removeError(this);" style="margin-left:0.6%;" onchange="resetSavedButton();"/></td>
                                </tr>
                                <tr>
                                        <td style="padding-left: 0px;font-family: 'Open Sans', 'sans-serif';"><label   >Footnote:</label></td>
                                        <td><input style="margin-left:0.6%;"  type="text" id="btnFootnote" value="* Required" onchange="resetSavedButton();"/></td>
                                </tr>
                                <!-- tdForNotification Section -->
                                <tr style="display:none;">
                                        <td style="padding-left: 0px;font-family: 'Open Sans', 'sans-serif';" ><h2 style="margin-right:25px;color:black;">Submit behaviour:</h2>
                                        </td>
                                        <td><select id="submitBehaviorOptions" style="margin-left:0.6%;">
                                                        <option value="Display a message">Display a message</option>
                                                        <option value="Redirect Link">Redirect to a page</option>
                                                </select>
                                                
                                        </td>
                                </tr>
                                <tr id="trBtnUrl">
                                        <td style="padding-left: 0px;font-family: 'Open Sans', 'sans-serif';"><label>Redirect URL:</label>
                                        <br/><div style="font-size:12px;font-weight:normal;">Redirects the user to this link after they submit their form</div>
                                        </td>
                                        <td><input type="text" id="btnUrl" style="margin-left:0.6%;float:left;" onchange="addLabel();resetSavedButton();"/>
                                                <div style="float:left;margin-left:18px;" >
                                                        <a class="tooltip" href="#"><img style="margin-top: 7px;float:left;margin-left:3px;" class="helpIconCode"  height="25px" src="{!URLFOR($Resource.alpha,'blank.png')}"/><span><h6>This option will redirect the person filling out the form to another website after they submit their form</h6></span></a>
                                                </div>
                                                
                                        </td>
                                </tr>
                                <tr id="trBtnMessage">
                                        <td style="padding-left: 0px;font-family: 'Open Sans', 'sans-serif';"><label   vatt="PHONE">Thank you message:</label>
                                        <br/><div style="font-size:12px;font-weight:normal;">This message will be shown to the user in a pop-up window after they submit their form</div>
                                        </td>
                                        <td>
                                                <textarea id="BtnMessage" style="margin-left:0.6%;" onchange="addLabel();resetSavedButton();">Thank you for your submission!</textarea>
                                        </td>
                                </tr>
                                <tr style="display:none">
                                        <td colspan="2">
                                                <center><input  id="saveBtn"  class="buttonClassMerge" type="button" value="Save" onclick="$('#saveBtn').parent().parent().parent().parent().parent().parent().parent().find('.editImg').click();return false;" />
                                                 </center>
                                                 <input type="hidden" id="hiddenLiButtonId"/>
                                        </td>
                                </tr>
                        </table>
                        <div style="float:right;margin-right: 8px;cursor: pointer;margin-top: -47px;"><img class="arrowbtnUp" src="{!URLFOR($Resource.select2,'left_arrow.png')}" /></div>
                        <br/>
                </div>
                    <apex:pageMessages id="validationMsgs" /> 
     <apex:pageMessages ></apex:pageMessages>
                    <apex:actionStatus id="status">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Loading, please wait...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                <apex:actionStatus id="changeconfigstatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Getting records information...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                <apex:actionStatus id="updatingdatastatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Saving changes...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                
                <apex:actionStatus id="datacollectionstatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Collecting form's data...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                <apex:actionStatus id="addrelatedObjstatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Finalizing setup...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                            
                </apex:actionStatus>
     <div Class="pbFields" style="display:none;">
     <apex:outputpanel id="pnelSobjectField">
     <apex:inputtext value="{!formName}" styleClass="formName" id="formName"/>
     <apex:inputtext value="{!selectedPreFormID}" styleClass="selValue" id="selectedPreFormID"/>
      <apex:inputhidden value="{!hiddenCkEditorValue}" id="hiddenCkEditorValue" />
                                                 <apex:inputhidden value="{!finalResultHtml}" id="finalResultHtml" />
                                                 <apex:inputhidden value="{!fieldsXml}" id="fieldsXml" />
                                                 <apex:inputhidden value="{!fieldsObjectXml}" id="fieldsObjectXml" />
                                                 <apex:inputhidden value="{!is500InternalError}" id="is500InternalError" />
        </apex:outputpanel>
         </div>
         <!---New Form & Embed Code,Privew,Save & publish-->

            
            <c:TrialExpiryComponent id="trialExpCp" />
             <div class="mainHeader">
                    <div class="mainHeaderInner">
                <div style=" ">
     
                     <div class="bread-crumb"  >
                         <div class="bread-crumb navbar">
                                <div class="navbar-inner">
                                        <div class="navcontainer">
                                                <ul class="nav-wizard">
                                                        <li  >
                                                                <a id="breadcrumb-dashboard" href="{!$Site.BaseUrl}FormMenu">Dashboard</a>
                                                        </li>
                                                     
                                                                        <li class="li-arrow-seperator"></li>
                                                         <li class="active">
                                                                <span  id="breadcrumb-formeditor" style="padding: 0px 0px 0px 20px;"  >
                                                                <apex:outputPanel id="formbreadcrumbTitleO"  >
                                                            {!TruncatedFormName} 
                                                            </apex:outputPanel></span>
                                                        </li>
                                                </ul>
                                        </div>
                                </div>
                        </div>
                         </div>
                
                </div>
                        <div style="float: right;"><img src="{!URLFOR($Resource.logos,'color_logo.png')}" />
                        </div>     
                        
                        <div class="help-text-r"><a target="_blank" href="http://www.visualantidote.com/fastforms/help?utm_source=fastformsapp&utm_medium=FormEditorPage&utm_campaign=help" ><img src="{!URLFOR($Resource.helptext_image)}" /></a>
                        </div>                        
                </div>
                                                                 
                
         </div>
         
            
                <apex:outputPanel id="editTextDiv" style="background-color:white;">
                 
                                <div  id="headerPanel"  class="form-information-wrapper-outer ">
                                            <div class="form-information-wrapper grey-left-border10"> 
                                                <apex:outputPanel id="formInformationPanel" layout="block"   styleClass="form-information">   
                                                            <apex:outputPanel id="formTitleO"  >
                                                            <h1  id="formTitle"  >{!form.Name}</h1>
                                                            </apex:outputPanel>
                                                         <apex:outputPanel id="formObjectConfigPanel" layout="block"   styleClass="ObjectName" style="margin-top:-1%;">
                                                                 
                                                                    <h4 style="line-height:12.5px">

                                                                    <span style="display:block">
                                                                    <i>Primary Object:</i>&nbsp;&nbsp;<span data-object="{!form.Object_Name__c}" class="{!form.Object_Name__c}" id="priName" style="margin-bottom: 4px;display: inline-block;">{! primaryObjectLabelMap[form.Object_Name__c] }</span> 
                                                                    </span> 
                                                                    <apex:variable var="childCount" value="{!0}" /> 
                                                                     <apex:repeat value="{!relatedObjectInfoList}"  var="f">
                                                                     <apex:variable var="childCount" value="{!IF(f.objectType=='detail',childCount+1,childCount)}"/>
                                                                           <span data-relobj="{!IF(f.objectType=='detail',childCount,'')}" class="secName-wrap object-{!f.objectType} relobj-{!IF(f.objectType=='detail',childCount,'')}">  <img src="{!URLFOR($Resource.iconImages,'TreeEditorSingle.png')}"  />
                                                                             <span class="secName "   id="{!f.CodeName}">{!f.DisplayName}</span> 
                                                                             </span> 
                                                                        </apex:repeat>
                                                                    </h4>
                                                        </apex:outputPanel>
                                                 </apex:outputPanel>
                                                
                                                
                                                <div class="form-editor-title-box">
                        <div class="form-actions publish-actions">
                        <div class="action-icons-left">
                         
                         <div class="button-draft draft-event draft-saving italic-text blue-tooltip" id="draftSaveState" style="display:none"    >
                             
                             <span class="draft-text">Draft Saving</span>
                            </div>
                        <a id="btnSaved" href="javascript:void(0);" onClick="publishDraft(this);hideSection();" class="btnPublishedSaved vabutton1 publish-draft {!IF(draftStatus!='' && draftStatus=='Unpublished' ,'','va-disabled')}"      > Publish Draft </a>
                        </div>
                        <div class="action-icons-right">
                         
                     <a class="action-icon preview-icon blue-tooltip" href="{!$Site.BaseUrl}FormdraftPreview?id={!form.Id}" target="_blank"      ><span class="blue-tooltip-text">Preview</span></a>
                     <a class="action-icon close-icon blue-tooltip" href="{!$Site.BaseUrl}FormMenu"    ><span class="blue-tooltip-text">Close</span></a>
                        </div>
                        </div>
                        </div>
                        <div class="form-settings-wrapper">
                         <div class="form-settings-wrapper-inner">
                        <div class="vabutton2" onClick="toggleFormSettingSection(true);return false;"   >
                        <span class="btnText">Form Settings</span><span class="btnIcon"></span>
                        </div>
                        </div>             
                        </div>
                        
                        
                        
             
                                                
                         <div style="clear:both">  
                             </div>
                             </div>
                        <div id="frmSetting" style="width: 100%;display:none;background-color:#c4d5e0;">
                                <div class="expendSetting" style="padding: 50px 45px;width: 100%;height: auto;overflow: hidden; ">
                             
                                <div  class="form-setting-wrapper"  >
                                     <div class="form-row-group pt50">
                                            <div class="form-row">
                                            <div class="col-label">
                                                 <label class="label-for">Form Name</label>
                                                 </div> 
                                                    <div class="col-inputs">
                                                    <apex:outputPanel id="formnameeditPanel"  >
                                                <input id="formnameedit" class=""  type="text" value="{!form.Name}"   maxlength="80"   />
                                                </apex:outputPanel>  
                                            </div>
                                            </div>
                                            
                                        
                                            <div class="form-row">
                                            <div class="col-label">
                                                 <label class="label-for">Primary Object</label>
                                                 </div> 
                                                    <div class="col-inputs  object-select-elements-block">
                                                 <div class="scroll-parent">
                                                                                                 <apex:selectList styleclass="select-primary-element"  id="dropSelectPrimary"  onchange="changePrimaryObjectCall(this);return false;"    value="{!sobjectName}" multiselect="false" size="1">
                                                                                                                            <apex:selectOptions value="{!sobjectPreList}"></apex:selectOptions> 
                                                                                                 </apex:selectList>
                                                                                                 <!-- Select Redefine -->
                                                                                        </div>
                                                                                        <br/>
                                                                                        <apex:variable var="relObjCount" value="{!0}" /> 
                                                         <apex:outputPanel id="relatedObjectConfigPanel"  layout="block"    styleClass="select-secondary-element-wrapper  {!IF(isFreemium,'fm-enabled','')}" >
                                                                     <apex:repeat value="{!relatedObjectInfoList}"  var="f">
                                                                     <div        class="secondary-object-block" >
                                                                     <apex:variable var="relObjCount" value="{!relObjCount+1}"/>
                                                                            
                                                                             
                                                                         
                                                                
                                                                 
                                                                <div class="scroll-parent" >
                                                                          <select   data-rel-index="{!relObjCount}"  class="select-secondary-element select-related-{!relObjCount}" onchange="OnChangeRelatedObject(this,false);"  > 
                                                                          <option value="{!f.codeName}" selected="true">{!f.displayName}</option>
                                                                         </select>
                                                                </div>
                                                              
                                                                <div class="delete-object-box">
                                                                    <a class="fffe-actions rel-object-delete"  onclick="deleteRelObject(this);return false;"></a> 
                                                                    </div>
                                                                    </div> 
                                                                        </apex:repeat>
                                                                        <div class="scroll-parent add-related-obj" >
                                                                        <div class="add-related-item"   onclick="addRelatedObject(this);return false;"  >+ Add Related Object </div> 

                                                                        </div>
                                                                         </apex:outputPanel> 
                                                             
                                            </div>
                                             
                                            </div>
                                             </div>
                                             <span class="silver-line-separator"></span> 
                                            <div class="form-row-group">
                                        <!--  start submit and form confirmation -->  
                                            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Submit Label</label>
                 </div> 
                    <div class="col-inputs">
                     <input type="text" id="txtbxSubmitButtonLabel" />
                    
                     </div> 
 </div> 
 <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Post-Submission Options</label>
                 </div> 
                    <div class="col-inputs">
                                <div class="vertical-tab-container">
                                                                                                <ul class="nav nav-tabs vertical-tabs">
                                                                                                        <li class="active">
                                                                                                        <a href="#formconfirmationRadio1" data-toggle="tab">
                                                                                                        <span class="ff-radio-css"></span>Display a confirmation popup</a>
                                                                                                        </li>
                                                                                                        <li><a href="#formconfirmationRadio2" data-toggle="tab">
                                                                                                        <span class="ff-radio-css"></span>Redirect users to a new page</a>
                                                                                                        </li>

                                                                                                </ul>
                                                                                                <div class="tab-content vertical-tab-content">
                                                                                                        <div class="tab-pane fade in active" id="formconfirmationRadio1">
                                                                                                             <textarea id="txtareaThankyoumsg" rows="4"  ></textarea>
                                                                                                        </div>
                                                                                                        <div class="tab-pane fade" id="formconfirmationRadio2">

                                                                                                             <input type="text" id="txtbxRedirectUrl" />

                                                                                                        </div>
                                                                                                </div>
                                                                                        </div>
                     </div> 
 </div> 
                         <!--  ends submit and form confirmation --> 
                 
                 </div>     
                    <span class="silver-line-separator"></span>         
                         <div class="form-row-group">         
            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Track submissions</label>
                 </div> 
                    <div class="col-inputs">
                   <apex:outputPanel styleClass="sec-col" id="trackingEnabledPanel"  >
                                                                <apex:inputCheckbox styleClass="chkbxtrackingEnabled vff-checkbox" id="chkbxtrackingEnabled" value="{!form.VisualAntidote__TrackingEnabled__c}" selected="{!form.VisualAntidote__TrackingEnabled__c}"/>
                                                                <label class="vff-check-label" for="chkbxtrackingEnabled"></label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to track all your form's submissions in the Form Submissions tab.</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>
                                                        </apex:outputPanel>
            </div>
            </div>
            
     </div>
        <div class="form-row-group pdf-confirmations-block {!IF(isFreemium,'fm-enabled','')}">         
            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">PDF confirmation</label>
                 <span class="freemium-icon blue-tooltip" style="display:none;margin-top: 0px;"><span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>PDF Confirmation is only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span></span>
                 </div> 
                    <div class="col-inputs"> 
                     <div >
                                                                
                         <apex:inputCheckbox styleClass="chkbxPDFConfirmationRecord vff-checkbox" id="chkbxPDFConfirmationRecord" onchange="onPDFEnabledChange(this);"  disabled="{!IF(isFreemium,true,false)}" value="{!form.VisualAntidote__PDF_Confirmation_Record__c}" selected="{!form.VisualAntidote__PDF_Confirmation_Record__c}"/>
                                                                <label class="vff-check-label" for="chkbxPDFConfirmationRecord">Save a PDF copy of form submissions to Salesforce</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt68 -ml40">Check this box to have a PDF copy of each form submission saved to your form's primary object record as an attachment</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>
                     </div>
                     <div class="sec-col pdf-chatter-upload"  style="display:{!IF(form.PDF_Confirmation_Record__c,'block','none')}"  >
                                                   <apex:inputCheckbox styleClass="chkbxPDFConfirmationChatter vff-checkbox" id="chkbxPDFConfirmationChatter"   disabled="{!IF(isFreemium,true,false)}"  value="{!form.VisualAntidote__PDF_Confirmation_Chatter__c}" selected="{!form.VisualAntidote__PDF_Confirmation_Chatter__c}"/>
                                                                <label class="vff-check-label" for="chkbxPDFConfirmationChatter">Upload to Chatter</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to have the attached PDF uploaded as a Chatter file</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>            
                     </div>
                      <div class="sec-col pdf-chatter-upload"  style="display:{!IF(form.PDF_Confirmation_Record__c,'block','none')}"  >
                                                   <apex:inputCheckbox styleClass="chkbxPDFEmailEnabled vff-checkbox" onchange="onPDFEmailEnabledChange(this);" id="chkbxPDFEmailEnabled"   disabled="{!IF(isFreemium,true,false)}"  value="{!form.VisualAntidote__PDF_Send_To__c}" selected="{!form.VisualAntidote__PDF_Send_To__c}"/>
                                                                <label class="vff-check-label" for="chkbxPDFEmailEnabled">Send me a copy of the PDF</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to have a PDF copy of each form submission sent to your email</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>
                                                            
                                                           <apex:outputPanel layout="block" styleClass="sec-col" rendered="{!IF(isFreemium,true,false)}"  >
                                                            <input type="text" style="display:{!IF(form.PDF_Send_To__c,'block','none')}" value="{!IF(ISBLANK(form.PDF_Send_To_Email__c), $User.Email,form.PDF_Send_To_Email__c)}" id="txtPDFSendToEmail" class="ff-type-text txt-pdf-sendtomail" maxlength="100"  readonly="true"/> 
                                                            </apex:outputPanel>  
                                                            <apex:outputPanel layout="block" styleClass="sec-col" rendered="{!IF(isFreemium,false,true)}"  >
                                                            <input type="text" style="display:{!IF(form.PDF_Send_To__c,'block','none')}" value="{!IF(ISBLANK(form.PDF_Send_To_Email__c), $User.Email,form.PDF_Send_To_Email__c)}" id="txtPDFSendToEmail" class="ff-type-text txt-pdf-sendtomail" maxlength="100"  /> 
                                                            </apex:outputPanel>  
                                                           
                                                                   
                                   
                     </div>
                </div>
           
            </div>
            
     </div>
     
         
             <div class="form-row-group email-notifications-block"    >
                    <div class="form-row">
                     <div class="col-label">
                     <apex:outputLabel styleClass="label-for" value="Notifications"  />
                                </div>                
                     <div class="col-inputs">
                        
                        <apex:inputCheckbox styleClass="chkbxemailNotifications vff-checkbox" onchange="onEmailNotificationsEnabled(this);" id="chkbxemailNotificationsEnabled"      value="{!form.VisualAntidote__EnableEmailNotifications__c}" selected="{!form.VisualAntidote__EnableEmailNotifications__c}"/>
<label class="vff-check-label" for="chkbxemailNotificationsEnabled">Notify me on error</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to have an email sent to you whenever an error occurs with your form</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a> 
                        <input    style="display:{!IF(EmailNotificationEnabled,'block','none')}" id="inputTxtemailNotifications" class="sec-col ff-type-text"  type="text" value="{!IF(ISBLANK(EmailToNotify), $User.Email,EmailToNotify)}"   maxlength="100"   />
                                                                   
                          </div>
                         </div>

             </div>
    
                                     </div>
                                </div>
                                <div  >
                                 </div>
                                <div style="clear:both;text-align:center;overflow: hidden;width: 100%;display: block;padding-bottom: 20px;" >
                                <div style="float:right;margin-right: 25px;"><a href="javascript:void(0);" onClick="Saved();return false;" class="vabutton1 saveSetting display-inline-block">Save Changes</a></div>
                                <div style="float:right;margin-right: 10px;"><a href="javascript:void(0);" onClick="UnSaved(true);return false;" class="vabutton2 display-inline-block">Cancel</a></div>                
                                </div>
                                 
                             
                        </div>
                    <div style="clear:both">    </div>
                 <div class="grey-left-border10">
                                         </div>
                                         </div>
                 
         </apex:outputPanel>
        
        
         <div class="marginLRauto ohidden text-align-center">
         <div class="vff-success " id="successActionBox" style="display: none;">
                                
                                <div class="vff-success-msg msg-text-div" onclick="closeNotification(this);" style="display:block"> </div>
                                </div>
        </div>
        <apex:outputPanel layout="block" style="display:none" styleClass="freemium-msg-box-outer" rendered="{!IF(isFreemium,true,false)}">
         <div class="freemium-msg-box"   >
                                
                                <div class="msg-text-div"  >Some features have been disabled in Fast Forms free edition.</div>
                               <span onclick="closeFreemiumNotification(this,'formeditor');" class="close-icon"></span>
                                </div>
        </apex:outputPanel>
            
            
         
        <apex:outputPanel layout="block" id="pb2" >
                
             <apex:outputPanel id="dragDropPnl"  layout="block" >       
                 <div id="mainDiv" >
                        
                                 <div class="marginLRauto"   > 
                                         <div class="nav-pills">
                                                <ul class="nav nav-tabs sfff-editor-tabs"  >
                                                        <li   class="sfff-editor-tab sfff-form-editor-li active"><a id="formEditorA" href="#sfff-form-editor" aria-controls="sfff-form-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)">Edit Form</a></li>
                                                        <li  class="sfff-editor-tab  sfff-rule-editor-li" ><a id="ruleEditorA" href="#sfff-rule-editor" aria-controls="sfff-rule-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)"><span style="float:left">Edit Rules</span>
                                                        <apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>Conditional rules are only available for paid subscriptions.<span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>
                                                        
                                                        </li>                                 
                                                        <li  class="sfff-editor-tab  sfff-style-editor-li" ><a id="styleEditor" href="#sfff-style-editor" aria-controls="sfff-style-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)"><span style="float:left">Edit Style</span><apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Style editing is only available for paid subscriptions. <span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>
                                                         
                                                        </li>                               
                                                </ul>                         
                                         </div>                 
                                         <div class="tab-pane fade in sfff-form-editor-content  active" id="sfff-form-editor">
                                                 <div class="main-content-holder display-table" style="width:100%;">
                                                 <div   class="form-canvas-wrapper display-cell">
                                                        <div   class="form-canvas-block">
                                                        <div   class="form-canvas-block-inner">
                                                         <div id="labelAndFieldDiv"  >
                                                                 <ul style="list-style-type: none;" id="parentUlForm"></ul>

                                                         </div>
                                                          <div class="add-newsection-box" >
                                                         <a class="vabuttonA1" onclick="addNewSectionDetail(); return false;"><span class="btn-icon-plus"></span> <span class="btn-text">Add New Section</span></a>
                                                                 </div>
                                                                 </div>
                                                                  </div>
                                                 </div>
                                                <div    class="available-fields-wrapper display-cell" style="width:340px;">
                                                        <div id="availableFieldBox" class="availablefields-wrapper"  >
                                                        
                                                                 <div class="form-floating-actions" style="display:none"  >
                                                                    <div class="form-actions publish-actions">
                        <div class="action-icons-left">
                         
                         <div class="button-draft draft-event draft-saving italic-text blue-tooltip"   style="display:none"    >
                             
                             <span class="draft-text">Draft Saving</span>
                            </div>
                        <a   href="javascript:void(0);" onClick="publishDraft(this);hideSection();" class="btnPublishedSaved vabutton1 publish-draft {!IF(draftStatus!='' && draftStatus=='Unpublished' ,'','va-disabled')}"      > Publish Draft </a>
                        </div>
                        <div class="action-icons-right">
                         
                     <a class="action-icon preview-icon blue-tooltip" href="{!$Site.BaseUrl}FormdraftPreview?id={!form.Id}" target="_blank"      ><span class="blue-tooltip-text">Preview</span></a> 
                        </div>
                        </div>
                                                                 </div>
                                                                 <a title="Show Search Box" class="toggle-search-box show-box" onclick="toggleSearchBox(this);return false;">+</a>
                                                                 <div class="available-fields-search-box"  >
                                                                 <a style=" margin-top:-30px; margin-right: -15px;" title="Hide Search Box" class="toggle-search-box hide-box" onclick="toggleSearchBox(this);return false;">x</a>
                                                                    <input type="textbox" placeholder="Search for fields" onkeyup="doDynamicSearch(this)" class="ff-type-search" /><a onclick="doSearch(this);return false;" class="search-link" title="Search fields" />
                                                                    <a class="right-side-link" onclick="clearSearch(this);return false;">Clear</a>
                                                                    
                                                                 </div>
                                                                 <div class="available-fields-header"  >
                                                                    <h3>Objects</h3><a class="right-side-link edit-object-link" onclick="toggleFormSettingSection(true);return false;">Edit Objects</a>
                                                                 </div>
                                                                <div style="overflow:hidden;" id="divForFields" >
                                                                            <apex:outputPanel id="pnlForFieldsRepeat"  layout="block"     >   
                                                                                <div id="ListMainRel1" class="list-toggle-div-wrap">
                                                                                <div class="availableHeaderDiv" id="availableHeaderDivFirst"  onclick="toggleAvailableFieldsMenu(this);">
                                                                                <span class="obj-back-btn" ></span>
                                                                                <span class="obj-tab-number" >1</span>
                                                                                <span class="objName">{!form.Object_Name__c}</span> <span name="btnExpand"   class="availableHeader togHover" ></span> <span class="obj-freemium freemium-html" style="display:none" ></span>
                                                                                </div>                            
                                                                                <div id="ListRelToggle1" style="display:none;" class="list-toggle-div">                               
                                                                                         <ul id="sortableForRelFields1" class="dropfields" style="">
                                                                                                <apex:repeat value="{!lstFieldsModel}" var="Field">
                                                                                                        <li title="{!Field.tooltipMessage}" class="tooltip fieldLi ui-state-default {!IF(isFreemium && Field.isReference,'fm-enabled','')}" obj="{!sobjectName}" id="lblli{!sobjectName}{!Field.fieldName}" isRequired="{!Field.isRequired}"><div style="DISPLAY: block; float:left;" id="divLabel{!Field.fieldId}" lblName="{!Field.fieldLabel}" > 
                                                                                                        <span class="sfff-field-info display-none"><span    class="field-info-tooltip"  > <span class="field-info-icon">i</span><span class="field-info-tooltip-text"><span class="field-info-tooltip-text-inner"> <span class="fi-tooltip-text-o"><span class="fi-letter-icon">O</span>Object:{!sobjectName} </span><span class="fi-tooltip-text-f"> </span><span class="fi-tooltip-text-r"> </span><span class="fi-tooltip-text-h"> </span></span></span></span></span>
                                                                                                                        <label  VAOBJ="{!Field.referenceTargetField}"   VATT="{!Field.vatt}" id="lbl{!Field.fieldName}" class="ff-label {!IF(Field.isReference,'grayLabel','')}">{!Field.fieldLabel}</label><input type="hidden" value="{!Field.isRequired}"  id="isDefaultRequired{!Field.fieldName}"/><input type="hidden" class="{!IF(Field.isReference,'defReq','')}" value="{!Field.isRequired}" id="isUserSelectedRequired{!Field.fieldName}"/><input type="hidden" value="" id="errMsgForRequired{!Field.fieldName}"/><input type="hidden" value="" id="defaultValue{!Field.fieldName}"/><input type="hidden" value="{!Field.isReference}" id="hideField{!Field.fieldName}"/><input type="hidden"   id="isReadOnly{!Field.fieldName}" value="false"/><input type="hidden" value="{!Field.isReference == null}" id="upsertField{!Field.fieldName}"/></div><div style="DISPLAY: none;" class="fieldDiv" id="divField{!Field.fieldId}"><apex:outputtext value="{!Field.htmlField}" /></div></li>
                                                                                                </apex:repeat>
                                                                                        </ul> 
                                                                                </div>
                                                                                </div>                                       
                                                                                <div style="clear:both"></div>
                                                                                 <apex:variable value="{!2}" var="relObjIndx" />
<apex:outputPanel id="relatedFieldsList" layout="block"    styleClass="available-fields-block-wrapper" >
<apex:repeat value="{!relFieldModelList}" var="relatedFFobj" rendered="{!if(relFieldModelList!=null && relFieldModelList.size>0,true,false)}">
<apex:outputPanel layout="block"    styleClass="available-fields-block " >
                                                                                <div id="ListMainRel{!relObjIndx}" class="list-toggle-div-wrap">
                                                                                <div class="availableHeaderDiv"  onclick="toggleAvailableFieldsMenu(this);">
                                                                                <span class="obj-back-btn" ></span>
                                                                                <span class="obj-tab-number" >{!relObjIndx}</span>                                       
                                                                                <div id="{!relatedFFobj.codeName}" class="objName">{!relatedFFobj.displayName} </div>
                                                                                
                                                                                <span name="btnExpand"   class="availableHeader togHover" ></span>
                                                                                <span class="obj-freemium freemium-html" style="display:none" ></span>
                                                                                </div>                            
                                                                                <div id="ListRelToggle{!relObjIndx}" style="display:none;" class="list-toggle-div">
                                                                                        <ul id="sortableForRelFields{!relObjIndx}" class="dropfields" style=""> 
                                                                                                <apex:repeat value="{!relatedFFobj.fieldModelList}" var="Field" rendered="{!relatedFFobj.isEnabled}">
                                                                                                                        <li title="{!Field.tooltipMessage}" class="tooltip fieldLi ui-state-default" obj="{!relatedFFobj.displayName}"   id="lblli{!(Field.fieldSafeId)}" isRequired="{!Field.isRequired}"><div style="DISPLAY: block; float:left; " id="divLabel{!Field.fieldId}" lblName="{!Field.fieldLabel}" > 
                                                                                                                    <span class="sfff-field-info display-none"><span    class="field-info-tooltip"  > <span class="field-info-icon">i</span><span class="field-info-tooltip-text"><span class="field-info-tooltip-text-inner"> <span class="fi-tooltip-text-o"><span class="fi-letter-icon">O</span>Object:{!relatedFFobj.displayName} </span><span class="fi-tooltip-text-f"> </span><span class="fi-tooltip-text-r"> </span><span class="fi-tooltip-text-h"> </span></span></span></span></span>
                                                                                                            <label  VAOBJ="{!Field.referenceTargetField}"     VATT="{!Field.vatt}" id="lbl{!Field.fieldName}" class="ff-label {!IF(Field.isReference,'grayLabel','')}">{!Field.fieldLabel}</label><input type="hidden" value="{!Field.isRequired}"  id="isDefaultRequired{!Field.fieldName}"/><input type="hidden" class="{!IF(Field.isReference,'defReq','')}" value="{!Field.isRequired}" id="isUserSelectedRequired{!Field.fieldName}"/><input type="hidden" value="" id="errMsgForRequired{!Field.fieldName}"/><input type="hidden" value="" id="defaultValue{!Field.fieldName}"/><input type="hidden" value="{!Field.isReference}" id="hideField{!Field.fieldName}"/><input type="hidden"  id="isReadOnly{!Field.fieldName}" value="false"/><input type="hidden" value="{!Field.isReference == null}" id="upsertField{!Field.fieldName}"/></div><div style="DISPLAY: none;" class="fieldDiv" id="divField{!Field.fieldId}"><apex:outputtext value="{!Field.htmlField}" /></div></li>
                                                                                                </apex:repeat>
                                                                                        </ul>
                                                                                </div>
                                                                                </div>
                                                                                
                                                                                </apex:outputPanel>
                                                                                <div style="clear:both"></div>
                                                                                <apex:variable value="{!relObjIndx + 1}" var="relObjIndx" />
                                                                                
</apex:repeat>                                          
</apex:outputPanel>
                                                                         </apex:outputPanel>
                                                                            
                                                                 </div> 
                                                                 
                                                                 
                                                                        
                                                                 
                                                                
                                                         
                                                     
                                                        <div id="generalFieldBox"   class="genlist-toggle-div-wrap">
                                                                <div id="generalFields" class="generalFields"   onclick="toggleGenFieldsSection();">                      <span class="obj-back-btn" ></span><span class="obj-tab-number" >G</span>      
                                                                         <div class="objName" style="float:left">

                                                                         General Fields
                                                                         </div>
                                                                         <div style="float:right;padding-top: 3px;" >
                                                                                  <span class="togHover gnFldImg" ></span>
                                                                         </div>
                                                                         
                                                                </div> 
                                                                                                                                                                                                         
                                                                 <div style="height:220px;display:none;" id="divForGenFields" >
                                                                            <apex:outputPanel id="pnlForGeneralFieldsRepeat" >                                  
                                                                                 <ul id="generalSortableForFields" class="dropfields" style="">
                                                                                         <li title="Text" class="tooltip fieldLi ui-state-default"  id="lblliGENERALTEXT" isRequired="false">
                                                                                                 <div style="DISPLAY: block; float:left;" id="divLabelGENERALTEXT" lblName="Text" > 
                                                                                                         <label   VATT="STRING" id="lblGENERALTEXT" class="ff-label ff-general-text-label">Text</label>
                                                                                                         <input type="hidden" value="false"  id="isDefaultRequiredGENERALTEXT"/>
                                                                                                         <input type="hidden" class="" value="false" id="isUserSelectedRequiredGENERALTEXT"/>
                                                                                                         <input type="hidden" value="" id="errMsgForRequiredGENERALTEXT"/>
                                                                                                         <input type="hidden" value="" id="defaultValueGENERALTEXT"/>
                                                                                                         <input type="hidden" value="false" id="hideFieldGENERALTEXT"/>
                                                                                                 </div>
                                                                                                 <div style="visibility:hidden;DISPLAY: none;" class="fieldDiv" id="divFieldGENERALTEXT">
                                                                                                                    <input type="textbox" id="GENERALTEXT" name="GENERALTEXT" vatt="STRING" data-formatmessage="" data-maxlength="100" data-maxlengthmessage="Maximum 100 characters" maxlength="100" />
                                                                                                 </div>
                                                                                                 
                                                                                         </li>                                             
                                                                                         <li title="Captcha" class="tooltip fieldLi ui-state-default"  id="lblliCAPTCHA" isRequired="true">
                                                                                                 <div style="DISPLAY: block; float:left;" id="divLabelCAPTCHA" lblName="CAPTCHA Text" > 
                                                                                                         <label   VATT="CAPTCHA" id="lblCAPTCHA" class="ff-label ff-captcha-label">Captcha</label>
                                                                                                         <input type="hidden" value="true"  id="isDefaultRequiredCAPTCHA"/>
                                                                                                         <input type="hidden" class="" value="true" id="isUserSelectedRequiredCAPTCHA"/>
                                                                                                         <input type="hidden" value="" id="errMsgForRequiredCAPTCHA"/>
                                                                                                         <input type="hidden" value="" id="defaultValueCAPTCHA"/>
                                                                                                         <input type="hidden" value="false" id="hideFieldCAPTCHA"/>
                                                                                                 </div>                                                 
                                                                                                 <div style="DISPLAY: none;" class="fieldDiv" id="divFieldCAPTCHA">
                                                                                                         <img src="https://fastforms.visualantidote.com/Images/captcha.png" /><br/>
                                                                                                         <input type="textbox" id="CAPTCHAINPUT" name="CAPTCHAINPUT" vatt="CAPTCHA" data-formatmessage="" data-maxlength="50" data-maxlengthmessage="Maximum 50 characters" maxlength="50" />
                                                                                                         <div id="Captcha" name="Captcha" data-isrequired="true" data-requiredmessage="Please enter the text shown in the image above"></div>
                                                                                                 </div>
                                                                                         </li>
                                                                                         
                                                                                         <li title="File Upload" class="tooltip fieldLi ui-state-default"  id="lblliUPLOAD" isRequired="false">
                                                                                                 <div style="DISPLAY: block; float:left;" id="divLabelUPLOAD" lblName="File Text" > 
                                                                                                         <label   VATT="STRING" id="lblUPLOAD" class="ff-label ff-fileupload-label">File Upload</label>
                                                                                                         <input type="hidden" value="false"  id="isDefaultRequiredUPLOAD"/>
                                                                                                         <input type="hidden" class="" value="true" id="isUserSelectedRequiredUPLOAD"/>
                                                                                                         <input type="hidden" value="" id="errMsgForRequiredUPLOAD"/>
                                                                                                         <input type="hidden" value="" id="defaultValueUPLOAD"/>
                                                                                                         <input type="hidden" value="false" id="hideFieldUPLOAD"/>
                                                                                                         <apex:outputPanel styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                                                                                                          <span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>File Uploads are only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span>

                                                                                                         </apex:outputPanel>
                                                                                                         
                                                                                                 </div>
                                                                                                 <div style="DISPLAY: none;" class="fieldDiv" id="divFieldUPLOAD">
                                                                                                         <div id="FileUploadAreaXX" name="FileUploadArea" vatt="FILEUPLOAD" class="ff-fileupload-drop-area" data-maxfiles="3" data-isrequired="false" data-requiredmessage="required" data-allowedfiletypes="" data-uploadtochatter="false">
                                                                                                                        <label id="FileUpload01_Select" for="FileUploadXX" class="ff-fileupload-select">Add File...</label>
                                                                                                                        <input type="file" name="FileUpload01" id="FileUpload01" style="filter:alpha(opacity: 0);position: absolute;top: 0;left: -99999px;"/>
                                                                                                            </div>
                                                                                                                
                                                                                                         
                                                                                                 </div>
                                                                                         </li>
                                                                            <li title="Image" class="tooltip fieldLi ui-state-default"  id="lblliIMAGE" isRequired="false" >
                                                                                                 <div style="DISPLAY: block;" id="divLabelIMAGE" lblName="Image" > 
                                                                                                         <label   VATT="STRING" id="lblIMAGE" class="ff-label ff-image-label">Image</label>
                                                                                                         <input type="hidden" value="false"  id="isDefaultRequiredIMAGE"/>
                                                                                                         <input type="hidden" class="" value="false" id="isUserSelectedRequiredIMAGE"/>
                                                                                                         <input type="hidden" value="" id="errMsgForRequiredIMAGE"/>
                                                                                                         <input type="hidden" value="" id="defaultValueIMAGE"/>
                                                                                                         <input type="hidden" value="false" id="hideFieldIMAGE"/>
                                                                                                         
                                                                                                         <div class="imageGeneralFieldDiv" style="DISPLAY: none;" id="divFieldIMAGE">
                                                                                                             <div class="ffse-propname ffse-pc-inline  ffse-file-upload-container-editor">
                                                                                                                    <div class="ffse-img-input-container-editor" style="text-align:center;">
                                                                                                                    <div class="ffse-img-input-wrapper-editor">
                                                                                                                    <span class="img-upload-button-wrap" >Upload</span>
                                                                                                                    <input type="file" class="fileUpload-control" onchange="uploadFiles(this,'');" />
                                                                                                                    </div>
                                                                                                                    <div class="ffse-img-fileextension-dec-editor"> Format gif, png or jpg. Maximum size 600kb.</div>
                                                                                                                    </div>
                                                                                                                    <div   class="ffse-img-upload-error" style="display:none;"></div>
                                                                                                                    <div   class="ffse-img-upload-placeholder-editor"  style="display:none;"></div>
                                                                                                                </div>                                                   
                                                                                                         </div>                                                     
                                                                                                 </div>

                                                                                                 
                                                                                         </li> 
                                                                                                <li title="Payment" class="tooltip fieldLi ui-state-default"    id="lblliPAYPALPAYMENT" isRequired="false" >
                                                                                                 <div class="payment-overlay-wrapper">
                                                                                                        </div>
                                                                                                    
                                                                                                            <div class="payment-overlay-box">
                                                                                                        
                                                                                                        <div class="vff-alert mb50 m0-150 alert-payment-setup" style="display:none"  >
                                                                                                                <div class="vff-alert-msg  msg-text-div" style="display:inline-block" >Set up your payment settings to enable</div>
                                                                                                                <span> <a   class="vabutton1 ml20" onclick="setupPaymentField(this);return false;">Set Up</a></span>
                                                                                                        </div>
                                                                                                            
                                                                                                            </div>
                                                                                                 <div  class="field-div-payment" data-paymentrequired="false"  data-paymentfield-record-id="" id="divLabelPAYPALPAYMENT" lblName="PAYPALPAYMENT">
                                                                                                      <div class="field-div-payment-inner">
                                                                                                         <div class="paypal-item-header">
                                                                                                         <label     class="ff-PayPalFake-label">Payment</label>
                                                                                                         <apex:outputPanel styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                                                                                                         
                                                                                                         <span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>Payment fields are only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span>

                                                                                                         </apex:outputPanel>
                                                                                                         </div>
                                                                                                            <div class="paypal-item-row pp-amount  pp-default-show" style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label  data-label-prop="Label_Amount__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalAmount" class="ff-label ff-amount-label">Amount</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalAmount"> 
                                                                                                                            <span class="ff-currency">$</span>
                                                                                                                            <label   class="ff-input-label ff-label ff-amount"  id="PayPalAmount" name="PayPalAmount"  data-pp-name="PayPalAmount" vatt="CURRENCY(18,2)"   >0.00</label>
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                            
                                                                                                            
                                                                                                            <div class="paypal-item-row pp-shipping  pp-default-hide" style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label data-label-prop="Label_Shipping__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalShipping" class="ff-label ff-currency-label">Shipping</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalShipping"> 
                                                                                                                            <span class="ff-currency">$</span>
                                                                                                                            <label class="ff-input-label ff-label ff-shipping"  id="PayPalShipping" name="PayPalShipping" data-pp-name="PayPalShipping"  vatt="CURRENCY(18,2)"    >0.00</label>
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                            <div class="paypal-item-row pp-taxes pp-default-hide" style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label  data-label-prop="Label_Taxes__c" ondblclick="editPaymentFFLabel(this);"  id="lblPayPalTaxes" class="ff-label ff-currency-label">Taxes</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalTaxes"> 
                                                                                                                            <span class="ff-currency">$</span>
                                                                                                                            <label class="ff-input-label ff-label ff-taxes"  id="PayPalTaxes" name="PayPalTaxes"  data-pp-name="PayPalTaxes" vatt="CURRENCY(18,2)"    >0.00</label> 
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                            <div class="paypal-item-row pp-default-show" style="display: none;">
                                                                                                                <span class="ff-line-seperator"></span>
                                                                                                            </div>
                                                                                                            <div class="paypal-item-row pp-stamount pp-default-hide" style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label  data-label-prop="Label_Sub_Total_Amount__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalSubTotalAmount" class="ff-label ff-currency-label">Subtotal</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalSubTotalAmount"> 
                                                                                                                    <span class="ff-currency">$</span>
                                                                                                                            <label class="ff-input-label ff-label ff-stamount"  id="PayPalSubTotalAmount" name="PayPalSubTotalAmount"  data-pp-name="PayPalSubTotalAmount" vatt="CURRENCY(18,2)"    >0.00</label>
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                            
                                                                                                            <div class="paypal-item-row pp-recurringfee pp-default-hide" style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label  data-label-prop="Label_Recurring_Fee__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalRecurringFee" class="ff-label ff-currency-label">Initial Fee</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalRecurringFee"> 
                                                                                                                    <span class="ff-currency">$</span>
                                                                                                                            <label class="ff-input-label ff-label ff-recurringfee"  id="PayPalRecurringFee" name="PayPalRecurringFee"  data-pp-name="PayPalRecurringFee" vatt="CURRENCY(18,2)"    >0.00</label>
                                                                                                                    </div>
                                                                                                            </div>

                                                                                                            <div class="paypal-item-row pp-default-hide" style="display: none;">
                                                                                                                <span class="ff-line-seperator"></span>
                                                                                                            </div>
                                                                                                            <div class="paypal-item-row pp-tamount pp-default-hide" style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label  data-label-prop="Label_Total_Amount__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalTotalAmount" class="ff-label ff-currency-label">Total</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalTotalAmount"> 
                                                                                                                    <span class="ff-currency">$</span>
                                                                                                                            <label class="ff-input-label ff-label ff-tamount"  id="PayPalTotalAmount" name="PayPalTotalAmount"  data-pp-name="PayPalTotalAmount" vatt="CURRENCY(18,2)"    >0.00</label>
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                        <div class="paypal-item-row pp-default-hide" style="display: none;">
                                                                                                                <span class="ff-line-seperator"></span>
                                                                                                            </div>

                                                                                                        
                                                                                                        <div class="paypal-item-row pp-creditcard"  style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label  data-label-prop="Label_Credit_Card__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalCreditCard" class="ff-label ff-PayPalCreditCard-label">Credit Card</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalCreditCard">
                                                                                                                            <input class="ff-input-type ff-type-text ff-creditcard" type="textbox" id="PayPalCreditCard" name="PayPalCreditCard" data-pp-name="PayPalCreditCard"  vatt="DOUBLE(19,0)" data-formatmessage="Please enter a valid Credit Card number" data-maxlength="19" data-maxlengthmessage="Maximum 19 characters" maxlength="19" data-requiredmessage="required" data-isrequired="true"/>
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                        <div class="paypal-item-row pp-cvv"  style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label data-label-prop="Label_CVV__c"  ondblclick="editPaymentFFLabel(this);" id="lblPayPalCVV" class="ff-label ff-PayPalCVV-label">CVV</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalCVV">
                                                                                                                            <input class="ff-input-type ff-type-text ff-cvv" type="textbox" id="PayPalCVV" name="PayPalCVV" data-pp-name="PayPalCVV" vatt="DOUBLE(4,0)" data-formatmessage="Please enter a valid CVV value" data-maxlength="4" data-maxlengthmessage="Maximum 4 characters" maxlength="4" data-requiredmessage="required" data-isrequired="true" style="width:60px;"/>
                                                                                                                    </div>
                                                                                                            </div>
                                                                                                        <div class="paypal-item-row pp-expiry"  style="display: none;">
                                                                                                                    <div class="PPGeneralLabelDiv">
                                                                                                                    <label data-label-prop="Label_Expiry__c" ondblclick="editPaymentFFLabel(this);" id="lblPayPalExpiry" class="ff-label ff-PayPalExpiry-label">Expiry</label>
                                                                                                                    </div>
                                                                                                                    <div class="PPGeneralFieldDiv"   id="divFieldPayPalExpiry">
                                                                                                                     
                                                                                                                <select class="ff-select-type ff-singlepicklist ff-mm" id="PayPalExpiryMM" name="PayPalExpiryMM" data-pp-name="PayPalExpiryMM" vatt="PICKLIST" data-requiredmessage="required" data-isrequired="true" data-flexcontrol="picklist-default"><option value="">--MM--</option> </select>

                                                                                                                <select class="ff-select-type ff-singlepicklist ff-yyyy" id="PayPalExpiryYYYY" name="PayPalExpiryYYYY" data-pp-name="PayPalExpiryYYYY" vatt="PICKLIST" data-requiredmessage="required"  data-isrequired="true" data-flexcontrol="picklist-default"><option value="">--YYYY--</option> </select>


                                                                                                                    </div>
                                                                                                            </div>

                                                                                                         </div>
                                                                                                    </div>
                                                                                                 

                                                                                                 
                                                                                         </li>  
                                        
                                                                                </ul>  
                                                                         </apex:outputPanel>
                                                                            
                                                                 </div> 
                                                                 
                                                                
                                                        </div> 
                                                        </div> <!-- end of fields list box-->

                                                        </div> 

                                                 </div>
                                        </div>                     
                                        <div class="tab-pane sfff-rule-editor-content" id="sfff-rule-editor" style="display:none">
                                                <div class="main-content-holder sfff-rule-editor-body">
                                                <apex:actionStatus id="statusLoad">
            <apex:facet name="start">
             
                <div class="load-status-small"  style="margin:50px auto;" >
                
                <div class="dialogSmall"></div>
             <div class="primary"  >Loading, please wait... </div>

                
                </div>
         </apex:facet>
</apex:actionStatus>
                                                        <apex:outputText rendered="{!packageTier == 'Base'}">
                                                                <div style="padding:80px; text-align:center;color:#052942">
                                                                <h3>Conditional Rules are only available in Professional or Enterprise editions of Fast Forms.</h3>
                                                                <br />
                                                                <br />
                                                                <div class="sfff-action-buttons"> <a class="vabutton1" href="http://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a>
                                                                </div>
                                                                </div>
                                                        </apex:outputText>
                                                    <div class="ruleEditorWrapperCSS">
                                                        <apex:outputPanel id="ruleEditorWrapper" layout="block"   rendered="{! packageTier != 'Base'}">
                                                             <apex:outputPanel layout="block" rendered="{!loadRuleEditor}">
                                                             
                                                             <apex:dynamicComponent componentValue="{!DynamicRuleEditorComponent}" />
                                                             
                                                             </apex:outputPanel>
                                                        </apex:outputPanel>
                                                        </div>
                                                </div>
                                        </div>

                                        <div class="tab-pane sfff-style-editor-content" id="sfff-style-editor" style="display:none">
                                                <div class="main-content-holder sfff-style-editor-body">
                                                <apex:actionStatus id="stylestatusLoad">
                                                            <apex:facet name="start">
                                                             
                                                                <div class="load-status-small"  style="margin:50px auto;" >
                                                                
                                                                <div class="dialogSmall"></div>
                                                             <div class="primary"  >Loading, please wait... </div>

                                                                
                                                                </div>
                                                         </apex:facet>
                                                </apex:actionStatus>
                                                         
                                                    <div class="styleEditorWrapperCSS">
                                                        <apex:outputPanel id="styleEditorWrapper" layout="block"    >
                                                             <apex:outputPanel layout="block" rendered="{!loadStyleEditor}">
                                                             
                                                             <apex:dynamicComponent componentValue="{!DynamicStyleEditorComponent}" />
                                                             
                                                             </apex:outputPanel>
                                                        </apex:outputPanel>
                                                        </div>
                                                </div>
                                        </div>
                                </div>
             
                         </div>
            </apex:outputpanel>                 
         <apex:outputPanel id="tempSelectRelatedList"  styleClass="tempSelectRelatedListCSS" layout="block"  style="display:none; " >
         <apex:selectList styleclass="dropTemp select-secondary-element"         value="{!selectedRelatedFieldName}" multiselect="false" size="1">
                                                                                                    <apex:selectOptions value="{!fieldRelatedList}"></apex:selectOptions> 
                                                                         </apex:selectList>
            </apex:outputpanel> 
            <div id="previewDiv" style="display:none;">
            </div>
 <div id="paymentComponentTemp" class="paypal-component" style="display: none;">
 <apex:outputPanel layout="block" rendered="true">
 <apex:dynamicComponent componentValue="{!DynamicFormPaymentComponent}" />
 </apex:outputPanel> 
 </div>
 <div id="DocSignHTMLTemp" class="doc-sign-block" style="display:none">
  <div id="ESIGNATURE123" class="main-docsign-wrapper">
 <div   class="ff-sign-div">
 <div class="ffclearButton" style="display:none"><a onclick="clearDrawnElements(this); return false;" >Clear</a></div>
     <ul class="ff-sign-ul">
        <li class="fftypeIt"><a onclick="switchSignTab(this);return false;" class="current" data-signed="typed">Typed</a></li>
        <li class="ffdrawIt"><a onclick="switchSignTab(this);return false;"  data-signed="drawn">Drawn</a></li>
         
      </ul>
     
    </div>
    <div class="ff-signwrapper-outer">
    <div class="ff-chkagree"><input type="checkbox"   id="chkAgree" /><label for="chkAgree">I agree to terms and services.</label></div>
     <div class="ff-signwrapper ff-typed">
    <div class="doc-sign-name ff-sign-block">
       
      
      <div class="ffsign-label">
    <label for="ffsignature">Signature</label>
    </div>
      <div class="docsignWrapper">
    
        <input type="text" name="ffsignature" id="ffsignature" class="ffsignature ff-type-text"/>
        <div class="typedSignName"></div>
    
        <canvas class="signPadName" width="232" height="55" ></canvas>
        <input type="hidden" name="outputSignedName" class="outputSignedName"/>
     
      </div>
    
    </div>
   <div class="doc-sign-date ff-sign-block">
    <div class="ffsign-label">
   <label for="ffdate">Date</label>
    </div>
  <div class="docsignWrapper">
    
        <input type="text"  name="ffdate" id="ffdate" class="ffdate ff-type-text"/>
        <div class="typedSignDate"></div>
    
        <canvas class="signPadDate" width="232" height="55" ></canvas>
        <input type="hidden" name="outputSignedDate" class="outputSignedDate"/>
     
      </div>
     </div>
       </div>
     <div class="ff-signwrapper ff-drawn display-none">
        <div class="doc-sign-name ff-sign-block">
       
       <div class="ffsign-label">
    <label for="ffsignature">Signature</label>
    </div>
      
      <div class="docsignWrapper">
     
    
        <canvas class="signPadName"  width="232" height="55" ></canvas>
        <input type="hidden" name="outputSignedName" class="outputSignedName"/>
     
      </div>
    
    </div>
   <div class="doc-sign-date ff-sign-block">
    <div class="ffsign-label">
     <label for="ffdate">Date</label>
    </div>
  <div class="docsignWrapper">
   
         
    
        <canvas class="signPadDate" width="232" height="55" ></canvas>
        <input type="hidden" name="outputSignedDate" class="outputSignedDate"/>
     
      </div>
     </div>
     </div>
     
    </div>  
    
</div>
 </div>
                <div id="relatedSelObjWrapperTEMP" style="display:none">
                           <div        class="secondary-object-block" >
                        <div class="scroll-parent" >
                        <select data-selected="" data-rel-index="0"  class="select-secondary-element select-related-" onchange="OnChangeRelatedObject(this,false);"  > 

                        </select>
                         </div>
                         <div class="delete-object-box">
                          <a class="fffe-actions rel-object-delete"  onclick="deleteRelObject(this);return false;"></a> 
                           </div>
                           </div> 
                </div>            
            <div id="labelDiv" style="display:none;">
            </div>
            <div id="jsLoading" style="display:none;">
            <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Finalizing setup...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                                    </div>
            <div id="lblPaymentTEMP" style="display:none;">
            </div>
            <div id="tempBlockQuotesHide" style="display:none;"/>
            <div id="tempLabelFieldDiv" style="display:none;">
            </div>
            <div id="tempDialogHtml" style="display:none;">
            </div>
            <div id="tempBtnDialogHtml" style="display:none;">
            </div>
            <!---Confirm Dialog for close form without save---->
            <div id="dialog-confirm" class="content"></div>
            
            <!---Dialog for error---->
            <div id="dialog-error"></div>      
            
        </apex:outputPanel>
         
        <apex:outputPanel id="hidePopupPanel">
                <input type="hidden" value="{!hidePopup}" id="hidePopup"/>
        </apex:outputPanel>
        <a href="#" class="go-top"><img src="{!URLFOR($Resource.iconImages,'backtotop.png')}"/></a>
        <apex:outputPanel id="valRender">
                <script>        
                        <apex:repeat value="{!lookupFieldMap}" var="child">
                                mapLookup["{!child}"]="{!lookupFieldMap[child]}";
                        </apex:repeat>
                </script>
        </apex:outputPanel>
<div class="intercomHelpIcon" title="Questions? We're here to help!" alt="Questions? We're here to help!"><div class="intercomHelpIconText"><a id="Intercom" href="mailto:uh2s363g@incoming.intercom.io" class="intercomHelpIconLink">?</a></div><div class="intercomHelpIconClose" onclick="hideHelpIcon();">x</div></div>

 </apex:form>
</apex:page>