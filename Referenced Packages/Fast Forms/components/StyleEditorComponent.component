<apex:component controller="VisualAntidote.StyleEditorComponentController" allowDML="true">
  
<style>

.sfff-theme-editor-panel.silver-label input,
.sfff-theme-editor-panel.silver-label textarea,
.sfff-theme-editor-panel.silver-label select,
.sfff-theme-editor-panel.silver-label div.select2-container,
.sfff-theme-editor-panel.silver-label .ffse-propname label,
.sfff-theme-editor-panel.silver-label .ffse-propvalue-box,
.sfff-theme-editor-panel.silver-label .vabutton4,
.sfff-theme-editor-panel.silver-label .vabutton4:hover 
{
  color:#777575 !important;
   pointer-events: none;
}
.sfff-theme-editor-panel.silver-label input[type="file"],
.sfff-theme-editor-panel.silver-label textarea,
.sfff-theme-editor-panel.silver-label select,
.sfff-theme-editor-panel.silver-label div.select2-container .select2-choice ,
.sfff-theme-editor-panel.silver-label div.select2-container .select2-choice > .select2-chosen,
.sfff-theme-editor-panel.silver-label div.select2-container .select2-choice .select2-arrow, 
.sfff-theme-editor-panel.silver-label .ffse-propvalue-box .rangeslider__handle,
.sfff-theme-editor-panel.silver-label .vabutton4,
.sfff-theme-editor-panel.silver-label .vabutton4:hover 
{
background-color: #F5F5F5 !important;
}
 .sfff-theme-editor-panel.silver-label .img-upload-button-wrap,
 .sfff-theme-editor-panel.silver-label .vabutton4,
.sfff-theme-editor-panel.silver-label .vabutton4:hover{
border-color: #9C9C9C !important;
color: #9C9C9C !important;
 }
</style>

<div style="display:none">

<div id="customTilePreview">
<div class="tile-preview-box" style=""><span class="tile-preview-section" style=""><span class="tile-preview-section-label" style="width: 100%;display:block">Custom</span> </span> </div>
</div>
<div id="tempTemplateTile" class="template-tile">
               <li class="tile-li">
                    
                     
                    <div class="rectangular-tile-outer handCursor">
                <div class="rectangular-tile"  data-theme-id="" onclick="templateClick(this)">
                  

                </div>
                </div>
                    <span class="template-name"></span>
                    <span class="template-tile-delete delete-icon" onclick="deleteTheme(this);return false;" data-theme-type=""
                      data-theme-name="" data-theme-id=""></span>

                </li>
</div>
</div>

<apex:actionFunction name="rerenderStyleEditor"    immediate="true" action="{!resetStyleSetting}" reRender="pnlForMainStyleRepeater" status="statusLoad"  oncomplete="showMainStyleRepeater(true);getFormStyleList();"/>
 
 <apex:actionFunction name="formStyleListCall"    immediate="true" action="{!resetFormStyleList}" reRender="pnlForTemplateListWrapper" status="statusLoad"  oncomplete="resetRecentTilePreview();getFormHTML();" />
 
 <apex:actionFunction name="refreshformStyleList"    immediate="true" action="{!resetFormStyleList}" reRender="pnlForRecentTemplate" status="statusLoad"   oncomplete="resetRecentTilePreview();" />
 <apex:actionFunction immediate="true" name="autoSaveStyle" action="{!autosaveStyle}" reRender="msgPanel,pnlForRecentTemplate" status="draftChangesStatus" oncomplete="resetRecentTilePreview();draftchanges(false);"  >
             <apex:param name="themeid" value=""/>
             <apex:param name="themedata" value=""/>
             <apex:param name="iscsstext" value=""/>

             <apex:param name="isdefault" value=""/>
      </apex:actionFunction> 
 <apex:outputPanel id="pnlForMainStyleRepeater"  styleClass="pnlForMainStyleRepeaterCSS"    layout="block"  > 
 <div class="display-table">


<div class="sfff-style-editor-form-panel display-cell">
<div class="sfff-style-editor-header"><h3>Preview</h3><a onclick="changeLayout(this); return false;" class="change-layout mobile-icon handCursor blue-tooltip">
  <span class="blue-tooltip-text -ml20">Mobile View</span>
</a></div>

<div class="style-preview-wrapper">

<div id="stylePreviewDivLoading" style="display:none" class="ff-preview-container">
<div class="load-status-small"  style="margin:50px auto;" >
        
        <div class="dialogSmall"></div>
       <div class="primary"  >Loading preview mode... </div>

        
        </div>
</div>
<!-- main preview pane div -->
<div id="stylePreviewDiv"  style="display:none"  class="ff-preview-container">
</div>
<div id="stylePreviewMobileDiv"  style="display:none"  class="mobile-preview-container">
</div>

</div>
</div>

<div class="sfff-theme-editor-panel display-cell {!if(isFreemium,'silver-label','')}" style="height:800px">

<!--  div block for Template list-->
<div class="sfff-theme-selector-wrapper">
<div class="sfff-style-header ">
<h3 class="block-header">Choose a Template</h3>

</div>

    <apex:outputPanel id="pnlForTemplateListWrapper"  styleClass="sfff-template-list-wrapper"    layout="block"  > 
     <apex:actionStatus id="themeStatusLoad">
      <apex:facet name="start">
       
        <div class="load-status-small"  style="margin:50px auto;" >
        
        <div class="dialogSmall"></div>
       <div class="primary"  >Loading themes... </div>

        
        </div>
     </apex:facet>
    </apex:actionStatus> 
    <apex:outputPanel id="pnlForRecentTemplate"  styleClass="sfff-template-list"    layout="block"  > 
    <ul class="recent-theme-list-ul sfff-theme-list">
          <apex:repeat value="{!formStyleList}"  var="formStyle">
                <li class="tile-li" title="{!formStyle.name}">
                    
                     
                    <div class="rectangular-tile-outer handCursor">
                <div class="rectangular-tile"  data-theme-id="{!formStyle.id}" onclick="templateClick(this)">
                    
                    <apex:outputText value="{!formStyle.VisualAntidote__Tile_Preview_html__c}" escape="false"/>
                </div>
                </div>
                   

                </li>
            </apex:repeat>
        </ul>
        </apex:outputPanel>
        <div class="sfff-expand-template-trigger-block" >
        <a class="expand-templates-trigger" onclick="expandTemplateList(this,true);return false;"></a>
        </div>
        
    </apex:outputPanel>
    <div class="sfff-expand-template-list" style="display:none;">
          <div class="available-themes-main-wrapper">
           
        </div>
        </div>
</div>
<!--  div block for Template list ends-->

<!--  div block for form style settings-->
<div class="sfff-style-setting-wrapper">
<div class="sfff-style-header">
<h3 class="block-header">Customize</h3>
<a class="style-editcss-link handCursor" data-iscsscustom='{!IsCSSCustom}' onclick="editCustomCss(this); return false;">Edit CSS</a>
</div>
<!-- accordion form style setting inner html starts -->

    <div class="sfff-style-settings panel-group sfff-theme-accordion" id="sfff-style-accordion">
      
      <div class="">
        <div class="panel-default">
            <div class="panel-heading" onmouseover="return toggleElementHighlight('form',true);" onmouseout="return toggleElementHighlight('form',false);" onclick="accordionToggle(this);return false;"  >
                <div class="panel-title">
                <span class="obj-back-btn" ></span>
                <span class="acc-tab-number">1</span>
                <h3 class="ffstyle-tab-name">Form</h3>
                    <a  class="style-acc-trigger"  href="javascript:void(0);"   data-parent="#sfff-style-accordion" data-target="#sfff-style-formsettings"></a>
                </div>
            </div>
            <div id="sfff-style-formsettings" class="panel-collapse collapse">
                <div class="panel-body">
                   
                   <div class="ffse-setting-card-container">
                    <!-- setting card container starts -->
                   <div class="ffse-setting-card">
                           <div class="ffse-SC-header">
                           <h4>Page</h4>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline ">
                                   <input data-ffstyle-selector=".ff-form" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-even">
                               <span class="ffse-propertyname">Background Image</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline  ffse-file-upload-container">
                                      <div class="ffse-img-input-container">
                                      <div class="ffse-img-input-wrapper">
                                      <span class="img-upload-button-wrap" >Upload</span>
                                      <input type="file" class="ffse-fileUpload-control" data-ffstyle-selector=".ff-form"   data-ffstyle-prop="background-image"  onchange="uploadFiles(this,'StyleEditor');" />
                                      </div>
                                      <div class="ffse-img-fileextension-dec"> Format gif, png or jpg. Maximum size 600kb.</div>
                                      </div>
                                      <div  class="ffse-img-uploading"  style="display:none;"><span class="ffse-uploading-img"></span></div>
                                      <div   class="ffse-img-uploaded" style="display:none;"><span class="ffse-uploaded-img"></span></div>
                                      <div   class="ffse-img-upload-error" style="display:none;"></div>
                                      <div   class="ffse-img-upload-placeholder"  style="display:none;"></div>
                                    </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                                
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-form-background">
                                        <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-form" data-ffstyle-prop="background-attachment;background-repeat"  id="chkffseformbackfixed"  name="form-background-alignment" value="fixed;no-repeat" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffseformbackfixed"><span class="se-align-text">Fixed</span></label>
                                        </li><li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-form" data-ffstyle-prop="background-repeat"   id="chkffseformbackrepeat"  name="form-background-alignment" value="repeat" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffseformbackrepeat"><span class="se-align-text">Repeat</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-form" data-ffstyle-prop="background-size;background-repeat"   id="chkffseformbackcover"  name="form-background-alignment" value="cover;no-repeat" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffseformbackcover"><span class="se-align-text">Cover</span></label></li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>
                    </div>
                       <!-- setting card container ends -->
                     <!-- setting card container starts -->
                    <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Logo</h4>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline ">
                                   <input data-ffstyle-selector=".ff-logo" type="text" data-ffstyle-prop="background-color"   class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-even">
                               <span class="ffse-propertyname">Background Image</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline  ffse-file-upload-container">
                                      <div class="ffse-img-input-container">
                                      <div class="ffse-img-input-wrapper">
                                      <span class="img-upload-button-wrap" >Upload</span>
                                      <input data-ffstyle-selector=".ff-logo"   data-ffstyle-prop="background-image"  type="file" class="ffse-fileUpload-control" onchange="uploadFiles(this,'StyleEditor');" />
                                      </div>
                                      <div class="ffse-img-fileextension-dec"> Format gif, png or jpg. Maximum size 600kb.</div>
                                      </div>
                                      <div  class="ffse-img-uploading"  style="display:none;"><span class="ffse-uploading-img"></span></div>
                                      <div   class="ffse-img-uploaded" style="display:none;"><span class="ffse-uploaded-img"></span></div>
                                      <div   class="ffse-img-upload-error" style="display:none;"></div>
                                      <div   class="ffse-img-upload-placeholder"  style="display:none;"></div>
                                      <input  type="text" class="ffse-img-hidden ffse-img-width" style="display:none;" data-ffstyle-selector=".ff-logo"   data-ffstyle-prop="width" />
                                      <input  type="text" class="ffse-img-hidden ffse-img-height" style="display:none;" data-ffstyle-selector=".ff-logo"   data-ffstyle-prop="height" />
                                      <input  type="text" class="ffse-img-hidden ffse-img-background" style="display:none;" data-ffstyle-selector=".ff-logo"   data-ffstyle-prop="background-position;background-repeat"
                                      value="center;no-repeat" />
                                       
                                    </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                                
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-logo-background">
                                        <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-logo" data-ffstyle-prop="float"  id="chkffselogofloatleft"  name="logo-div-alignment" value="left" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffselogofloatleft"><span class="se-align-text">Left</span></label>
                                        </li><li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-logo" data-ffstyle-prop="margin"   id="chkffselogofloatcenter"  name="logo-div-alignment" value="auto" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffselogofloatcenter"><span class="se-align-text">Center</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-logo" data-ffstyle-prop="float"   id="chkffselogofloatright"  name="logo-div-alignment" value="right" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffselogofloatright"><span class="se-align-text">Right</span></label></li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>
                           
                          <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-logo"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider"  data-slider-default="1"   min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                      </div>
                       <!-- setting card container ends -->
                       <!-- setting card container starts -->
                    <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Header</h4>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline ">
                                   <input data-ffstyle-selector=".ff-header" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-even">
                               <span class="ffse-propertyname">Background Image</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline  ffse-file-upload-container">
                                      <div class="ffse-img-input-container">
                                      <div class="ffse-img-input-wrapper">
                                      <span class="img-upload-button-wrap" >Upload</span>
                                      <input data-ffstyle-selector=".ff-header"   data-ffstyle-prop="background-image"  type="file" class="ffse-fileUpload-control" onchange="uploadFiles(this,'StyleEditor');" />

                                      </div>
                                      <div class="ffse-img-fileextension-dec"> Format gif, png or jpg. Maximum size 600kb.</div>
                                      </div>
                                      <div  class="ffse-img-uploading"  style="display:none;"><span class="ffse-uploading-img"></span></div>
                                      <div   class="ffse-img-uploaded" style="display:none;"><span class="ffse-uploaded-img"></span></div>
                                      <div   class="ffse-img-upload-error" style="display:none;"></div>
                                      <div   class="ffse-img-upload-placeholder"  style="display:none;"></div>
                                    </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                                
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-header-background">
                                        <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-header" data-ffstyle-prop="background-attachment;background-repeat"  id="chkffseheaderbackfixed"  name="header-background-alignment" value="fixed;no-repeat" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffseheaderbackfixed"><span class="se-align-text">Fixed</span></label>
                                        </li><li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-header" data-ffstyle-prop="background-repeat"   id="chkffseheaderbackrepeat"  name="header-background-alignment" value="repeat" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffseheaderbackrepeat"><span class="se-align-text">Repeat</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-header" data-ffstyle-prop="background-size;background-repeat"   id="chkffseheaderbackcover"  name="header-background-alignment" value="cover;no-repeat" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffseheaderbackcover"><span class="se-align-text">Cover</span></label></li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>
                          <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-header"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider"   min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                      </div>
                       <!-- setting card container ends -->
                       <!-- setting card container starts -->
                       <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Form</h4>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline "><input data-ffstyle-selector=".ff-form-main" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Alignment</span>
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-form-margin">
                                       <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="margin"   id="chkffseformmarginleft"  name="form-alignment" value="auto auto auto 0px" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffseformmarginleft"><span class="se-align-text">Left</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="margin"   id="chkffseformmargincenter"  name="form-alignment" value="auto" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffseformmargincenter"><span class="se-align-text">Center</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="margin"  id="chkffseformmarginright"  name="form-alignment" value="auto 0px auto auto" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffseformmarginright"><span class="se-align-text">Right</span></label>
                                        </li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Max Width</span>
                               <div class="ffse-propvalue-box">
                                    <div class="ffse-propname ffse-pc-block">
                                    <input type="text"  data-ffstyle-selector=".ff-form-main"  data-ffstyle-prop="max-width"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-default="500" data-slider-nonzero="true"  min="0" max="1000" step="5"/>
                                    </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Border</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline">
                                   <select onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="border-style" class="ffse-sel-element ffse-prop-borderstyle">
                                   <option value="">--select--</option>
                                         <option value="none">none</option>
                                         <option value="dotted">dotted</option>
                                         <option value="dashed">dashed</option>
                                         <option value="solid">solid</option>
                                         <option value="inset">inset</option>
                                         <option value="outset">outset</option>
                                   </select>
                                   </div>
                                   <div class="ffse-propname ffse-pc-inline">
                                   
                                   <div class="ffse-chklist-element ffse-prop-border-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="border-radius"   id="chkffseformborderradius0"  name="form-border-radius" value="0px" /><label class="ffse-prop-chk-lbl border-radius0" for="chkffseformborderradius0"><span class="b-radius0"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="border-radius"   id="chkffseformborderradius5"  name="form-border-radius" value="5px" /><label class="ffse-prop-chk-lbl border-radius5"  for="chkffseformborderradius5"><span class="b-radius5"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-form-main" data-ffstyle-prop="border-radius"  id="chkffseformborderradius10"  name="form-border-radius" value="10px" /><label class="ffse-prop-chk-lbl border-radius10"  for="chkffseformborderradius10"><span class="b-radius10"></span></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input data-ffstyle-selector=".ff-form-main" type="text" data-ffstyle-prop="border-color"    class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input data-ffstyle-selector=".ff-form-main" type="text" data-ffstyle-prop="border-width" onchange="styleSettingElementChange(this);"   class="ffse-rangeslider"      min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">

                                   <div class="ffse-propname ffse-pc-block">
                                  
                                   <input type="text" data-ffstyle-selector=".ff-form-main"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" min="0" max="100" step="1" />
                                    
                                   </div>
                               </div>
                           </div>
                           
                       

                       </div>
                       <!-- setting card container ends -->
                        <!-- setting card container starts -->
                       <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Section</h4>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline "><input data-ffstyle-selector=".ff-group-row" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Title Font</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline"><select    onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-section-header" data-ffstyle-prop="font-family"  class="ffse-sel-element ffse-prop-fontstyle"></select></div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    <div class="ffse-chklist-element ffse-prop-font-style-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-section-header" data-ffstyle-prop="font-weight"  id="chkffsebold"  name="font-style-dec" value="bold" /><label class="ffse-prop-chk-lbl" for="chkffsebold"><b>B</b></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-section-header" data-ffstyle-prop="font-style"  id="chkffseitalic"  name="font-style-dec" value="italic" /><label class="ffse-prop-chk-lbl"  for="chkffseitalic"><i>I</i></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"  data-ffstyle-selector=".ff-section-header" data-ffstyle-prop="text-decoration" id="chkffseunderline"  name="font-style-dec" value="underline" /><label class="ffse-prop-chk-lbl"  for="chkffseunderline"><u>U</u></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input type="text"  data-ffstyle-selector=".ff-section-header"  data-ffstyle-prop="color"  class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text"  data-ffstyle-selector=".ff-section-header"  data-ffstyle-prop="font-size"  onchange="styleSettingElementChange(this);"  class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Border</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline">
                                   <select onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-group-row" data-ffstyle-prop="border-style" class="ffse-sel-element ffse-prop-borderstyle"> 
                                   <option value="">--select--</option>
                                         <option value="none">none</option>
                                         <option value="dotted">dotted</option>
                                         <option value="dashed">dashed</option>
                                         <option value="solid">solid</option>
                                         <option value="inset">inset</option>
                                         <option value="outset">outset</option>
                                   </select>
                                   </div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    
                                   <div class="ffse-chklist-element ffse-prop-border-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-group-row" data-ffstyle-prop="border-radius"   id="chkffseborderradius0"  name="section-border-radius" value="0px" /><label class="ffse-prop-chk-lbl border-radius0" for="chkffseborderradius0"><span class="b-radius0"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-group-row" data-ffstyle-prop="border-radius"   id="chkffseborderradius5"  name="section-border-radius" value="5px" /><label class="ffse-prop-chk-lbl border-radius5"  for="chkffseborderradius5"><span class="b-radius5"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-group-row" data-ffstyle-prop="border-radius"  id="chkffseborderradius10"  name="section-border-radius" value="10px" /><label class="ffse-prop-chk-lbl border-radius10"  for="chkffseborderradius10"><span class="b-radius10"></span></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input data-ffstyle-selector=".ff-group-row" type="text" data-ffstyle-prop="border-color"    class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input data-ffstyle-selector=".ff-group-row" type="text" data-ffstyle-prop="border-width" onchange="styleSettingElementChange(this);"   class="ffse-rangeslider"   min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Max Width</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-group-row"  data-ffstyle-prop="max-width"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-default="500" data-slider-nonzero="true"   min="0" max="1000" step="5" />
                                   </div>
                               </div>
                           </div>                           
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Inner Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-group-row"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Outer Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-group-row"  data-ffstyle-prop="margin"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                           
                       

                       </div>
                       <!-- setting card container ends -->
                      <!-- setting card container starts -->
                      <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Footer</h4>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline ">
                                   <input data-ffstyle-selector=".ff-footer-group" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-even">
                               <span class="ffse-propertyname">Background Image</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline  ffse-file-upload-container">
                                      <div class="ffse-img-input-container">
                                      <div class="ffse-img-input-wrapper">
                                      <span class="img-upload-button-wrap" >Upload</span>
                                      <input data-ffstyle-selector=".ff-footer-group"   data-ffstyle-prop="background-image"  type="file" class="ffse-fileUpload-control" onchange="uploadFiles(this,'StyleEditor');" />
                                      </div>
                                      <div class="ffse-img-fileextension-dec"> Format gif, png or jpg. Maximum size 600kb.</div>
                                      </div>
                                      <div  class="ffse-img-uploading"  style="display:none;"><span class="ffse-uploading-img"></span></div>
                                      <div   class="ffse-img-uploaded" style="display:none;"><span class="ffse-uploaded-img"></span></div>
                                      <div   class="ffse-img-upload-error" style="display:none;"></div>
                                      <div   class="ffse-img-upload-placeholder"  style="display:none;"></div>
                                    </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                                
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-footer-background">
                                        <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-footer-group" data-ffstyle-prop="background-attachment;background-repeat"  id="chkffsefooterbackfixed"  name="footer-background-alignment" value="fixed;no-repeat" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffsefooterbackfixed"><span class="se-align-text">Fixed</span></label>
                                        </li><li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-footer-group" data-ffstyle-prop="background-repeat"   id="chkffsefooterbackrepeat"  name="footer-background-alignment" value="repeat" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffsefooterbackrepeat"><span class="se-align-text">Repeat</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-footer-group" data-ffstyle-prop="background-size;background-repeat"   id="chkffsefooterbackcover"  name="footer-background-alignment" value="cover;no-repeat" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffsefooterbackcover"><span class="se-align-text">Cover</span></label></li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>
                          <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-footer-group"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                      </div>
                    <!-- setting card container ends -->


                   </div>
                </div>
            </div>
        </div>
        <div class="panel-default">
            <div class="panel-heading" onmouseover="return toggleElementHighlight('fields',true);" onmouseout="return toggleElementHighlight('fields',false);" onclick="accordionToggle(this);return false;"   >
                <div class="panel-title">
                <span class="obj-back-btn" ></span>
                <span class="acc-tab-number">2</span>
                <h3 class="ffstyle-tab-name">Fields</h3>
                    <a  class="style-acc-trigger"  href="javascript:void(0);"  data-parent="#sfff-style-accordion" data-target="#sfff-style-fieldsettings"></a>
                </div>
            </div>
            <div id="sfff-style-fieldsettings" class="panel-collapse collapse">
                <div class="panel-body">
                   <div class="ffse-setting-card-container">
                    <!-- setting card container starts -->
                     <div class="ffse-setting-card ">
                           <div class="ffse-SC-header">
                           <h4>Labels</h4>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Font</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline"><select    onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-label,.ff-footnote-label" data-ffstyle-prop="font-family"  class="ffse-sel-element ffse-prop-fontstyle"></select></div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    <div class="ffse-chklist-element ffse-prop-font-style-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-label,.ff-footnote-label" data-ffstyle-prop="font-weight"  id="chkffselabelbold"  name="label-font-style-dec" value="bold" /><label class="ffse-prop-chk-lbl" for="chkffselabelbold"><b>B</b></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-label,.ff-footnote-label" data-ffstyle-prop="font-style"  id="chkffselabelitalic"  name="label-font-style-dec" value="italic" /><label class="ffse-prop-chk-lbl"  for="chkffselabelitalic"><i>I</i></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"  data-ffstyle-selector=".ff-label,.ff-footnote-label" data-ffstyle-prop="text-decoration" id="chkffselabelunderline"  name="label-font-style-dec" value="underline" /><label class="ffse-prop-chk-lbl"  for="chkffselabelunderline"><u>U</u></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input type="text"  data-ffstyle-selector=".ff-label"  data-ffstyle-prop="color"  class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text"  data-ffstyle-selector=".ff-label,.ff-footnote-label"  data-ffstyle-prop="font-size"  onchange="styleSettingElementChange(this);"  class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                                 <span class="ffse-propertyname">Alignment</span>
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-logo-background">
                                        <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-label-col" data-ffstyle-prop="text-align"  id="chkffselabeltextleft"  name="label-text-alignment" value="left" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffselabeltextleft"><span class="se-align-text">Left</span></label>
                                        </li><li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-label-col" data-ffstyle-prop="text-align"   id="chkffselabeltextcenter"  name="label-text-alignment" value="center" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffselabeltextcenter"><span class="se-align-text">Center</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-label-col" data-ffstyle-prop="text-align"   id="chkffselabeltextright"  name="label-text-alignment" value="right" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffselabeltextright"><span class="se-align-text">Right</span></label></li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>                          
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-label-col"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                           
                       

                       </div>
                        <!-- setting card container ends -->
                       <!-- setting card container starts -->
                        <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Asterisk</h4>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Font</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline"><select    onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-required-mark" data-ffstyle-prop="font-family"  class="ffse-sel-element ffse-prop-fontstyle"></select></div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    <div class="ffse-chklist-element ffse-prop-font-style-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-required-mark" data-ffstyle-prop="font-weight"  id="chkffseasteriskbold"  name="fields-font-style-dec" value="bold" /><label class="ffse-prop-chk-lbl" for="chkffseasteriskbold"><b>B</b></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-required-mark" data-ffstyle-prop="font-style"  id="chkffseasteriskitalic"  name="fields-font-style-dec" value="italic" /><label class="ffse-prop-chk-lbl"  for="chkffseasteriskitalic"><i>I</i></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"  data-ffstyle-selector=".ff-required-mark" data-ffstyle-prop="text-decoration" id="chkffseasteriskunderline"  name="fields-font-style-dec" value="underline" /><label class="ffse-prop-chk-lbl"  for="chkffseasteriskunderline"><u>U</u></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input type="text"  data-ffstyle-selector=".ff-required-mark"  data-ffstyle-prop="color"  class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text"  data-ffstyle-selector=".ff-required-mark"  data-ffstyle-prop="font-size"  onchange="styleSettingElementChange(this);"  class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
               </div>
                       <!-- setting card container ends -->
                       <!-- setting card container starts -->
                        <div class="ffse-setting-card mt20">
                           <div class="ffse-SC-header">
                           <h4>Fields</h4>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Font</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline"><select    onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-field-col" data-ffstyle-prop="font-family"  class="ffse-sel-element ffse-prop-fontstyle"></select></div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    <div class="ffse-chklist-element ffse-prop-font-style-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-field-col" data-ffstyle-prop="font-weight"  id="chkffsefieldsbold"  name="fields-font-style-dec" value="bold" /><label class="ffse-prop-chk-lbl" for="chkffsefieldsbold"><b>B</b></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-field-col" data-ffstyle-prop="font-style"  id="chkffsefieldsitalic"  name="fields-font-style-dec" value="italic" /><label class="ffse-prop-chk-lbl"  for="chkffsefieldsitalic"><i>I</i></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"  data-ffstyle-selector=".ff-field-col,.ff-radio-li label,.ff-checkbox-li label" data-ffstyle-prop="text-decoration" id="chkffsefieldsunderline"  name="fields-font-style-dec" value="underline" /><label class="ffse-prop-chk-lbl"  for="chkffsefieldsunderline"><u>U</u></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input type="text"  data-ffstyle-selector=".ff-field-col,.ff-rating-widget a"  data-ffstyle-prop="color"  class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text"  data-ffstyle-selector=".ff-field-col"  data-ffstyle-prop="font-size"  onchange="styleSettingElementChange(this);"  class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                          <div class="ffse-SC-property ffse-2c ffse-row-even">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline "><input data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                          <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Border</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline">
                                   <select onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices" data-ffstyle-prop="border-style" class="ffse-sel-element ffse-prop-borderstyle"> 
                                   <option value="">--select--</option>
                                         <option value="none">none</option>
                                         <option value="dotted">dotted</option>
                                         <option value="dashed">dashed</option>
                                         <option value="solid">solid</option>
                                         <option value="inset">inset</option>
                                         <option value="outset">outset</option>
                                   </select>
                                   </div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    
                                   <div class="ffse-chklist-element ffse-prop-border-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices" data-ffstyle-prop="border-radius"   id="chkffsefieldsborderradius0"  name="label-border-radius" value="0px" /><label class="ffse-prop-chk-lbl border-radius0" for="chkffsefieldsborderradius0"><span class="b-radius0"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices" data-ffstyle-prop="border-radius"   id="chkffsefieldsborderradius5"  name="label-border-radius" value="5px" /><label class="ffse-prop-chk-lbl border-radius5"  for="chkffsefieldsborderradius5"><span class="b-radius5"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices" data-ffstyle-prop="border-radius"  id="chkffsefieldsborderradius10"  name="label-border-radius" value="10px" /><label class="ffse-prop-chk-lbl border-radius10"  for="chkffsefieldsborderradius10"><span class="b-radius10"></span></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last">
                                   <input data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices" type="text" data-ffstyle-prop="border-color" onblur="styleSettingElementChange(this);"   class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices" type="text" data-ffstyle-prop="border-width" onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-default="1" data-slider-nonzero="true" min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                                 <span class="ffse-propertyname">Alignment</span>
                               <div class="ffse-propvalue-box">
                                  <div class="ffse-propname ffse-pc-block">
                                    <div class="ffse-radiochklist-element ffse-prop-logo-background">
                                        <ul class="ffse-radiochklist">
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-field-col" data-ffstyle-prop="text-align"  id="chkffsefieldstextleft"  name="label-text-alignment" value="left" /><label class="ffse-prop-radiochk-lbl se-align-right"  for="chkffsefieldstextleft"><span class="se-align-text">Left</span></label>
                                        </li><li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-field-col" data-ffstyle-prop="text-align"   id="chkffsefieldstextcenter"  name="label-text-alignment" value="center" /><label class="ffse-prop-radiochk-lbl se-align-center"  for="chkffsefieldstextcenter"><span class="se-align-text">Center</span></label></li>
                                       <li><input type="checkbox" class="ffse-propname-sub ffse-prop-radiochk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-field-col" data-ffstyle-prop="text-align"   id="chkffsefieldstextright"  name="label-text-alignment" value="right" /><label class="ffse-prop-radiochk-lbl se-align-left" for="chkffsefieldstextright"><span class="se-align-text">Right</span></label></li>
                                       </ul>
                                    </div>
                                  </div>
                               </div>
                           </div>                          
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Inner Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-type-text,.ff-textarea,select.ff-select-type,.ff-fileupload-drop-area,.select2-container .select2-choice,.select2-container .select2-choices"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"  />
                                   </div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Outer Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-field-col"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1" />
                                   </div>
                               </div>
                           </div>
                           
                       

                       </div>
                       <!-- setting card container ends -->
                        <!-- setting card container starts -->
                     <div class="ffse-setting-card  mt20">
                           <div class="ffse-SC-header">
                           <h4>Error Messages</h4>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Font</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline"><select    onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-invalid-msg" data-ffstyle-prop="font-family"  class="ffse-sel-element ffse-prop-fontstyle"></select></div>
                                   <div class="ffse-propname ffse-pc-inline">
                                    <div class="ffse-chklist-element ffse-prop-font-style-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-invalid-msg" data-ffstyle-prop="font-weight"  id="chkffseerrormsgbold"  name="label-font-style-dec" value="bold" /><label class="ffse-prop-chk-lbl" for="chkffseerrormsgbold"><b>B</b></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-invalid-msg" data-ffstyle-prop="font-style"  id="chkffseerrormsgitalic"  name="label-font-style-dec" value="italic" /><label class="ffse-prop-chk-lbl"  for="chkffseerrormsgitalic"><i>I</i></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"  data-ffstyle-selector=".ff-invalid-msg" data-ffstyle-prop="text-decoration" id="chkffseerrormsgunderline"  name="label-font-style-dec" value="underline" /><label class="ffse-prop-chk-lbl"  for="chkffseerrormsgunderline"><u>U</u></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input type="text"  data-ffstyle-selector=".ff-invalid-msg"  data-ffstyle-prop="color"  class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text"  data-ffstyle-selector=".ff-invalid-msg"  data-ffstyle-prop="font-size"  onchange="styleSettingElementChange(this);"  class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                                                    
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-invalid-msg"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"  />
                                   </div>
                               </div>
                           </div>
                           
                       

                       </div>
                       <!-- setting card container ends -->
                   </div>
                </div>
            </div>
        </div>
        <div class="panel-default">
            <div class="panel-heading" onmouseover="return toggleElementHighlight('buttons',true);" onmouseout="return toggleElementHighlight('buttons',false);" onclick="accordionToggle(this);return false;"  >
                <div class="panel-title">
                <span class="obj-back-btn" ></span>
                <span class="acc-tab-number">3</span>
                <h3 class="ffstyle-tab-name">Buttons</h3>
                    <a class="style-acc-trigger"   href="javascript:void(0);" data-parent="#sfff-style-accordion" data-target="#sfff-style-buttonsettings"></a>
                </div>
            </div>
            <div id="sfff-style-buttonsettings" class="panel-collapse collapse">
                <div class="panel-body">
                   
                    <div class="ffse-setting-card-container">
                      <!-- setting card container starts -->
                     <div class="ffse-setting-card">
                           <div class="ffse-SC-header">
                           <h4>Submit Button</h4>
                           </div>
                            
                           <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Background</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline "><input data-ffstyle-selector=".ff-btn-submit" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-2c ffse-row-even">
                               <span class="ffse-propertyname">Hover</span>
                               <div class="ffse-propvalue-box right-side-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline "><input data-ffstyle-selector=".ff-btn-submit:hover" type="text" data-ffstyle-prop="background-color"    class="ffse-colorpicker"  /></div>
                               </div>
                           </div>
                           <div class="ffse-SC-property ffse-1c ffse-row-odd">
                               <span class="ffse-propertyname">Font</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline"><select    onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="font-family"  class="ffse-sel-element ffse-prop-fontstyle"></select></div>
                                   <div class="ffse-propname ffse-pc-inline">
                                      <div class="ffse-chklist-element ffse-prop-font-style-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="font-weight"  id="chkffsebtnsubmitbold"  name="fields-font-style-dec" value="bold" /><label class="ffse-prop-chk-lbl" for="chkffsebtnsubmitbold"><b>B</b></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"   data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="font-style"  id="chkffsebtnsubmititalic"  name="fields-font-style-dec" value="italic" /><label class="ffse-prop-chk-lbl"  for="chkffsebtnsubmititalic"><i>I</i></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="styleSettingElementChange(this);"  data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="text-decoration" id="chkffsebtnsubmitunderline"  name="fields-font-style-dec" value="underline" /><label class="ffse-prop-chk-lbl"  for="chkffsebtnsubmitunderline"><u>U</u></label>
                                      </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input type="text"  data-ffstyle-selector=".ff-btn-submit"  data-ffstyle-prop="color"  class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text"  data-ffstyle-selector=".ff-btn-submit"  data-ffstyle-prop="font-size"  onchange="styleSettingElementChange(this);"  class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"/>
                                   </div>
                               </div>
                           </div>
                                <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Border</span>
                               <div class="ffse-propvalue-box">
                                   <div class="ffse-propname ffse-pc-inline">
                                   <select onchange="styleSettingElementChange(this);" data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="border-style" class="ffse-sel-element ffse-prop-borderstyle">
                                   <option value="">--select--</option>
                                         <option value="none">none</option>
                                         <option value="dotted">dotted</option>
                                         <option value="dashed">dashed</option>
                                         <option value="solid">solid</option>
                                         <option value="inset">inset</option>
                                         <option value="outset">outset</option>
                                   </select>
                                   </div>
                                   <div class="ffse-propname ffse-pc-inline">
                                   
                                   <div class="ffse-chklist-element ffse-prop-border-dec">
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="border-radius"   id="chkbtnsubmitborderradius0"  name="btn-submit-border-radius" value="0px" /><label class="ffse-prop-chk-lbl border-radius0" for="chkbtnsubmitborderradius0"><span class="b-radius0"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"   data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="border-radius"   id="chkbtnsubmitborderradius5"  name="btn-submit-border-radius" value="5px" /><label class="ffse-prop-chk-lbl border-radius5"  for="chkbtnsubmitborderradius5"><span class="b-radius5"></span></label>
                                        <input type="checkbox" class="ffse-propname-sub ffse-prop-chk"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="border-radius"  id="chkbtnsubmitborderradius10"  name="btn-submit-border-radius" value="10px" /><label class="ffse-prop-chk-lbl border-radius10"  for="chkbtnsubmitborderradius10"><span class="b-radius10"></span></label>
                                    </div>
                                   </div>
                                   
                                   <div class="ffse-propname ffse-pc-inline ffse-pc-last"><input data-ffstyle-selector=".ff-btn-submit" type="text" data-ffstyle-prop="border-color"    class="ffse-colorpicker"  /></div>
                                   <div class="ffse-propname ffse-pc-block">
                                   <input data-ffstyle-selector=".ff-btn-submit" type="text" data-ffstyle-prop="border-width" onchange="styleSettingElementChange(this);"   class="ffse-rangeslider"    data-slider-nonzero="true" data-slider-default="1" min="0" max="100" step="1"  />
                                   </div>
                               </div>
                           </div>   
                        <div class="ffse-SC-property ffse-2c ffse-row-odd">
                               <span class="ffse-propertyname">Shadow:</span>
                               <div class="ffse-propvalue-box left-aligned-prop">
                                   
                                   <div class="ffse-propname ffse-pc-inline ">
                   <input type="checkbox" class="ffse-propname-sub ffse-prop-chk sfff-checkbox"  onchange="singleSelectCheckElementChange(this);"  data-ffstyle-selector=".ff-btn-submit" data-ffstyle-prop="box-shadow"  id="chkffsebtnshadow"  name="btn-submit-box-shadow" value="0px 0px 2px 2px #888888" />
                   <label class="sfff-check-label"  for="chkffsebtnshadow"><span class=""></span></label>
                   </div>
                               </div>
                           </div>              
                           <div class="ffse-SC-property ffse-1c ffse-row-even">
                               <span class="ffse-propertyname">Padding</span>
                               <div class="ffse-propvalue-box">
                                   
                                   <div class="ffse-propname ffse-pc-block">
                                   <input type="text" data-ffstyle-selector=".ff-btn-submit"  data-ffstyle-prop="padding"  onchange="styleSettingElementChange(this);"   class="ffse-rangeslider" data-slider-nonzero="true" min="0" max="100" step="1"  />
                                   </div>
                               </div>
                           </div>
                           
                       

                       </div>
                       <!-- setting card container ends -->
                   </div>
                </div>
            </div>
        </div>
        </div>


    </div>
    <!-- accordion html ends-->
    <div class="sfff-style-edit-css display-none">
    <div class="sfff-style-edit-css-wrapper">
<div class="sfff-style-edit-css-box">
<textarea id="styleEditCss" onblur="customCssChange(this);"></textarea>
</div>
    </div> 
    </div>
</div>
 <div class="sfff-stylesave-action-container   ">
 <apex:outputPanel id="pnlForSaveBtnsWrapper"  styleClass="sfff-stylesave-action-wrapper"    layout="block"  > 
 <div class="sfff-stylesave-action action-saveas">
<a href="#"   onclick="saveThemeAs(this); return false;" class="btn-save-style-as vabutton4">Save as Custom Template</a>
</div> 
  

</apex:outputPanel>
</div>
     <!--  div block for form style settings ends-->                                                                        
</div>

 </div>
 </apex:outputPanel>

 <script type="text/javascript">
 var standardOnly=false;//'{!isFreemium}';
 var sfdcHostName =window.location.host.split('.')[1]; 
 var organisationId='{!$Organization.Id}';
 var apiSessionId='{!$Api.Session_ID}';
 var currentThemeJsonData=[];
 var currentThemeId = '';
var adHocTheme = '';
var isCurrentThemeAdhoc=false;
var isCurrentThemeStandard=false;
var isCSSCustom = '{!IsCSSCustom}';

var select2Url = "{!ffengineUrl}/styles/select2.css";
var iframeCSSurl = "{!URLFOR($Resource.styleeditor_iframecss)}";
var urlDefaultTheme = '{!ffengineUrl}/Styles/main.css';  
 
function remoteAvailabeleThemeLists() {

    /*JAVASCRIPT Remoting Method to populate all available themes   */
    var ffrecordid = '{!$CurrentPage.parameters.id}';

    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteAvailabeleThemeList)}',
        ffrecordid,standardOnly,
        function(result, event) {
            if (event.status) {
                var themeObjectsJSON = [];
                //console.log(' remoteAvailabeleThemeLists result HTML-' + result);
                if (result != null && result.length > 0) {
                    for (i = 0; i < result.length; i++) {

                        var isthemeselected = result[i].IsSelected;
                        var themeid = result[i].ThemeId;
                        var themeName = result[i].ThemeName;
                        var themeType = result[i].ThemeType;
                        var themetilepreview = '';
                        if(result[i].TilePreviewHtml!=undefined && result[i].TilePreviewHtml!=null)
                        {

                          themetilepreview=result[i].TilePreviewHtml;
                        }

                        themeObjectsJSON.push(themeObjectJSON(themeid, themeName, themeType, isthemeselected,themetilepreview));

                    }
                    populateAvailableThemeList(themeObjectsJSON);
                } else {
                    //console.log('No custom or standard themes found');
                }

            } else if (event.type === 'exception') {
                //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" unknown Exception while getting available themes- " + event.message);
            }
        }, {
            escape: false
        }
    );
     

}

function applyDefaultThemeJS(autoSave) {

    /*JAVASCRIPT Remoting Method to populate default theme  */
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';
    ffrecordid = ffrecordid.toString(); 
    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteDefaultTheme)}',
        ffrecordid,standardOnly,
        function(result, event) {
            if (event.status) {

                //console.log(' result Theme-');
                if (result != null) {


                    var isthemeselected = result.IsSelected
                    var themeid = result.ThemeId
                    var themename = result.ThemeName
                    var themetype = result.ThemeType;
                    var themecss = result.ThemeCSS;
                    themecss = safeCssString(themecss);
                    isCSSCustom = result.IsCustom;
                    SetCurrentThemeVariables(themeid,themetype);
                    
                     
                    if (themecss != undefined && themecss != '') {
                        themecss = safeCssString(themecss);
                    }
                   
                    editCssCallBack(true,isCSSCustom,themecss);
                    applyTheme(themecss, iframeCSSurl, false, true, null, themeid, autoSave);

                } else {
                   // //console.log(' DefaultTheme ' + result);

                    applyTheme(urlDefaultTheme, iframeCSSurl, true, true, null, null, autoSave);
                }


            } else if (event.type === 'exception') {
                //console.log(" Exception getRemoteDefaultTheme- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Exception 2- " + event.message);
            }
        }, {
            escape: true
        }
    );
   

}

function remoteDeleteTheme(themeid) {

    /*JAVASCRIPT Remoting Method to  delete theme  */


    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteDeleteTheme)}',
        themeid,
        function(result, event) {
            if (event.status) {

                //   //console.log(' result HTML-'+result);
                if (result != null && result.length > 0) {
                    var isDeleted = result[0];
                    var returnMessage = result[1];
                    if (isDeleted) {
                        removeThemeFromList(themeid);
                    } else {
                        //console.log(' Theme is isDeleted  ' + isDeleted + '<br/>' + returnMessage);
                    }

                } else {

                    //console.log(' Theme is not deleted ');

                }


            } else if (event.type === 'exception') {
                //console.log(" Exception while deleting the theme " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Unknown Exception while deleting theme- " + event.message);
            }
        }, {
            escape: true
        }
    );
  

}


function remoteIsThemeInUseJs(themeid, themename) {

        /*JAVASCRIPT Remoting Method to  check theme in use   */

        var formList = [];
        Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteIsThemeInUse)}',
            themeid,
            function(result, event) {
                if (event.status) {

                    //   //console.log(' result HTML-'+result);
                    if (result != null && result.length > 0) {
                         
                        for (i = 0; i < result.length; i++) {

                            var formname = result[i];


                            formList.push(formname);

                        }
                        showDeleteConfirm(themeid, themename, formList);
                    } else {

                        //console.log(' Theme not in use-- deleting... ');

                        deleteCallBack(true, themeid);

                    }


                } else if (event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            }, {
                escape: true
            }
        );
        

    }
    
function remoteCreateThemeJS(themename, themeType, themeCss, copyDefaultCss, isCustomCss, action, elementSource,triggerByStyleChanges, tileHtml) {

    /*JAVASCRIPT Remoting Method to create a new theme  */
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';
    ffrecordid = ffrecordid.toString();
    //console.log('ffrecordid---' + ffrecordid);
    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteCreateTheme)}',
        ffrecordid, themename, themeType, themeCss, copyDefaultCss, isCustomCss,tileHtml,
        function(result, event) {
            if (event.status) {

                
                if (result != null) {


                    var isthemeselected = result.IsSelected;
                    var themeid = result.ThemeId;
                    var themename = result.ThemeName;
                    var themetype = result.ThemeType;
                    var themecss = result.ThemeCSS;
                    var tileHtml = $('<div/>').html(result.TilePreviewHtml).text();
                   themecss = safeCssString(themecss);
                    var themeiscustom = result.IsCustom;
                    //console.log(' New  theme created type- ' + themetype);
                    //console.log(' remoteDefaultTheme theme type -'+themetype);
                    SetCurrentThemeVariables(themeid,themetype);
                    
                    isCSSCustom=themeiscustom;
                    var csscustomTemp=true;
                    if(triggerByStyleChanges )
                        {
                          csscustomTemp=isCSSCustom;
                          refreshformStyleList();
                        appendNewThemeTileToList(themeid, themename, themetype, isthemeselected,false,tileHtml);
                       }
                       else
                       {
                        appendNewThemeTileToList(themeid, themename, themetype, isthemeselected,true,tileHtml);
                       }
                      
                   
                    if (elementSource != undefined && elementSource != null) {
                        adHocTheme = themename;
                        editCssCallBack(true,csscustomTemp,themecss);
                  
                        applyTheme(themecss, iframeCSSurl, false, !themeiscustom, elementSource, themeid, true);

                        //console.log('elementSource not null or undefined- ' + elementSource);
                        if(triggerByStyleChanges)
                        {
                          var parser = new cssjs();
        //parse css string
        var jsonCSS = parser.parseCSS(themecss);
        currentThemeJsonData=jsonCSS;
                          styleSettingElementChange(elementSource);
                        }
                    } else {
                       // //console.log('elementSource null or undefined- ' + elementSource);
                    }
                } else {
                    //console.log(' theme not created- ' + result);


                }


            } else if (event.type === 'exception') {
                //console.log(" Exception while creating new theme- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Unknown Exception while creating new theme- " + event.message);
            }
        }, {
            escape: true
        }
    );
    //return formStyleObjectsData;

}
 
function remoteGetCustomThemeByIdJs(themeid, elementSource, autoSave,initialCall,togglecssflag) {

    /*JAVASCRIPT Remoting Method to populate theme by id */
    var id = themeid;

    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteGetThemeById)}',
        id,
        function(result, event) {
            if (event.status) {

                //   //console.log(' result HTML-'+result);
                if (result != null  ) {

                   var isthemeselected = result.IsSelected;
                    var themeid = result.ThemeId;
                    var themename = result.ThemeName;
                    var themetype = result.ThemeType;
                    var themecss = result.ThemeCSS;
                    var themeiscustom = result.IsCustom;
                    themecss = safeCssString(themecss);
                    isCSSCustom= themeiscustom;
                    SetCurrentThemeVariables(themeid,themetype);
                     
                    if(!initialCall)
                    {
                     // //console.log('not initial call '+togglecssflag);
                      if(togglecssflag)
                      {
                       //  //console.log('not initial call false '+togglecssflag);
                     editCssCallBack(true,false,themecss);
                      }
                      else
                      {
                        // //console.log('not initial call true '+togglecssflag);
                        editCssCallBack(true,true,themecss);
                      }
                    }
                    else
                    {
                      ////console.log('initial call ');
                      editCssCallBack(true,isCSSCustom,themecss);
                    }
                  
                    applyTheme(themecss, iframeCSSurl, false, true, elementSource, themeid, autoSave);
                  
                  

                } 
                else {
                    //console.log('No theme found ');
                }


            } else if (event.type === 'exception') {
                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Exception 2- " + event.message);
            }
        }, {
            escape: true
        }
    );
    

}

function remotePopulateCustomThemeByIdJs(themeid, elementSource, autoSave) {

    /*JAVASCRIPT Remoting Method to populate theme by id */
    var id = themeid;

    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteGetThemeById)}',
        id,
        function(result, event) {
            if (event.status) {

                //   //console.log(' result HTML-'+result);
                if (result != null  ) {

                   var isthemeselected = result.IsSelected;
                    var themeid = result.ThemeId;
                    var themename = result.ThemeName;
                    var themetype = result.ThemeType;
                    var themecss = result.ThemeCSS;
                    var themeiscustom = result.IsCustom;
                    themecss = safeCssString(themecss);
                    isCSSCustom= themeiscustom;
                    SetCurrentThemeVariables(themeid,themetype);
                     
                    if(!isCSSCustom)
                    {
                       populateFormStyleSettings(result,elementSource,autoSave);
                       setFontFamily();
                       
                       populateColorPicker();
                       expandAccordionPanel(elementSource);
                    }
                } 
                else {
                    //console.log('No theme found ');
                }


            } else if (event.type === 'exception') {
                //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Exception 2- " + event.message);
            }
        }, {
            escape: true
        }
    );
    

}
function safeCssString(themecss)
{
    var theme=themecss;
    if(themecss!=undefined && themecss.length>0)
    {
      theme=themecss.replace(/&amp;/g, '&');
      theme=  theme.replace(/"/g, "'");
    }
     
    return theme;
}
function SetCurrentThemeVariables(themeid,themetype)
{
  currentThemeId=themeid;
                    if(themetype.toLowerCase()=='ad-hoc')
                    {
                     isCurrentThemeAdhoc= true;
                     
                    }
                    else
                    {
                       isCurrentThemeAdhoc= false;
                       
                    }
}
function customCssChange(elementSource){
  Intercom('trackEvent', 'edited-css');
  var customcss=$(elementSource).val(); 
   remoteSaveThemeJs(currentThemeId, false, '',true,false,customcss,true,'');

}
/*String recordId, String refthemeid, String themename ,String themecss,String tileHtml*/
function remoteSaveAsThemeJs(themeid,   newthemename,iscustom,newcss,doOverWrite,tileHtml) {

    /*JAVASCRIPT Remoting Method to save or create themes  */
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';
    ffrecordid = ffrecordid.toString();
    //console.log('ffrecordid---' + ffrecordid);
    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteSaveAsTheme)}',
        ffrecordid, themeid,   newthemename,iscustom,newcss,doOverWrite,tileHtml,
        function(result, event) {
            if (event.status) {

                //console.log('remoteSaveAsThemeJs result Theme-' + result);
                if (result != null) {
                    var themeid = result.ThemeId;
                    var themename = result.ThemeName;
                    var themetype = result.ThemeType;
                    var themecss = result.ThemeCSS;
                    themecss = safeCssString(themecss);
                  if(result.IsValid)
                  {
                    var isthemeselected = result.IsSelected;
                    
                    var themeiscustom = result.IsCustom;

                    isCSSCustom=themeiscustom;
                    SetCurrentThemeVariables(themeid,themetype);
                      
                    editCssCallBack(true,isCSSCustom,themecss);
                    //if(!doOverWrite) removed to update themelist always
                   // {
                     appendNewThemeTileToList(themeid, themename, themetype, isthemeselected, true,tileHtml);
                  //  }
                    applyTheme(themecss, iframeCSSurl, false, !themeiscustom, null, themeid, true);
                  }
                  else
                  {
                    if(themetype.toLowerCase()=='standard')
 {
                     commonAlertMessage('Standard template exist with same name','');
                    }
                    else
                    {
                      // will overwrite the template with same name
                      remoteSaveCallBack('confirm',themeid, newthemename,iscustom,themecss,themetype,tileHtml);
                    }
                     
                  }


                } else {
                    //console.log(' theme not created- ' + result);


                }


            } else if (event.type === 'exception') {
                //console.log(" Exception while saving theme- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Unknown Exception while saving theme- " + event.message);
            }
        }, {
            escape: true
        }
    );
   

}
 /**MAIN function to update or create a theme as per parameters passes
  * create an adhoc theme if standard theme found
  * update custom theme if dooverwrite is true
  * create a custom theme and save it if saveas is true and dowoverwrite is true 
  * update ad-hoc theme if overwrite is true and saveas is false
   */
function remoteSaveThemeJs(themeid, saveAs, themename,iscssCustom,defaultCssOverWrite,customcss,doOverWrite,tileHtml) {

    /*JAVASCRIPT Remoting Method to save or create themes  */
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';
    ffrecordid = ffrecordid.toString();
    //console.log('ffrecordid---' + ffrecordid);
    Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.StyleEditorComponentController.remoteSaveTheme)}',
        ffrecordid, themeid, saveAs, themename,iscssCustom,defaultCssOverWrite,customcss,doOverWrite,tileHtml,
        function(result, event) {
            if (event.status) {

                //console.log('remoteSaveThemeJs result Theme-' + result);
                if (result != null) {
                    var themeid = result.ThemeId;
                    var themename = result.ThemeName;
                    var themetype = result.ThemeType;
                    var themecss = result.ThemeCSS;
                    themecss = safeCssString(themecss);
                  if(result.IsValid)
                  {
                    var isthemeselected = result.IsSelected;
                    
                    var themeiscustom = result.IsCustom;

                    isCSSCustom=themeiscustom;
                    SetCurrentThemeVariables(themeid,themetype);
                      
                    editCssCallBack(true,isCSSCustom,themecss);
                    //if(!doOverWrite) removed to update themelist always
                   // {
                     appendNewThemeTileToList(themeid, themename, themetype, isthemeselected, false,tileHtml);
                  //  }
                    applyTheme(themecss, iframeCSSurl, false, !themeiscustom, null, themeid, true);
                  }
                  else
                  {
                    
                    //** Theme already exists with smae name *//
                    if(themetype.toLowerCase()=='standard')
                    {
                    // can't save the template with same name
                    commonAlertMessage('Standard template exists with same name','');
                     // remoteSaveCallBack('info',themeid, saveAs, themename,iscssCustom,customcss,themetype,tileHtml);
                    }
                    else
                    {
                      // will overwrite the template with same name
                      commonAlertMessage('Can not perform the action','');
                    //  remoteSaveCallBack('confirm',themeid, saveAs, themename,iscssCustom,customcss,themetype,tileHtml);
                    }
                  }


                } else {
                    //console.log(' theme not created- ' + result);


                }


            } else if (event.type === 'exception') {
                //console.log(" Exception while saving theme- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" Unknown Exception while saving theme- " + event.message);
            }
        }, {
            escape: true
        }
    );
   

}

function showDeleteConfirm(themeid, themename, themeList) {
    var themelistHTML = '';
    var $ulItem = $('<ul />', {        'class': 'themelist'    });

    
    if (themeList.length > 0) {
        $.each(themeList, function(index, item) {
            themelistHTML += item + '<br/>';
            var $liItem = $('<li />', {        'class': 'theme-item' ,    });
           $liItem.html( item);
           $ulItem.append($liItem);
        });


        var dialogBody = "<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>The following forms are currently using this custom template:<br/>" + $ulItem.html() + "<br />Are you sure you want to do this?</div></div>";
        $("#dialog-confirm").html(dialogBody);

        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Save",
            height: "auto",
            width: 413,
            buttons: {
                "Yes": {
                    click: function() {
                        $(this).dialog('close');
                        deleteCallBack(true, themeid);

                    },
                    text: 'Delete',
                    'class': 'vabutton1'
                },              
                "No": {
                    click: function() {
                        $(this).dialog('close');

                        deleteCallBack(false, themeid);
                    },
                    text: 'Cancel',
                    'class': 'vabutton2'
                }

            },
            open: function(event, ui) {
                $('.ui-dialog :button').blur();
            }
        });
    }
}
/* show confirm popup if theme is already exists with given name - if confirmed then call to remotesavetheme method to overwrite existing cutom theme */
function remoteSaveCallBack(returnStatus,themeid,  themename,iscustom,themecss,themetype,tileHtml)
{
 /*'confirm',themeid, themename,themecss,themetype,tileHtml);*/
  var message='';
  if(returnStatus=='confirm')
  {
     message='A '+themetype+'  template already exists with this name. Do you want to overwrite the existing template?';
  
    var dialogBody = "<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>"+message+"<br /></div><div class='secondary'><br/> </div></div>";
        $("#dialog-confirm").html(dialogBody);

        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Save",
            height: "auto",
            width: 413,
            buttons: {
                "Yes": {
                    click: function() {
                        $(this).dialog('close');
                       /* themeid,   themename,defaultCssOverWrite,newcss,doOverWrite,tileHtml*/
                        remoteSaveAsThemeJs(themeid, themename,iscustom,themecss,true,tileHtml);
                    },
                    text: 'Yes',
                    'class': 'vabutton1'
                },
                "No": {
                    click: function() {
                        $(this).dialog('close');
                    },
                    text: 'No',
                    'class': 'vabutton2'
                }                

            },
            open: function(event, ui) {
                $('.ui-dialog :button').blur();
            }
        });
  }
  else
  {
      message='A '+themetype+'  template already exists with same name.<br/>';
      commonAlertMessage(message,'');
  }
  
}
function deleteCallBack(doDelete, themeid) {
    if (doDelete) {
        //console.log('Deleting theme....');
        remoteDeleteTheme(themeid);
    } else {
        //console.log('Delete  Cancelled');
    }
}

function applyDefaultTheme(autoSave, isDefault) {
    if (isDefault) {
        //console.log(' applyDefaultThemeJS-');
        applyDefaultThemeJS(autoSave);
    } else {
        //console.log(' No theme-');
        applyNoTheme(autoSave);
    }
}


 


 

function invalidThemeIdMessage() {
  commonAlertMessage('Please select a template from the list provided before continuing.','');
    
}


function isThemeIdValid() {
    var flag = true;
    if (currentThemeId == undefined || currentThemeId == null || currentThemeId == '') {
        //console.log(' THemeid is not valid');
        flag = false;
    }
    return flag;
}




function saveThemeAs(elementSource) {
    if (isThemeIdValid()) {
        var themeid = currentThemeId;
        
        var dialogBody = "<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Save new template as:<br /><br /></div><div class='secondary'>Name:<input style='margin-left:20px;' id='dialogThemeTemplatename' type='text'></div></div>";
        $("#dialog-confirm").html(dialogBody);

        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Save",
            height: "auto",
            width: 413,
            buttons: {
                "Yes": {
                    click: function() {
                        $(this).dialog('close');

                        var name = $('#dialogThemeTemplatename').val();
                        var saveas=true;
                        if( isCurrentThemeAdhoc)
                      {
                        saveas=false;
                      }
                        saveasThemeTemplate(themeid, saveas, name);


                    },
                    text: 'Save Template',
                    'class': 'vabutton1'
                },
                "No": {
                    click: function() {
                        $(this).dialog('close');

                    },
                    text: 'Cancel',
                    'class': 'vabutton2'
                }

            },
            open: function(event, ui) {
                $('.ui-dialog :button').blur();
            }
        });
    } else {
        invalidThemeIdMessage();
    }


}


function saveasThemeTemplate(themeid, saveAs, themename) {
  Intercom('trackEvent', 'saved-template');
  var customcss='';
  if(isCSSCustom)
  {
    customcss=$('#styleEditCss').val();

    remoteSaveAsThemeJs(themeid, themename,true,customcss,false,'');
  } else {
    remoteSaveAsThemeJs(themeid, themename,false,customcss,false,generateTileHtml());
  }
}




function applyNoTheme(autoSave) {
    applyTheme(urlDefaultTheme, iframeCSSurl, true, true, null, null, autoSave);
}

function getRemoteThemeByIdJs(themeid, elementSource, autoSave) {
   // //console.log(' getRemoteThemeByIdJs ' + themeid);
    remoteGetCustomThemeByIdJs(themeid, elementSource, autoSave,true,false);
}

function getFormHTML() {
       var formpreviewurl = '{!URLENCODE($Site.BaseUrl)}' + 'FormdraftPreview?id=' + '{!URLENCODE($CurrentPage.parameters.Id)}';
    var cssLinks = [];
    cssLinks.push(iframeCSSurl);
    cssLinks.push(select2Url);
    cssLinks.push(urlDefaultTheme);
    populatePreviewPage(formpreviewurl, cssLinks);
}
   /* Style setting functions*/
 function accordionToggle(elementSource) {

    var addClass = false;
    var parentMainAccordion=$(elementSource).parents('.sfff-theme-accordion');
$(parentMainAccordion).find('.panel-collapse').unbind("click");
    if(!$(elementSource).parents('.panel-default').hasClass('activeItem'))
    {
     $(elementSource).parents('.panel-default').addClass('activeItem');
     $(parentMainAccordion).find('.panel-default:not(.activeItem)').hide();
    }
    else
    {
    $(parentMainAccordion).find('.panel-default').show();
     $(elementSource).parents('.panel-default').removeClass('activeItem');
    }

    if (!$(elementSource).parents('.panel-default').find('.panel-collapse').hasClass('in')) {
        addClass = true;
    }
    var sourceElem = $(elementSource).find('.style-acc-trigger');
    var isthemeidValid=isThemeIdValid();
    if (isthemeidValid && addClass) {
        $(elementSource).addClass('processing-graphic');
         <apex:outputText rendered="{!if(isFreemium,true,false)}">   
        $(elementSource).parents('.panel-default').find('.panel-collapse').bind("click", function(){
     upgradeNowMessage('CSS changes are only available for paid subscriptions.','','');
});
        </apex:outputText>
        remotePopulateCustomThemeByIdJs(currentThemeId, sourceElem, false);
    }
    else {
        console.log(' CLose the form style settings drawer');
        collapseAccordionPanels();
        if(!isthemeidValid)
        {
        invalidThemeIdMessage();
        }
    }



}
function editCustomCss(elemSource)
{
   <apex:outputText rendered="{!if(isFreemium,true,false)}">   
   
     upgradeNowMessage('CSS changes are only available for paid subscriptions.','','');
 
        </apex:outputText>
         <apex:outputText rendered="{!if(isFreemium,false,true)}">   
        editCssClick(elemSource);
        </apex:outputText>
  
}
function templateClick(elementSource) {
Intercom('trackEvent', 'selected-template');
<apex:outputText rendered="{!if(isFreemium,true,false)}">   
   
     upgradeNowMessage('Template changes are only available for paid subscriptions.','','');
 
        </apex:outputText>
        <apex:outputText rendered="{!if(isFreemium,false,true)}">   
   
              if (isCurrentThemeAdhoc) {
                  confirmTemplateChange(elementSource);
              }
              else {
                  templateClickCallBack(elementSource, true);
              }
 
        </apex:outputText>
    
}
</script>
</apex:component>