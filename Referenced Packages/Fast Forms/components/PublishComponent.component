<apex:component controller="VisualAntidote.PublishComponentController" allowDML="true">
    <apex:attribute name="ffrecord" type="String" description="TODO: SF Id for Form" required="true" assignTo="{!recordId}" />
<head>
 
</head>
<style>
.prefill-wrapper{
    background-color: #e6ecef;
  border-radius: 6px;
  display: block;
  /*min-height: 100px;*/
  padding: 20px;
    margin-bottom: 30px;
}
.prefill-mode-box-inner {
  display: block;
  float: left;
  padding: 5px 0px 10px 0px;
  clear: both;
}
.prefill-objectlist{
    float:left;
      text-align: left;
}
.prefill-objectlist>h4 {
 margin-bottom: 20px;
  display: inline-block;
  min-width: 230px;
  float: left;
  font-size: 16px;
  background-color: #F5F7F8;
  padding: 5px;
  border-radius: 5px;
  border-color: #DBDBDB;
  border-width: 1px;
  border-style: solid;
}
.prefill-objectlist>.sfff-add-delete-box{
  float:left;
  display: inline-block;
}
.prefill-objectlist>.sfff-add-delete-box>.sfff-addnew-action{
display:inline-block;
opacity: 1;outline: none !important;
  }
.prefill-mode-status {
  float: left;
  margin-right: 10px;
  color: #052942;
  font-weight: 900;
  font-size: 15px;
}
.prefill-mode-togglelink {
  width: 35px;
  border-radius: 8px;
  height: 17px;
  background-color: #d55555;
  margin: 0px;
  padding: 2px;
  float: left;
  margin-right: 10px;
  cursor: pointer;
}
.prefill-mode-toggleswitch {
  background-color: #fff;
  border-radius: 8px;
  width: 13px;
  height: 13px;
  float: left;
}
.prefill-mode-box-inner.mode-active .prefill-mode-togglelink {
  background-color: #45c377;
}
.prefill-mode-box-inner.mode-active .prefill-mode-toggleswitch {
  float: right;
}
.prefill-help-box{
    float: right;
}
.prefill-object-list-box-outer{
  clear: both;

}
.sfff-object-item-1,.sfff-object-item-2{
    float:left;
    display: inline-block;
}
.prefill-heading{
    float:left;
    width:35%;
    padding:5px 25px;
    text-align: right;
}
.prefill-heading>h4{
    color:#616161;
}
.sfff-object-row{
    overflow: hidden;
    margin-bottom: 20px ;
      display: block;
  min-width: 330px;
  clear:left;
}
.sfff-add-delete-box{
    margin-left:20px;
}
.sfff-addnew-action ,.sfff-delete-action{
float: left;
}
.embed-code-step-title {
    font-size: 15px;
    color: #052942;
      font-weight: 600 !important;
  padding-bottom: 15px;
  overflow: hidden;
  display: inline-block;
}
 
.prefill-code-lang-tabs .tab-pane.fade{
display: none;
}
.prefill-code-lang-tabs .tab-pane.active{
display: block;
}
.prefill-code-tabs-wrapper li.sfff-lang-tab {
  float: left;
  text-align: center;
 border-width: 1px;
  border-color: rgb( 196, 213, 224 );
  border-style: solid;
  border-radius: 5px 5px 0px 0px;
  background-color: #ffffff;
  margin-left: 10px;
}
.prefill-code-tabs-wrapper li.sfff-lang-tab.active {
 
 border-bottom-color: rgb(246, 249, 249) !important;
   background-color: rgb(246, 249, 249);
 
}
.prefill-code-tabs-wrapper li.sfff-lang-tab>a{
  float: left;
  text-align: center;
  display: inline-block;
  padding:9px 27px;
   font-size: 14px;

 text-decoration: none;
 cursor: pointer;
  color: #052942;
  font-weight: 600 !important;
}
.prefill-code-lang-tabs{
    border-width: 1px;
  border-color: rgb( 196, 213, 224 );
  border-style: solid;
  border-radius: 5px;
  padding:35px;
   min-height: 100px;
  margin-top: -1px;
  background-color: #f6f9f9;
}
.secret-key-block>h4{
  font-weight: 600 !important;
  color: #616161;
}
.secret-key-block>input.ff-input-text{
    margin:auto 25px;
}
.prefill-enabled-options-block {
  text-align: left;
}
.codeTextAreaClass {
   overflow: auto;
  min-height: 130px;
  font-family: monospace;
  font-weight: 600;
  font-size: 12px;
}
.code-detail-link {
  float: left;
}
.code-detail-link>a{
text-decoration: none;
  cursor: pointer;
  font-size: 13px;
  font-weight: 600;
}
.secret-key-left, .secret-key-right{
float:left;
}
.copy-code-text{
  color: #33aefd; 
  cursor: pointer;
}
.secret-key-right{
margin-left:20px;
  }
  .key-help-box{
    display: block;  width: 20px; float: right;
  }
  .key-help-box img{
    margin-top:2px;

  }
  .select2-container.select-publish{
    width:230px;
  }
  .select2-results li.fielditem.fflink {
background-image:url("{!URLFOR($Resource.logos,'color_logo.png')}");
background-position:center right;
background-repeat:no-repeat;
  background-size: 60px 20px;
    margin-right: 4px;
  }
  .select2-results li.fielditem.fflink.embed-link {
    background-image: url("{!URLFOR($Resource.ffcommon,'iconimages/ff-web.png')}");
    background-position: center right;
    background-repeat: no-repeat;
    background-size: 20px 20px;
    margin-right: 4px;
}
  .sfffpublishOptionsWrapperCSS.silver-label .prefill-object-list-box-inner div.select2-container,
.sfffpublishOptionsWrapperCSS.silver-label .secret-key-block a.vabutton1  {
    color: #777575 !important;
    pointer-events: none;
}
.sfffpublishOptionsWrapperCSS.silver-label .secret-key-block a.vabutton1  {
    border-color: #777575 !important;
    
}
.sfffpublishOptionsWrapperCSS.silver-label .prefill-object-list-box-inner div.select2-container .select2-choice .select2-arrow,
.sfffpublishOptionsWrapperCSS.silver-label .prefill-object-list-box-inner div.select2-container .select2-choice,
.sfffpublishOptionsWrapperCSS.silver-label .prefill-object-list-box-inner div.select2-container .select2-choice > .select2-chosen,
.sfffpublishOptionsWrapperCSS.silver-label .secret-key-block a.vabutton1 {
    background-color: #F5F5F5 !important;
}
.publish-option-tabs>li.sfff-tab.fm-enabled>a{
    background-color: #FDFDFD;
    color: #052942 !important;
}
.publish-option-tabs>li.send-email-header.fm-enabled .tab-icon {
background-position:-92px -41px;
}
.publish-option-tabs>li.export-link-header.fm-enabled .tab-icon {
background-position:-127px -41px;
}
.sfffpublishOptionsWrapperCSS {
    text-align: left;
}
</style>
<script src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
    <apex:includeScript value="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" />


    <apex:includeScript value="{!$Resource.VisualAntidote__Bootstrapwizardjs}" />

    <script src="{!URLFOR($Resource.Clipboard,'ZeroClipboard.js')}"></script>
    <link rel="stylesheet" href="{!URLFOR($Resource.sortable,'sortable/jquery-ui.css')}" />
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Open+Sans" />
    <link rel="stylesheet" href="{!URLFOR($Resource.select2,'select2.css')}" />
    <script src="{!URLFOR($Resource.select2,'select2.js')}"></script>
    
    <script src="{!URLFOR($Resource.swfobjectjs)}"></script>
    <script src="{!URLFOR($Resource.freshereditor,'freshereditor/shortcut.js')}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.freshereditor,'freshereditor/farbtastic/farbtastic.js')}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.freshereditor,'freshereditor/bootstrap/bootstrap-dropdown.js')}" type="text/javascript"></script>
     <script src="{!URLFOR($Resource.freshereditor,'freshereditor/freshereditor.min.js')}" type="text/javascript"></script>
    
    
    <link href="{!URLFOR($Resource.freshereditor,'freshereditor/farbtastic/farbtastic.css')}" rel="stylesheet" type="text/css" />
    <link href="{!URLFOR($Resource.freshereditor,'freshereditor/freshereditor.css')}" rel="stylesheet" type="text/css" />
    
    <style>
   
    </style>
   
    
    <apex:actionFunction name="passRecordParam" action="{!passRecordParam}" reRender="togglePrefillPanelJS,sfffpublishOptionsWrapper,objectItemrowHtmlWrapper,warningBlock" status="loadstatus" onComplete="CopyToClipBoard();resetselect(); setToolbar(); prefillToggleInitialCall();">
        <apex:param assignTo="{!recordId}" name="ffrecordid" value="{!ffrecord}" />

    </apex:actionFunction>

 <apex:actionFunction name="dummyRefreshObjFields" action="{!DummyRefresh}"  reRender="mainEMailPanelWrapper,objFieldsTempWrapper"  onComplete="refreshRelatedObjectInfo('.publish-box-{!recordId}');"  >
        
    </apex:actionFunction>
<apex:actionFunction name="resetObjectsEmailFlag" action="{!resetObjectHasEmail}"  reRender="mainEMailPanelWrapper,objFieldsTempWrapper"  onComplete="refreshRelatedObjectInfo('.publish-box-{!recordId}');"  >
        
    </apex:actionFunction>
    

 <apex:actionFunction name="clearpopupEmailResultMsg" action="{!clearEmailResultMsg}"  reRender="msgpanel"    >
        <apex:param assignTo="{!popupEmailResultMsg}" name="popupEmailResultMsg" value="" />

    </apex:actionFunction>

    <apex:actionFunction immediate="true" name="ExportLinks" action="{!ExportLinks}"    reRender="msgpanel"  >
        <apex:param name="lookupvalue" value="" />
        <apex:param name="islist" value="" />
        <apex:param name="isprefill" value="" />
    </apex:actionFunction>


    <apex:actionFunction immediate="true" name="SendOrSaveEmail2" action="{!SendOrSaveEmail2}"  >
        <apex:param name="emailto" value="" />
        <apex:param name="emailbcc" value="" />
        <apex:param name="emailcc" value="" />
        <apex:param name="emailsubject" value="" />
        <apex:param name="templatebody" value="" />
        <apex:param name="isdraftonly" value="" />
        <apex:param name="prefillData" value="" />
    </apex:actionFunction>

    <apex:actionFunction immediate="true" name="SendOrSaveEmail" action="{!SendOrSaveEmail}" reRender="msgpanel" status="loadstatus">
        <apex:param name="emailconfigxml" value="" />
        <apex:param name="templatebody" value="" />
        <apex:param name="isdraftonly" value="" />
        <apex:param name="isprefill" value="" />
        <apex:param name="islist" value="" />

        <apex:param name="lookupvalue" value="" />
    </apex:actionFunction>


  <apex:outputPanel id="sfffpublishOptionsWrapper" styleClass="sfffpublishOptionsWrapperCSS {!if(isFreemium,'silver-label','')}"  layout="block">

    <apex:outputPanel id="sfffpublishOptions" rendered="{!!OnlyDraft }" layout="block">

        <div    class="MainTabContainer publish-box-main-wrapper publish-box-{!URLENCODE(ffrecord)}">
<apex:outputPanel id="warningBlock" styleClass="marginLRauto ohidden text-align-center" layout="block"  >
                        <div class="publish-dialog-alert vff-alert "   style="display:{!IF(hasPaymentFields || LookupFieldWarningVisible,'inline-block','none')}">
                        <div class="ohidden" style="display:{!IF(LookupFieldWarningVisible,'block','none')}; " >
                              <div class="vff-alert-msg msg-text-div"  >Warning: This form contains a lookup field which allows external users to view your Salesforce records.</div>
                              <a class="help-icon-w" target="_blank" href="http://visualantidote.com/fastforms/help#lookup-fields"></a></div>
                              <div class="ohidden mb20" style="display:{!IF(hasPaymentFields && LookupFieldWarningVisible,'inline-block','none')}; " ></div>
                           <div class="ohidden" style="display:{!IF(hasPaymentFields,'block','none')}" > <div class="vff-alert-msg msg-text-div" >Warning: This form has a payment field. If publishing with embed code, it must be embedded on an SSL-secured site to function.</div>
                           </div>
                              
                        </div>
                    </apex:outputPanel>
   <apex:outputPanel styleClass="marginLRauto ohidden prefill-wrapper"  layout="block"   >
   <div class="ohidden">
   <div class="prefill-mode-box">
     <div class="prefill-mode-box-inner">
                  
                                                  <div class="prefill-mode-togglelink" data-prefill-toggle="{!URLENCODE(ffrecord)}" onclick="togglePrefillMode(this,true);">
                                                      <div class="prefill-mode-toggleswitch">
                                                          &nbsp;
                                                      </div>
                                                  </div>
                                                  <div class="prefill-mode-status">Dynamic Prefill Disabled</div>
                                                 <apex:outputPanel styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                                                                                                         
                                                                                                         <span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Dynamic Prefill is only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span>

                                                                                                         </apex:outputPanel>
                                              </div>
                                                  </div>
                                                   
                                                   <div class="prefill-help-box">
                                                   <a class="help-icon blue-tooltip">
                                                <span class="blue-tooltip-text -mt130 -ml65">Enable dynamic prefill to allow your form to be prefilled with existing Salesforce record information, using either the Send By Email, Export Links or Advanced Prefill options. You can also decide which of your form's objects will be able to be prefilled.</span>
                                                <span class="draft-text"> <img class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}" style="margin-left:0px; float:inherit; margin-top:3px;"/></span>
                                        </a>
                                                   </div>
</div>
                                                   <div class="prefill-object-list-box-outer"  style="display:none" >
                                                   <div class="prefill-heading">
                                                   <h4>Select Object(s) to Prefill:</h4>
                                                   </div>
                                                   <div class="prefill-objectlist">
                                                   <h4 >{!PrimaryObjectDisplayName}</h4> <div class="sfff-add-delete-box">
 
    <a class="sfff-addnew-action" data-prefill-link="first" href="#" onclick="addNewObjectItemRowHTML(this);return false;">
    </a>
    </div>
                                                   <div class="prefill-object-list-box-inner">
                                                   </div>
                                                   </div>
                                                   </div>

    </apex:outputPanel>
<apex:outputPanel styleClass="marginLRauto ohidden text-align-center"  >
     <div class="vff-success " id="successActionBox" style="display: none;">
                
                <div class="vff-success-msg msg-text-div" onclick="closeNotification(this);" style="display:block"> </div>
                </div>
    </apex:outputPanel>

            <ul class="nav nav-tabs  publish-option-tabs">
                <li class="sfff-tab active embed-code-header" id="embed-code-header">
                    <a data-toggle="tab" href="#embedcodesection" onclick="goToNextTourStop();mixpanel.track('Embed Code tab clicked');Intercom('trackEvent', 'clicked-embed-code-tab');"><span class="tab-icon"></span><span class="tab-title">Embed Code</span>
                    
                    </a>
                </li>
                <li class="sfff-tab hosted-form-header" id="hosted-form-header">
                    <a data-toggle="tab" href="#hostedformsection" onclick="goToNextTourStop();mixpanel.track('Hosted Form tab clicked');Intercom('trackEvent', 'clicked-hosted-form-tab');"><span class="tab-icon"></span><span class="tab-title">Hosted Form</span></a>
                </li>
                <li class="sfff-tab send-email-header {!IF(isFreemium,'fm-enabled','')}" id="send-email-header">
                    <a data-toggle="tab" href="#sendemailsection" onclick="goToNextTourStop();mixpanel.track('Send by Email tab clicked');Intercom('trackEvent', 'clicked-send-email-tab');"><span class="tab-icon"></span><span class="tab-title">Send by Email</span><apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>Send By Email is only available for paid subscriptions..<span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>
                </li>
                <li class="sfff-tab export-link-header {!IF(isFreemium,'fm-enabled','')}" id="export-link-header">
                    <a data-toggle="tab" href="#exportlinksection" onclick="goToNextTourStop();mixpanel.track('Export Links tab clicked');Intercom('trackEvent', 'clicked-export-links-tab');"><span class="tab-icon"></span><span class="tab-title">Export Links</span><apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>Export Links is only available for paid subscriptions.<span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>
                </li>
            </ul>

            <apex:outputPanel id="onlyDraftPanel" styleClass="onlyDraft" rendered="{!OnlyDraft}">
                <h4>You currently have a draft for this form</h4>
                <div class="sfff-action-buttons"> <a class="vabutton2" href="#">Start Fresh</a>

                    <a class="vabutton1" href="#">Edit Current Draft</a>
                </div>
            </apex:outputPanel>

            <apex:outputPanel id="tabContentPanel" styleClass="publish-option-content tab-content" rendered="{!!OnlyDraft }">
                <div id="embedcodesection" class="tab-pane fade in embed-code-body  active">

                  <div class="prefill-enabled-options-block" style="display:none">
                        <h3 class="embed-code-step-title">1 - Embed Code</h3>
                    </div>
                    <p>Use the embed code below to embed your form directly into any website. You will only need do this once, as your form will update automatically when you publish changes to your form in the future.</p>
                                        
                    <div class="code-block">
                        <div class="help-box">

                        </div>
                        <div class="copy-code-block">
                            <h4 id="clip_copyEmbedCodeText" data-clipboard-target="embedCodeTextArea" class="EmbedCodeText copy-code-text">Copy Code</h4>
                        </div>

                        <apex:inputTextarea readonly="true" styleClass="copyTextbox sfff-text-area embedCodeTextAreaClass" id="embedCodeTextArea" value="{!EmbedCode}" onclick="var metadata = {embed_code: '{!EmbedCode}'};Intercom('trackEvent', 'clicked-embed-code-box', metadata);" />
                    </div>

                    <div class="prefill-enabled-options-block prefill-code-examples-container mt30" style="display:none">
                        <h3 class="embed-code-step-title">2 - Advanced Prefill Code Examples</h3>
                        <apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Advanced Prefill is only available for paid subscriptions <a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span></apex:outputPanel>
                        <p>Use the code examples below to generate URL parameters for prefilling your form from your company intranet or portal site. 
                        <br />For example, if you are creating a contact form and want to prefill the form by email address, use one of the code examples below to encrypt the following string:
                        <br />
                        <br /><i>email='myemail@company.com'</i>
                        <br />
                        <br />You can then take the resulting encrypted string and pass it into your form's page URL in the following format:
                        <br />
                        <br /><i>dp={your encrypted string}</i>
                        <br />
                        <br />You can alternatively append your encrypted string into your form's embed code as follows:
                        <br />
                        <br /><i>&lt;script type=&quot;text/javascript&quot; id=&quot;jsFastForms&quot; src=&quot;https://fastforms.visualantidote.com/FormEngine/Scripts/Main.js?d=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<b>&amp;dp={your encrypted string}</b>&quot;&gt;&lt;/script&gt;</i>
                        <br />                        
                        <br />Note: Generating a dynamic prefill URL for your website requires advanced coding knowledge.<br/>
                        <a href="https://visualantidote.com/fastforms/help#Advanced-Prefill-Options" target="_blank">Learn more</a></p>
                        <div class="secret-key-block ohidden mt30">
                         <div class="secret-key-left"><h4>Secret Key:</h4>
                         <div class="key-help-box">
<a class="help-icon blue-tooltip"><span class="blue-tooltip-text -mt45 -ml65">Use this secret key to encrypt your URL parameters for prefilling your form.</span> <span class="draft-text"><img class="helpIconCode"   src="{!URLFOR($Resource.alpha,'blank.png')}"  /></span></a>
                          </div>
                         </div>
                          <div class="secret-key-right">
                         <input id="PublicKeyTextBox"   type="textbox" readonly="true" value="{!prefillKey}" data-prefillkey="{!prefillKey}" class="ff-input-text sfff-public-key codeTextKeyClass" />
                           <h4 id="clip_copyPublicKeyText"  data-clipboard-target="PublicKeyTextBox" class="PublicKeyText copy-code-text">Copy Key</h4>
                                              <br/>  <br/><a class="vabutton1" onclick="regenerateKey(this);">Regenerate Key</a>
                                                
                                        </div>
                                        </div>
                            <div class="prefill-code-tabs-wrapper mt30">
                            <ul class="nav nav-tabs  prefill-code-tabs">
                                <li class="sfff-lang-tab active">
                                    <a data-toggle="tab" href="#langcsharp"  >C#</a>
                                </li>
                                <li class="sfff-lang-tab">
                                    <a data-toggle="tab" href="#langvb"  >VB</a>
                                </li>
                                <li class="sfff-lang-tab">
                                    <a data-toggle="tab" href="#langjava"  >Java</a>
                                </li>
                                <li class="sfff-lang-tab">
                                    <a data-toggle="tab" href="#langphp"  >PHP</a>
                                </li>
                            </ul>
                            <div   class="tab-content prefill-code-lang-tabs">
                                <div id="langcsharp" class="tab-pane fade in active">
                                <div class="code-detail-link"><a href="#">Detailed Code Example</a></div>
                                <div class="copy-code-block">
                                        <h4 id="clip_copyCSharpText" data-lang-name="C Sharp" data-clipboard-target="CSharpTextArea" class="CSharpText copy-code-text">Copy Code</h4>
                                    </div>
                                   <textarea   class="copyTextbox sfff-text-area codeTextAreaClass" id="CSharpTextArea" readonly="readonly">
                                   <code>    
    /// &lt;summary&gt;
    /// Method for encrypting URL parameters for prefilling a fast form.
    /// Returns an encrypted string to be passed into your Fast Form page URL
    /// in the format of dp={encrypted string}.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;dataToEncrypt&quot;&gt;
    /// The URL string to encrypt. String takes the format of fieldname=&#39;fieldvalue&#39;, with multiple fields separated by an ampersand.
    /// &lt;/param&gt;
    public static string Encrypt(string dataToEncrypt)
    {
        try
        {
            string secretKey = &#39;#PUBLICKEY#&#39;;
            CspParameters cspParams = new CspParameters { ProviderType = 1 };
            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);
            rsaProvider.FromXmlString(Encoding.UTF8.GetString(Convert.FromBase64String(secretKey)));

            byte[] plainBytes = Encoding.UTF8.GetBytes(dataToEncrypt);
            byte[] encryptedBytes = rsaProvider.Encrypt(plainBytes, false);
            return HttpServerUtility.UrlTokenEncode(encryptedBytes);
        }
        catch (CryptographicException e)
        {
            return null;
        }
    }
    </code></textarea>
                                 </div>
                                 <div id="langvb" class="tab-pane fade">
                                    <div class="code-detail-link"><a href="#">Detailed Code Example</a></div>
                                     <div class="copy-code-block">
                                        <h4 id="clip_copyVBText" data-lang-name="VB" data-clipboard-target="VBTextArea" class="VBText copy-code-text">Copy Code</h4>
                                    </div>
                                  <textarea   class="copyTextbox sfff-text-area codeTextAreaClass" id="VBTextArea" readonly="readonly"><code>
&#39; &lt;summary&gt;
&#39; Method for encrypting URL parameters for prefilling a fast form.
&#39; Returns an encrypted string to be passed into your Fast Form page URL
&#39; in the format of dp={encrypted string}.
&#39; &lt;/summary&gt;
&#39; &lt;param name=&quot;dataToEncrypt&quot;&gt;
&#39; The URL string to encrypt. String takes the format of fieldname=&#39;fieldvalue&#39;, with multiple fields separated by an ampersand.
&#39; &lt;/param&gt;
Public Shared Function Encrypt(dataToEncrypt As String) As String
  Dim secretKey as String = &#39;#PUBLICKEY#&#39;;
  Try
    Dim cspParams As New CspParameters() With { _
      Key .ProviderType = 1 _
    }
    Dim rsaProvider As New RSACryptoServiceProvider(cspParams)
    rsaProvider.FromXmlString(Encoding.UTF8.GetString(Convert.FromBase64String(publicKey)))

    Dim plainBytes As Byte() = Encoding.UTF8.GetBytes(dataToEncrypt)
    Dim encryptedBytes As Byte() = rsaProvider.Encrypt(plainBytes, False)
    Return HttpServerUtility.UrlTokenEncode(encryptedBytes)
  Catch e As CryptographicException
    Return Nothing
  End Try
End Function
</code>
                                  </textarea>
                                 </div>
                                 <div id="langjava" class="tab-pane fade">
                                 <div class="code-detail-link"><a href="#">Detailed Code Example</a></div>
                                  <div class="copy-code-block">
                                        <h4 id="clip_copyJavaText" data-lang-name="Java" data-clipboard-target="JavaTextArea" class="JavaText copy-code-text">Copy Code</h4>
                                    </div>
                                  <textarea   class="copyTextbox sfff-text-area codeTextAreaClass" id="JavaTextArea"  readonly="readonly"><code>
  /**
   * Method for encrypting URL parameters
   * for prefilling a fast form.    
   * @dataToEncrypt arg The URL string to encrypt. 
   * String takes the format of fieldname='fieldvalue', 
   * with multiple fields separated by an ampersand.
   * @return An encrypted string to be passed into the URL for your Fast Form page
   * in the format of dp={encrypted string}.
   */     
    public static String GetEncryptedParams(String dataToEncrypt)
    {    
     String secretKey="#PUBLICKEY#";
     Base64 base64=new Base64();
  byte[] byteArray = Base64.decodeBase64(secretKey.getBytes());
    String decodedString = new String(byteArray); 
    String modulusString=null;
     String publicExponentString=null;
   
    try {
          DocumentBuilderFactory dbf =
              DocumentBuilderFactory.newInstance();
          DocumentBuilder db = dbf.newDocumentBuilder();
          InputSource is = new InputSource();
          is.setCharacterStream(new StringReader(decodedString));

          Document doc = db.parse(is);
          NodeList nodes = doc.getElementsByTagName("RSAKeyValue");

          // iterate through the RSAKeyValue XML element 
          for (int i = 0; i &#60; nodes.getLength(); i++) {
             Element element = (Element) nodes.item(i);

             NodeList expNodeList = element.getElementsByTagName("Exponent");
             Element expElem = (Element) expNodeList.item(0);
             publicExponentString =getCharacterDataFromElement(expElem);  
             
             NodeList modNodeList = element.getElementsByTagName("Modulus");
             Element modElem = (Element) modNodeList.item(0); 
        modulusString =getCharacterDataFromElement(modElem);       
          }
      }
      catch (Exception e) {
          e.printStackTrace();
      }
    BigInteger modulus = new BigInteger(  1,  base64.decode(modulusString));
    BigInteger publicExponent = new BigInteger(1,  base64.decode(publicExponentString));
      

    RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, publicExponent);
    KeyFactory fact = null;
    try {
      fact = KeyFactory.getInstance("RSA");
    } catch (Exception e2) {
       e2.printStackTrace();
    }
    PublicKey pubKey = null;
    try {
      pubKey = fact.generatePublic(rsaPubKey);
    } catch (Exception e2) {
       e2.printStackTrace();
    }
       
    Cipher rsaCipher = null;
    try {
      rsaCipher = Cipher.getInstance("RSA");
    } catch (Exception e1) {
      // TODO Auto-generated catch block
      e1.printStackTrace();
    }
     String FFEncryptedText = null;
     
    try {
      FFEncryptedText = Encrypt(dataToEncrypt.getBytes(), pubKey, rsaCipher);
    } catch (InvalidKeyException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (NoSuchPaddingException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (BadPaddingException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
      return FFEncryptedText;
    }
    public static String Encrypt(byte[] textBytes, PublicKey pk, Cipher rsaCipher) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
  {
      
      //Initialize the cipher for encryption. Use the public key.
      rsaCipher.init(Cipher.ENCRYPT_MODE, pk);

      //Perform the encryption using doFinal
      byte[] encByte = rsaCipher.doFinal(textBytes);

      // converts to base64 for easier display.
      byte[] base64Cipher = Base64.encodeBase64(encByte);

      return new String(base64Cipher);
  }
    /*helper method*/
    public static String getCharacterDataFromElement(Element e) { Node child = e.getFirstChild();
        if (child instanceof CharacterData) {
           CharacterData cd = (CharacterData) child;
           return cd.getData();
        }
        return "?";
      }</code></textarea>
                                 </div>
                                 <div id="langphp" class="tab-pane fade">
                                  <div class="code-detail-link"><a href="#">Detailed Code Example</a></div>
                                  <div class="copy-code-block">
                                        <h4 id="clip_copyPHPText" data-lang-name="PHP" data-clipboard-target="PHPTextArea" class="PHPText copy-code-text">Copy Code</h4>
                                    </div>
                                  <textarea   class="copyTextbox sfff-text-area codeTextAreaClass"  id="PHPTextArea" readonly="readonly"><code>&#60;&#63;php
  //Method for encrypting URL parameters
  //for prefilling a fast form.    
  // dataToEncrypt: The URL string to encrypt. 
  // String takes the format of fieldname='fieldvalue', 
  // with multiple fields separated by an ampersand.
  // Returns an encrypted string to be passed into the URL for your Fast Form page
  // in the format of dp={encrypted string}. 
&lt;?php
$_SERVER[&#39;DOCUMENT_ROOT&#39;] . &#39;/phpseclib/Crypt/RSA_XML.php&#39;;

function Encrypt($dataToEncrypt) {

  $secretKey = &quot;#PUBLICKEY#&quot;; 
  $publicKey = &quot;&quot;.base64_decode( $secretKey,true).&quot;&quot;; 

  $RSAEncryption = new Crypt_RSA_XML();
  $RSAEncryption-&gt;loadKeyfromXML($publicKey);

  //encrypt the data and encode it to base64 
  $ciphertext = base64_encode($RSAEncryption-&gt;encrypt($dataToEncrypt));
  return $ciphertext;
}
?&gt;
</code> 
</textarea>
                                 </div>
                              </div>
                            </div>
                       
                    </div>
                </div>
                <div id="hostedformsection" class="tab-pane fade hosted-form-body">
                    <p>Use the link below to access your form from anywhere. <br />This link will never change, as the form will update automatically when you publish changes to your form in the future.</p>
                    <div class="code-block">
                        <div class="copy-code-block">
                            <h4 id="clip_copyHostedFormText" data-clipboard-target="hostedFormScriptTextarea" class="HostedFormText copy-code-text">Copy Link</h4>
                        </div>
                      
<label class="hostedFormScriptTextareaClass" id="hostedFormScriptTextarea" value="{!HostedFormCode}" onclick="var metadata = {form_link: '{!HostedFormCode}'};Intercom('trackEvent', 'clicked-hosted-form-textbox', metadata);" ><a alt="Open form in new tab" href="{!HostedFormCode}" target="_blank" onclick="var metadata = {form_link: '{!HostedFormCode}'};Intercom('trackEvent', 'clicked-hosted-form-link', metadata);" >{!HostedFormCode}</a></label>

                    </div>
                </div>
                <div id="sendemailsection" class="tab-pane fade  send-email-body">
        
                    <apex:outputPanel id="enterpriseCustomersOnlyPanel" styleClass="onlyDraft" rendered="{!NOT(packageTier == 'Enterprise')}">
                        <h4>Send by Email is only available in the Enterprise Edition of Fast Forms.</h4>
                        <br />
                        <div class="sfff-action-buttons"> <a class="vabutton1" href="http://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a>
                        </div>
                        <br />
                    </apex:outputPanel>

                    <apex:outputPanel id="onlyDraftEMailPanel" styleClass="onlyDraft" rendered="{!OnlyDraft && packageTier == 'Enterprise'}">
                        <h4>You currently have a draft for this form</h4>
                        <div class="sfff-action-buttons"> <a class="vabutton2" href="#">Start Fresh</a>

                            <a class="vabutton1" href="#">Edit Current Draft</a>
                        </div>
                    </apex:outputPanel>
           <apex:outputPanel id="mainEMailPanelWrapper" styleClass="mainEmailWrapperCSS" >
                    <apex:outputPanel id="hasNoEMailPanel" styleClass="onlyDraft" rendered="{!Not(IsObjectHasEmail) && packageTier == 'Enterprise'}">
                        <h4>You don't have any e-mail fields in your form's primary object ({! HTMLENCODE(PrimaryObjectName) }) or related object(s) .</h4>
                        <div class="sfff-action-buttons"> <a href="{!URLENCODE($Site.BaseUrl)}FormEditor?id={!URLENCODE(ffrecord)}" class="vabutton2">Go to Form Editor</a>


                        </div>
                    </apex:outputPanel>

                    <apex:outputPanel id="mainEMailPanel" rendered="{! NOT(OnlyDraft) && IsObjectHasEmail && packageTier == 'Enterprise'}">
                        <!--   Send Email Block starts -->

<div id="sendEmailWizard" class="nav-wizard-container">
                            <div class="navbar">
                                 
                                        <ul class="nav-wizard">
                                            <li class="active"><a href="#emailfirsttab" class="nocursorevents"  >1 - Start</a>
                                            </li>
                                            <li><a href="#emaillasttab" class="nocursorevents" >2 - Send Email</a>
                                            </li>

                                        </ul>
                                    
                           
                            <div class="tab-content horizontal-tab-content">
                                <div class="tab-pane fade in active" id="emailfirsttab">

                                    <div class="m0-150 pt50" style="display:block; overflow:hidden">
                                        <p>Send By Email allows you to distribute a link to your form to the audience defined below. <br/ ><br />Enabling 'Dynamic Prefill' above will allow you to pre-populate your form with your audience's existing information and allow them to update their information.</p><br/ >
                                        <div class="div-col-1 w40per txt616161">
                                            Set Audience
                                        </div>
                                        <div class="div-col-2 w60per">
                                            <div class="vertical-tab-container">
                                                <ul class="nav nav-tabs vertical-tabs">
                                                    <li class="active"><a href="#SBEselectindividualrecord" data-toggle="tab"><span class="ff-radio-css"></span>Select an individual record</a>
                                                    </li>
                                                    <li><a href="#SBEsetofrecords" data-toggle="tab"><span class="ff-radio-css"></span>Select a set of records</a>
                                                    </li>

                                                </ul>
                                                <div class="tab-content vertical-tab-content">
                                                    <div class="tab-pane fade in active" id="SBEselectindividualrecord">
                                                        <span class="lookupInput"> 
                                                        <input type="hidden" id="defaultSBELookupValueHidden" name="lookupElementhidden"  />
                                                        <input class="sfff-lookup-input-text" type="textbox" id="defaultSBELookupValue"  onblur="validateLookupField(this.id)" name="lookupElement"   value=""/>
                                                        <a href="javascript:void(0);" onclick="openLookupPopup('{!JSENCODE(PrimaryObjectName)}','');" id="lookupSBEElement_lkwgt"><img src="/s.gif" class="lookupIcon"/></a>
                                                        </span>
                                                    </div>
                                                    <div class="tab-pane fade" id="SBEsetofrecords">

                                                        <apex:selectlist id="selectSBELookupObj" onchange="DummyOnchange();" styleClass="selectSBELookupObj select-publish" value="{!accountListitem}" multiselect="false" Size="1">
                                                            <apex:selectOptions value="{!accountListitems}" />
                                                        </apex:selectlist>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <input type="hidden" id="chkbxSBEEmailUpdateHidden" name="lookupElementhidden" />
                                       

 

                                        <div class="nav-wizard-btn mt30 mb50">
                                            <div class="btn-next"> <a onclick="emailWizardbtnClick(this);" id="emailBtnNext" data-next-link="1" data-process="pass-to-next" class="vabutton1"><span class="btnText">Next</span></a>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="tab-pane email-tab-section" id="emaillasttab">
                                    <div class="email-to-fields  pt50">
                                        <div class="form-row">
                                            <label class="label-for">To</label>
                                            <input style="display:{!if(primaryObjEmailFieldsList.size>1,'none','block')}" type="text" id="txtbxemailTo" class="el-text-box" />
                                            <div class=" ">
                                                <apex:selectlist rendered="{!primaryObjEmailFieldsList.size>1}" id="selectSBEEmailTo" styleClass="selectSBEEmailTo select-publish" value="{!accountListitem}" multiselect="false" Size="1">
                                                    
                                                </apex:selectlist>
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <label class="label-for">CC</label>
                                            <input type="text" id="txtbxemailCc" class="el-text-box" />
                                        </div>
                                        <div class="form-row">
                                            <label class="label-for">BCC</label>
                                            <input type="text" id="txtbxemailBcc" class="el-text-box" />
                                        </div>


                                    </div>
                                    <span class="silver-line-separator" />
                                    <div class="email-content-box">
                                        <div class="form-row">
                                            <label class="label-for">Subject</label>
                                            <input type="text" id="txtbxemailsubject" class="el-text-box" />
                                        </div>

                                        <div class="form-row">
                                            <label class="label-for">Message</label>
                                        </div>
                                        <div class="email-template-box">
                                            <div class="pb20" id="email-editor-custom-toolbar">


                                                <apex:selectlist id="selectSBEfieldlist" styleClass="selectSBELookup select-publish" onchange="enableInsertField();" value="{!accountListitem}" multiselect="false" Size="1">
                                                     
                                                </apex:selectlist>

                                                <div class="insert-field-btn-div  ">

                                                      <a  id="insert-field-btn" class="action-icon add-icon blue-tooltip" data-fieldname='' onclick="insertfieldtoHtml(this);"><span class="blue-tooltip-text -ml25 -mt30">Insert merge field</span></a>
                                                    </div>
                                            </div>
                                            <div id="email-editor-toolbar"></div>
                                            
                                            <textarea id="email-content-editor-textarea" name="ckeditortext" class="clear"></textarea>
                                        </div>
                                        <div class="nav-wizard-btn  mt30 mb50">
                                        <div class="btn-go-back" >
                                        <a class="vabutton1"  data-next-link="0" id="emailBtnGoBack" data-process="go-back"  onclick="emailWizardbtnClick(this);"><span class="btnText">Go Back</span></a>
                                        </div>
                                            <div class="btn-send-now">
                                            <a onclick="emailWizardbtnClick(this);" id="emailBtnSend" data-next-link="" data-process="send" class="vabutton1"><span class="btnText">Send Now</span></a>
                                            </div>
                                            <div class="btn-save-changes">
                                                <a onclick="emailWizardbtnClick(this);" id="emailBtnSaveasDraft" data-next-link="" data-process="saveasdraft" style="display:none;" class="vabutton2"><span class="btnText">Save as Draft</span></a>
                                            </div>

                                        </div>
                                    </div>


                                </div>
                                <div class="ohidden">
                                    <div class="vff-alert mb50 m0-150 " style="display:none" id="alertEmailValidation">
                                        <div class="vff-alert-msg  msg-text-div" style="display:block" onclick="closeAlert(this);"></div>
                                        
                                    </div>
                                </div>

                                <apex:outputPanel id="msgpanel" styleClass="sf-message-css ohidden" layout="block" >
<apex:outputPanel rendered="{!IF(JSINHTMLENCODE(popupEmailResultMsg)!='',true,false)}">
 <script>
 var message='{!JSINHTMLENCODE(popupEmailResultMsg)}';
  
  


 var messagetype='dialogIconAlert';
  var primarymessage='Email not sent';
    if(message.length > 8 && message.indexOf("Email sent")==0 )
    {
        messagetype='dialogIconOK';
        primarymessage='Email sent successfully';
    }     
    else 
    {
        if(message.length > 80)
        {
           var tempmessage=message;
           message= message.substring(0, 80)+'...';
           message+="<span class='toggle-more-less'>show detail</span>";
           message+="<span class='toggle-more-less-detail'>"+tempmessage+"</span>";
        }    
    }

  
 popupEMailResult(primarymessage,message,messagetype);
 </script>
</apex:outputPanel>
                                 
                                </apex:outputPanel>

                            </div>
                        </div>
                         </div>

                       
                        
                        
                         <div id="previewdialog" title="Preview HTML">

                        </div>
                        <!--  Ends -->
                    </apex:outputPanel>

</apex:outputPanel>

                </div>
                <div id="exportlinksection" class="tab-pane fade export-link-body">
                    <apex:outputPanel id="enterpriseCustomersOnlyPanel2" styleClass="onlyDraft" rendered="{!NOT(packageTier == 'Enterprise')}">
                        <h4>Export Links is only available in the Enterprise Edition of Fast Forms.</h4>
                        <br />
                        <div class="sfff-action-buttons"> <a class="vabutton1" href="http://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a>
                        </div>
                        <br />
                    </apex:outputPanel>

                    <apex:outputPanel id="exportLinksPanel2" rendered="{!packageTier == 'Enterprise'}">
                        <div class="m0-150" style="overflow:hidden">
                            <p class="pt50">Export Links allows you to export a set of unique links to your form for updating existing records. <br/ ><br />Select the records you'd like to generate links for and click 'Download CSV' to export them to a file.<br /><br />
                            Enabling 'Dynamic Prefill' above will enable you to export a set of record update links, pre-filled with your audience's existing information.</p><br/ >
    
                            <div class="div-col-1 w40per txt616161">
                                Set Audience
                            </div>
                            <div class="div-col-2 w60per">
                                <div class="vertical-tab-container">
                                    <ul class="nav nav-tabs vertical-tabs">
                                        <li class="active"><a href="#selectindividualrecord" data-toggle="tab"><span class="ff-radio-css"></span>Select an individual record</a>
                                        </li>
                                        <li><a href="#setofrecords" data-toggle="tab"><span class="ff-radio-css"></span>Select a set of records</a>
                                        </li>
    
                                    </ul>
                                    <div class="tab-content vertical-tab-content">
                                        <div class="tab-pane fade in active" id="selectindividualrecord">
                                            <span class="lookupInput"> 
                                        <input type="hidden" id="defaultLookupValueHidden" name="lookupElementhidden"  />
                                        <input class="sfff-lookup-input-text" type="textbox" id="defaultLookupValue" onblur="validateLookupField(this.id)" name="lookupElement"   value=""/>
                                        <a href="javascript:void(0);" onclick="openLookupPopup('{!JSENCODE(PrimaryObjectName)}','');Intercom('trackEvent', 'selected-send-email-audience-individual');" id="lookupElement_lkwgt"><img src="/s.gif" class="lookupIcon"/></a>
                                        </span>
                                        </div>
                                        <div class="tab-pane fade" id="setofrecords">
    
    
                                            <apex:selectlist id="selectELLookupObj" styleClass="selectELLookup select-publish" onchange="DummyELOnchange();Intercom('trackEvent', 'selected-send-email-audience-listview');" value="{!accountListitem}" multiselect="false" Size="1">
                                                <apex:selectOptions value="{!accountListitems}" />
                                            </apex:selectlist>
    
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
    
                            <div class="nav-wizard-btn  mt30 mb50">
                                <div class="btn-next"> <a onclick="exportLinks();" class="vabutton1"><span class="btnText cursorpointer">Download CSV</span></a>
                                </div>
                                
    
                            </div>
                            <div class="ohidden" style="clear:both">
                                    <div class="vff-alert mb50  "  style="display:none"  id="alertExportLinkValidation">
                                        <div class="vff-alert-msg msg-text-div"   onclick="closeAlert(this);"></div>
                                         
                                    </div>
                                </div>
    
                            
                            <div id="exportDataId" class="">
    
    
     
                            </div>
                        </div>
                    </apex:outputPanel>
                </div>


            </apex:outputPanel>


            <div class="bottom-box">
               
            </div>
        </div>


<apex:outputPanel id="objFieldsTempWrapper" layout="block" style="display:none">
<div class="selectSBELookupTempWrapper">
 <apex:selectlist id="selectSBEfieldlistTEMP" styleClass="selectSBELookupTemp" onchange="enableInsertField();" value="{!accountListitem}" multiselect="false" Size="1">
                                                    <apex:selectOptions value="{!primaryObjFieldsListitems}" />
                                                </apex:selectlist>
</div>
<div class="selectSBEEmailToTEMPWrapper">
 <apex:selectlist rendered="{!primaryObjEmailFieldsList.size>1}" id="selectSBEEmailToTEMP" styleClass="selectSBEEmailToTEMP select-temp" value="{!accountListitem}" multiselect="false" Size="1">
                                                    <apex:selectOptions value="{!primaryObjEmailFieldsList}" />
                                                </apex:selectlist>

</div>
</apex:outputPanel>
    </apex:outputPanel>
    
</apex:outputPanel>
 

 <script src="{!URLFOR($Resource.PublishComponentJs)}"></script>

 
 <script>
 var orgPrefix='{!orgPrefix}';
   /*JAVASCRIPT Remote Function */
    function getRemoteEmailTemplateJs() {
        /*JAVASCRIPT Remoting Method to populate Email draft configuration xml */
        var ffrecordid = '{!ffrecord}';

        Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.PublishComponentController.getRemoteEmailTemplate)}',
            ffrecordid,
            function(result, event) {
                if(event.status) {
                    // Get DOM IDs for HTML and Visualforce elements like this
                    var decoded = $('<div/>').html(result[0]).text();
                    //console.log(' result[0] ' + decoded);
                    parsexml(decoded);
                    //console.log(' result[1] ' + result[1]);
                    //console.log(' result[2] ' + result[2]);
                } else if(event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            },
            {
                escape: true
            }
        );
    }
    function remoteTogglePrefillModeJS(updatePrefillMode,elementSource)
 { 
    var ffrecordid = '{!ffrecord}';
       Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.PublishComponentController.remoteTogglePrefillMode)}',
        ffrecordid,updatePrefillMode,
        function(result, event) {
            if (event.status) {
                
                
               if (result != null && typeof result=='object' && result.IsValid) {
                   var enableprefill=false;
                   if(result.ResultText=='true')
                   {
                   /* var  issandbox__c=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Sandbox__c');
                           var accid = result[i].ResultSObject.Id;
                           var issandbox = result[i].ResultSObject[issandbox__c];
                           var acctWrapdivid='pp-acc-'+accid;*/
                           enableprefill=true;
                           Intercom('trackEvent', 'enabled-dynamic-prefill');

                    setPrefillModeDisplay(true,elementSource);
                    $('.codeTextAreaClass').each(function(){
                      $(this).html($(this).html().replace('#PUBLICKEY#',$('.sfff-public-key').val()));
                      });
                     
                   }
                   else
                   {
                     setPrefillModeDisplay(false,elementSource);
                   }
                   console.log('Prefill mode - '+result.ResultText);
                   var previousFormC={};
  
                 var dynamic_Prefill_Enabled__c=getPrefixedOrgFieldName(orgPrefix,'Dynamic_Prefill_Enabled__c');
                 previousFormC[dynamic_Prefill_Enabled__c]=enableprefill; 
                 if(previousFormC!=null && Object.keys(previousFormC).length !== 0 && updatePrefillMode)
                  {
                  remoteUpdateFormPrefillInfoJS(previousFormC,elementSource);
                  }
                     
                } else {
                     console.log('Record not found');
                }

            } else if (event.type === 'exception') {
                //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" unknown Exception while getting available themes- " + event.message);
            }
        }, {
            escape: false
        }
    );
 }
 function remoteGetObjectNameListJS(elemMainTabCOntainer)
 { 
    var ffrecordid = '{!ffrecord}';
       Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.PublishComponentController.remoteGetObjectNameList)}',
        ffrecordid,
        function(result, event) {
            if (event.status) {
                
                
               if (result != null && typeof result=='object' && result.IsValid) {

                   if(!isNullOrEmpty(result.ResultText))
                   {
                    /*populate select element for object list*/
                    console.log('populate select element for object list');
                    populatePrefillOption(elemMainTabCOntainer,result.ResultText);
                   }
                   else
                   {
                     /*Create one select element for object list*/
                     console.log('Create one select element for object list');
                     //CreateOnePrefillOption(elemMainTabCOntainer);
                     
                   }
                   console.log('Prefill is enabled- populate object list '+result.ResultText);
                     
                } else {
                     console.log('Prefill is not enabled');
                }

            } else if (event.type === 'exception') {
                //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
            } else {
                //console.log(" unknown Exception while getting available themes- " + event.message);
            }
        }, {
            escape: false
        }
    );
 }
 function remoteUpdateFormPrefillInfoJS(previousFormC,prefillObjectsElement)
 { 
  
    var ffrecordid = '{!ffrecord}';
    previousFormC.Id=ffrecordid;
    var orgId='{!$Organization.Id}';
       Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.PublishComponentController.remoteUpdateFormPrefillInfo)}',
        previousFormC,orgId,
        function(result, event) {
            if (event.status) {
                
                
               if (result != null   ) {
                // remoteGetPrefillKeyJSCall(result ,prefillObjectsElement);
                   console.log('Update prefill success-'+result);
                   resetObjectsEmailFlag();
                     
                } else {
                     console.log('Update prefill fail'+result);
                }

            } else if (event.type === 'exception') {
                
            } else {
                 
            }
        }, {
            escape: false
        }
    );
 }
 function remoteGetPrefillKeyJS(elemSource)
 { 
  
  var ffrecordid = '{!ffrecord}';
   var previousFormC={};
    previousFormC.Id=ffrecordid;
    
    var prevKey = $('.sfff-public-key').val();

    var orgId='{!$Organization.Id}';
       Visualforce.remoting.Manager.invokeAction(
        '{!URLENCODE($RemoteAction.PublishComponentController.remoteGetPrefillKey)}',
        ffrecordid,orgId, 
        function(result, event) {
            if (event.status) {
                
                
               if (result != null   ) {

                   console.log('Success- '+result);
               var inputKeyElem=    $(elemSource).parents('.MainTabContainer').find('input.sfff-public-key')
              // if(isNotNullOrUndefined(inputKeyElem) && !isNullOrEmpty(inputKeyElem.attr('data-prefillkey')))
              // {
              // }
               //else{
                $(elemSource).parents('.MainTabContainer').find('input.sfff-public-key').animate({ color: '#ffffff' },100);
                // $(elemSource).parents('.MainTabContainer').find('input.sfff-public-key').val('');
                 $(elemSource).parents('.MainTabContainer').find('input.sfff-public-key').animate({ color: '#222222' }, 1000).val(result);
               
               //}             
                   
                $('.codeTextAreaClass').each(function(){
                  $(this).html($(this).html().replace(prevKey,$('.sfff-public-key').val()));
                  });                     
                     
                } else {
                     console.log('Update prefill fail'+result);
                }

            } else if (event.type === 'exception') {
                
            } else {
                 
            }
        }, {
            escape: false
        }
    );
 }
 
function loadComponent() {
        var ffrecordid = '{!ffrecord}';
       console.log('Load component please!! ');
        passRecordParam(ffrecordid);
         
         
         
      
    }
    function prefillToggleInitialCall()
    {
        var ffrecordid = '{!ffrecord}';

        var toggleElement=$(' div[data-prefill-toggle="' + ffrecordid + '"]');
          
            togglePrefillMode( toggleElement,false);
    }
    
 
    function popupEMailResult(primarymsg,message,messagetype) {
      var divMainWrapper = $('<div/>').html('');
      var divHeader = $('<div/>').addClass('dialogHeader');
     var divHeaderIcon = $('<div/>').addClass('dialogIcon '+messagetype);
     var divBody = $('<div/>').addClass('dialogFont');
     var divPrimaryMessage = $('<div/>').addClass('primary');
     var divSecondaryMessage = $('<div/>').addClass('secondary');
     var divDetailMessage = $('<div/>').addClass('detail-message');
     $(divHeader).append($(divHeaderIcon));

$(divPrimaryMessage).html(primarymsg);
$(divDetailMessage).html(message);
$(divSecondaryMessage).html($(divDetailMessage).text());
$(divBody).append($(divPrimaryMessage));
$(divBody).append($(divSecondaryMessage));
     
$(divMainWrapper).html($(divHeader));
$(divMainWrapper).append($(divBody));
     
        if(message!='undefined' && message!='')
        {

        $("#dialog-confirm").html($(divMainWrapper).html());
            // Define the Dialog and its properties.
            $("#dialog-confirm").dialog({
                resizable: false,
                modal: true,
                title: "Email Result",
                height: "auto",
                width: 413,
                buttons: {
                    "OK": {
                    click: function () {
                        $(this).dialog("close");
                         callback(true);
                    },
                    text: 'Ok',
                    class: 'vabutton1'
                    } 
                     
                },
                open: function( event, ui ) {
                    $('.ui-dialog :button').blur();
                }
            });
               function callback(value)
                {
                    if (value) {
                      console.log(' Call clear message');
                        clearpopupEmailResultMsg('');
                    } 
                }
            
            }
    }
    
     loadComponent();
  $(document).on( "click", ".toggle-more-less", function(){
  $( ".toggle-more-less-detail" ).toggle();
});
  </script>
   <apex:outputPanel id="togglePrefillPanelJS" >  
   <script>


         function togglePrefillMode(elemSource,isAutoSave)
{
      console.log(' Toggle prefill block ');
   if(isNotNullOrUndefined(elemSource))
         {
             if(isAutoSave)
             {
              <apex:outputText rendered="{!IF(isFreemium,true,false)}">   
        console.log(' Toggle prefill freemium true {!isFreemium}'); 
     upgradeNowMessage('Dynamic prefill is only available for paid subscriptions.','','');
 
        </apex:outputText>

        <apex:outputText rendered="{!IF(isFreemium,false,true)}">  
         console.log(' Toggle prefill freemium false {!isFreemium}'); 
       remoteTogglePrefillModeJS(isAutoSave,elemSource);
 
        </apex:outputText>
             
      }
      else
      {
           console.log(' Toggle prefill not autosave '); 
 remoteTogglePrefillModeJS(isAutoSave,elemSource);
          
          } 

        }
  }
 </script>
        </apex:outputPanel>
  <div id="dialog-confirm" style="display:none;" class="content"></div>
    <apex:actionStatus id="loadstatus" startStyleClass="loadStatusMaincss">
        <apex:facet name="start">
                <apex:facet name="start">
                 <div id="load-status" > 
                    <div class="overlay"></div>
                        <div class="status">
                            <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Loading, please wait...<br /><br /><br /></div></div>
                        </div>
                  </div>
               </apex:facet>
        </apex:facet>
    </apex:actionStatus>
    <apex:outputPanel id="scriptblock">

</apex:outputPanel>
<apex:outputPanel id="objectItemrowHtmlWrapper">
<div id="objectItemrowHtmlTEMP" style="display:none" >
 <div class="sfff-object-row">

   <div class="sfff-object-item-1">
    <apex:selectList id="objectListTEMP" rendered="{!IF(objectList!=null && objectList.size>0,true,false)}" styleClass="select-elem sel-object-list"  value="{!tempSelectVar}" onchange="dynamicPrefillSave(this,true);return false;"  multiselect="false"  size="1">
                          <apex:selectOptions value="{!objectList}"></apex:selectOptions> 
                      </apex:selectList>
 </div>
   <div class="sfff-object-item-2">


 
    <div class="sfff-add-delete-box">
    <a class="sfff-delete-action"   onclick="deleteObjectItemRowHTML(this);return false;" style="display: none;">
    </a> 
    <!--<a class="sfff-addnew-action" href="#" onclick="addNewObjectItemRowHTML(this);return false;">
    </a>-->
    </div>
     </div>
 </div>

</div>
 
</apex:outputPanel>

<div id="dialogcopycode" style="display:none">
</div>
</apex:component>