<!-- Display Daddy Analytics Chart using d3 javascript library -->

<apex:page controller="DaddyAnalytics.DaddyAnalyticsChartController" sidebar="false">
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
        <apex:form id="formid">
        <apex:sectionHeader title="Daddy Analytics Chart"/> 
        <apex:pageBlock id="pageBlockid">
        <apex:pageBlockSection title="Filter" columns="3" id="sectionId" collapsible="false" >  
         
                <!-- Adding select list for Date range filter-->
                
                <apex:pageBlockSectionItem id="sectionItem1Id">
                <apex:outputLabel value="Date Range: " />
                        <apex:selectlist id="datelistid" multiselect="false"  size="1" >
                                <apex:selectOption itemValue="LAST_N_DAYS:1" itemLabel="Last Day"/>
                                <apex:selectOption itemValue="LAST_N_DAYS:3" itemLabel="Last 3 Days"/>                                
                                <apex:selectOption itemValue="LAST_N_DAYS:7" itemLabel="Last 7 Days"/>
                                <apex:selectOption itemValue="LAST_N_DAYS:30" itemLabel="Last 30 Days"/>
                                <apex:selectOption itemValue="LAST_90_DAYS" itemLabel="Last 90 Days"/>                                                     
                        </apex:selectlist>                       
              </apex:pageBlockSectionItem> 
              
              <!-- Adding select list for Lead status filter-->
              
              <apex:pageBlockSectionItem id="sectionItem2Id">                     
                       <apex:outputLabel value="Lead Status: " />
                        <apex:selectlist id="statuslistid" multiselect="false"  size="1" >
                                <apex:selectOptions Value="{!LeadStatusVal}" />                            
                                <apex:selectOption itemValue="IsConverted = True" itemLabel="Converted"/>
                                <apex:selectOption itemValue="IsConverted = False" itemLabel="Unconverted"/>                                                                    
                        </apex:selectlist>
              </apex:pageBlockSectionItem>    
                          
              <apex:pageBlockSectionItem >     
                        <apex:commandButton value="Go">
                                <apex:actionSupport event="onclick"  rerender="d3barchart" />
                        </apex:commandButton>  
              </apex:pageBlockSectionItem>              
        </apex:pageBlockSection>
        <div id="messageBox"></div>     
        <apex:pageBlockSection title="Chart" id="d3barchart" collapsible="false">      
        <apex:outputPanel >
               
                        <div id="wrapperDiv"></div>        
                        <apex:includeScript value="{!$Resource.DaddyAnalytics__d3script}"></apex:includeScript>
                        <style type="text/css">
                                text
                                {
                                           font: 10px sans-serif;
                                }
                                                        
                                svg
                                {
                
                                           margin-left:-8px;
                                           margin-top:20px;                      
                                           min-height:100px!important;
                                           width:960px;
                
                                }
                               
                
                                body 
                                {
                                           padding:0px;
                                           margin-top:-500px;
                                           text-align:center;
                                }
                                                        
                                rect.background
                                {
                                           fill: white;
                                }

                                .axis 
                                {
                                           shape-rendering: crispEdges;
                                }

                                .axis path, .axis line 
                                {
                                           fill: none;
                                           stroke: #000;
                                }
                                                        
                                #messageBox{font-size: 18px}
                                #wrapperDiv{text-align:center;}   
                                #sidebarDiv .recentItemModule .mruItem{ text-align:left;}
                                .sidebarModuleBody{ text-align:left;}
                                .sidebarModuleHeader{ text-align:left;}
                                .homeTab .brdPalette{text-align:left;}  
                                
                                .zen .zen-tabMenu {text-align: left;}
                                <!-- For Daddy Analytics Chart label css setting-->                                
                                 body .bPageTitle .ptBody h1.noSecondHeader {text-align:left;}
                                <!--For Date Range and Lead status css setting-->
                                .bPageBlock .detailList .dataCol{width:5px}
                                .bPageBlock .detailList .labelCol {line-height:20px;}
                                .bPageBlock .labelCol {padding-left:2px}
                                .bPageBlock .dataCol {padding-left:2px;,padding-right:2px;}
                                <!-- For Filter and Chart label css setting-->
                                .apexp .bPageBlock.apexDefaultPageBlock .pbBody .pbSubheader h3{margin-left:-96%} 


                         </style>
        
                        <body>
                                <script type="text/javascript">
                                        $('#messageBox').prev('div').children().next().children().css({'width':'47%','margin':'0 30%'});
                                        //Javascript remoting accessing data from apex.  
                                        
                                        var dateSelectListValue=document.getElementById('{!$Component.formid.pageBlockid.sectionId.sectionItem1Id.datelistid}').value;
                                        var statusSelectListValue=document.getElementById('{!$Component.formid.pageBlockid.sectionId.sectionItem2Id.statuslistid}').value;
                                                                                                                                                                        
                                        DaddyAnalytics.DaddyAnalyticsChartController.leadJsonParse(statusSelectListValue,dateSelectListValue,function(result,event)
                                        {
                         
                                                if(event.status)
                                                {
                                                        if(result==null)
                                                        {
                                                                                                                                
                                                                $('#messageBox').append('<div>No records matching that criteria are available.</div>');                                                              
                                                                $('svg').hide();
                                                                
                                                        }
                                                        else
                                                        {
                                                                         
                                                                var myObject=JSON.parse(result);
                                                                hierarchy.nodes(myObject);
                                                                x.domain([0, myObject.value]).nice();
                                                                down(myObject, 0);
                                                                                                            
                                                                //Change Svg height dynamically as per data 
                           
                                                                var enterG = document.getElementsByClassName('enter');                        
                                                                var blueRows = enterG[0].childNodes.length;
                                                                var countTotalRowMargin = blueRows*20; 
                                                                var countRowHeight = blueRows*20; 
                                                                var getTotalEnterElementHeight = countTotalRowMargin+countRowHeight;                
                                                                $('svg').height(getTotalEnterElementHeight);
                                                                setTimeout(function(){
                                                                          $('body').addClass('bodyHeight');
                                                                          $('#wrapperDiv').css({'height':'400px','overflow-y':'auto'});
                                                                },200);
                                                          }
                                                 }
                        
                                     },{escape:false});
         
                                     var m = [30, 40, 20, 350], // top right bottom left
                                     w = 960 - m[1] - m[3], // width
                                     h = 500 - m[0] - m[2], // height
                                     x = d3.scale.linear().range([0, w]),
                                     y = 20, // bar height
                                     z = d3.scale.ordinal().range(["steelblue", "#ccc"]), // bar color
                                     duration = 750,
                                     delay = 25;

                                     var hierarchy = d3.layout.partition()
                                                       .value(function(d) { return d.cnt; });

                                     var xAxis = d3.svg.axis()
                                                       .scale(x)
                                                       .orient("top");
                                     var svgWrapper = document.getElementById('wrapperDiv'); 
                                     var svg = d3.select(svgWrapper).append("svg:svg")
                                                 .attr("width", w + m[1] + m[3])
                                                 .attr("height", h + m[0] + m[2])
                                                 .append("svg:g")
                                                 .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
                                     
                                     svg.append("svg:rect")
                                        .attr("class", "background")
                                        .attr("width", w)
                                        .attr("height", h)                                       
                                        .on("click", up);

                                     svg.append("svg:g")
                                        .attr("class", "x axis");

                                     svg.append("svg:g")
                                        .attr("class", "y axis")
                                        .append("svg:line")
                                        .attr("y1", "100%");
                           
                                     //down() is used to go forward after clicking on parent bluebar.
                      
                                     function down(d, i) 
                                     {
                           
                                             if (!d.children || this.__transition__) return;
                                             var end = duration + d.children.length * delay;
                                                                 
                                             // Mark any currently-displayed bars as exiting.
                                             var exit = svg.selectAll(".enter").attr("class", "exit");

                                             // Entering nodes immediately obscure the clicked-on bar, so hide it.
                                             exit.selectAll("rect").filter(function(p) { return p === d; })
                                                 .style("fill-opacity", 1e-6);

                                             // Enter the new bars for the clicked-on data.
                                             // Per above, entering bars are immediately visible.
                                             var enter = bar(d).attr("transform", stack(i))
                                                               .style("opacity", 1);
                                   
                                             // Have the text fade-in, even though the bars are visible.
                                             // Color the bars as parents; they will fade to children if appropriate.
                                             enter.select("text").style("fill-opacity", 1e-6);
                                             enter.select("rect").style("fill", z(true));
                                
                                             // Update the x-scale domain.
                                             x.domain([0, d3.max(d.children, function(d) { return d.value; })]).nice();
                                
                                             // Update the x-axis.
                                             svg.selectAll(".x.axis").transition().duration(duration).call(xAxis);
                                
                                             // Transition entering bars to their new position.
                                             var enterTransition = enter.transition()
                                                                        .duration(duration)
                                                                        .delay(function(d, i) { return i * delay; })
                                                                        .attr("transform", function(d, i) { return "translate(0," + y * i * 1.2 + ")"; });
                                
                                             // Transition entering text.
                                             enterTransition.select("text").style("fill-opacity", 1);
                                
                                             // Transition entering rects to the new x-scale.
                                             enterTransition.select("rect")
                                                            .attr("width", function(d) { return x(d.value); })
                                                            .attr('class','blueBar')
                                                            .style("fill", function(d) { return z(!!d.children); });
                                
                                             // Transition exiting bars to fade out.
                                             var exitTransition = exit.transition()
                                                                      .duration(duration)
                                                                      .style("opacity", 1e-6)
                                                                      .remove();
                                
                                             // Transition exiting bars to the new x-scale.
                                             exitTransition.selectAll("rect").attr("width", function(d) { return x(d.value); });
                                
                                             // Rebind the current node to the background.
                                             svg.select(".background").data([d]).transition().duration(end); d.index = i;
                                                                  
                                             //Change Svg height dynamically as per data 
                                             setTimeout(function(){
                                                     var enterG1 = document.getElementsByClassName('enter');                        
                                                     var blueRows1 = enterG1[0].childNodes.length;
                                                     var countTotalRowMargin1 = blueRows1*20; 
                                                     var countRowHeight1 = blueRows1*20; 
                                                     var getTotalEnterElementHeight1 = countTotalRowMargin1+countRowHeight1;
                                                     $('svg').height(getTotalEnterElementHeight1);
                                                     $('#wrapperDiv').css({'height':'400px','overflow-y':'auto'});
                                             },100); 
                                             setTimeout(function(){
                                                     $('#wrapperDiv').css({'height':'400px','overflow-y':'auto'});
                                             },100); 
                                      }
                
                        
                                      //up() is used to go backward after clicking on svg/white area.
                                                                
                                      function up(d) 
                                      {
                                                                
                                              if (!d.parent || this.__transition__) return;
                                                      var end = duration + d.children.length * delay;
                                        
                                              // Mark any currently-displayed bars as exiting.
                                              var exit = svg.selectAll(".enter").attr("class", "exit");
                                        
                                              // Enter the new bars for the clicked-on data's parent.
                                              var enter = bar(d.parent)
                                                               .attr("transform", function(d, i) { return "translate(0," + y * i * 1.2 + ")"; })
                                                               .style("opacity", 1e-6);
                                        
                                               // Color the bars as appropriate.
                                               // Exiting nodes will obscure the parent bar, so hide it.
                                               enter.select("rect")
                                                    .style("fill", function(d) { return z(!!d.children); })
                                                    .filter(function(p) { return p === d; })
                                                    .style("fill-opacity", 1e-6);
                                        
                                                                            
                                               // Update the x-scale domain.
                                               x.domain([0, d3.max(d.parent.children, function(d) { return d.value; })]).nice();
                                        
                                               // Update the x-axis.
                                               svg.selectAll(".x.axis").transition().duration(duration).call(xAxis);
                                        
                                               // Transition entering bars to fade in over the full duration.
                                               var enterTransition = enter.transition()
                                                                          .duration(end)
                                                                          .style("opacity", 1);
                                        
                                               // Transition entering rects to the new x-scale.
                                               // When the entering parent rect is done, make it visible!
                                               enterTransition.select("rect")
                                                              .attr("width", function(d) { return x(d.value); })
                                                              .each("end", function(p) { if (p === d) d3.select(this).style("fill-opacity", null); });
                                        
                                               // Transition exiting bars to the parent's position.
                                               var exitTransition = exit.selectAll("g").transition()
                                                                        .duration(duration)
                                                                        .delay(function(d, i) { return i * delay; })
                                                                        .attr("transform", stack(d.index));
                                        
                                               // Transition exiting text to fade out.
                                               exitTransition.select("text")
                                                             .style("fill-opacity", 1e-6);
                                        
                                               // Transition exiting rects to the new scale and fade to parent color.
                                               exitTransition.select("rect")
                                                             .attr("width", function(d) { return x(d.value); })
                                                             .style("fill", z(true));
                                        
                                               // Remove exiting nodes when the last child has finished transitioning.
                                               exit.transition().duration(end).remove();
                                        
                                               // Rebind the current parent to the background.
                                               svg.select(".background").data([d.parent]).transition().duration(end);
                                                                          
                                               //Change Svg height dynamically as per data  
                                               setTimeout(function(){
                                                       var enterG2 = document.getElementsByClassName('enter');                        
                                                       var blueRows2 = enterG2[0].childNodes.length;
                                                       var countTotalRowMargin2 = blueRows2*20; 
                                                       var countRowHeight2 = blueRows2*20; 
                                                       var getTotalEnterElementHeight2 = countTotalRowMargin2+countRowHeight2;
                                                       $('svg').height(getTotalEnterElementHeight2);
                                                       $('#wrapperDiv').css({'height':'400px','overflow-y':'auto'});
                                                       },100); 
                                                       setTimeout(function(){
                                                               $('#wrapperDiv').css({'height':'400px','overflow-y':'auto'});
                                                       },100); 
                                                                          
                                                                          
                                                }
                                        
                                                // Creates a set of bars for the given data node, at the specified index.
                                                function bar(d) 
                                                {
                                                        var bar = svg.insert("svg:g", ".y.axis")
                                                                     .attr("class", "enter")
                                                                     .attr("transform", "translate(0,5)")
                                                                     .selectAll("g")
                                                                     .data(d.children)
                                                                     .enter().append("svg:g")
                                                                     .style("cursor", function(d) { return !d.children ? null : "pointer"; })
                                                                     .on("click", down);
                                        
                                                        bar.append("svg:text")
                                                           .attr("x", -6)
                                                           .attr("y", y / 2)
                                                           .attr("dy", ".35em")
                                                           .attr("text-anchor", "end")
                                                           .text(function(d) {return d.name; });
                                        
                                                        bar.append("svg:rect")
                                                           .attr("width", function(d) { return x(d.value); })
                                                           .attr("height", y);
                                        
                                                        return bar;
                                                }
                                        
                                                // A stateful closure for stacking bars horizontally.
                                                function stack(i) 
                                                {
                                                        var x0 = 0;
                                                        return function(d) {
                                                                       var tx = "translate(" + x0 + "," + y * i * 1.2 + ")";
                                                                       x0 += x(d.value);
                                                                       return tx;
                                                               };
                                                }
                                                                
                                         </script>
                                  </body>
                                           
              </apex:outputPanel>
             
            
             </apex:pageBlockSection>
             </apex:pageBlock>
              </apex:form>
</apex:page>